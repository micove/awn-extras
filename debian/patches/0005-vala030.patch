Description: Vala fixes
 - awnterm needs Vala 0.12
 - related needs Vala 0.12
 - notification-area uses GLib.Timeout.

--- a/applets/maintained/notification-area/notification-area.vala
+++ b/applets/maintained/notification-area/notification-area.vala
@@ -543,7 +543,7 @@
     // workaround for https://bugzilla.gnome.org/show_bug.cgi?id=604579
     if (!gpm_workaround_done && icon.get_title () == "gnome-power-manager")
     {
-      Timeout.add (2000, workaround_gpm_bug);
+      GLib.Timeout.add (2000, workaround_gpm_bug);
       gpm_workaround_done = true;
     }
 
@@ -588,7 +588,7 @@
     }
     if (this.redraw_timer != 0)
     {
-      Timeout.add (this.redraw_timer, this.redraw_scheduler);
+      GLib.Timeout.add (this.redraw_timer, this.redraw_scheduler);
     }
     return false;
   }
@@ -602,7 +602,7 @@
         // problem with redraw + fade-out auto-hide, composited windows really
         // don't like the hiding (same workaround is implemented in AwnPanel)
         this.redraw_timer = 50;
-        Timeout.add (this.redraw_timer, this.redraw_scheduler);
+        GLib.Timeout.add (this.redraw_timer, this.redraw_scheduler);
       }
     }
     return false;
--- a/applets/maintained/awnterm/Makefile.am
+++ b/applets/maintained/awnterm/Makefile.am
@@ -1,7 +1,6 @@
 APPLET_NAME = awnterm
 APPLET_CFLAGS = $(VTE_CFLAGS)
 VALA_FILES = \
-	awn-terminal.vala \
 	$(NULL)
 AM_VALAFLAGS = \
 	--pkg=libintl \
@@ -10,12 +9,13 @@
 	$(srcdir)/keybinder.vapi \
 	$(NULL)
 
-include $(top_srcdir)/Makefile.vala-applet
+include $(top_srcdir)/Makefile.c-applet
 include $(top_srcdir)/Makefile.schemas
 
 applet_LTLIBRARIES = awnterm.la
 awnterm_la_SOURCES =	\
 	$(VALA_C_FILES) \
+	awn-terminal.c \
 	eggaccelerators.c \
 	eggaccelerators.h \
 	keybinder.c \
--- /dev/null
+++ b/applets/maintained/awnterm/awn-terminal.c
@@ -0,0 +1,2022 @@
+/* awn-terminal.c generated by valac 0.12.1, the Vala compiler
+ * generated from awn-terminal.vala, do not modify */
+
+/*
+ * Copyright (C) 2009 Michal Hruby <michal.mhr@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA.
+ *
+ */
+
+#include <glib.h>
+#include <glib-object.h>
+#include <stdlib.h>
+#include <string.h>
+#include <config.h>
+#include <dbus/dbus-glib.h>
+#include <dbus/dbus-glib-lowlevel.h>
+#include <dbus/dbus.h>
+#include <libawn/libawn.h>
+#include <libdesktop-agnostic/config.h>
+#include <gtk/gtk.h>
+#include <float.h>
+#include <math.h>
+#include <gdk/gdk.h>
+#include <vte/vte.h>
+#include <glib/gi18n.h>
+#include <eggaccelerators.h>
+#include <gdk-pixbuf/gdk-pixdata.h>
+#include <keybinder.h>
+
+
+#define TYPE_TERMINAL_DBUS (terminal_dbus_get_type ())
+#define TERMINAL_DBUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TERMINAL_DBUS, TerminalDBus))
+#define IS_TERMINAL_DBUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TERMINAL_DBUS))
+#define TERMINAL_DBUS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_TERMINAL_DBUS, TerminalDBusIface))
+
+typedef struct _TerminalDBus TerminalDBus;
+typedef struct _TerminalDBusIface TerminalDBusIface;
+typedef struct _DBusObjectVTable _DBusObjectVTable;
+typedef struct _TerminalDBusDBusProxy TerminalDBusDBusProxy;
+typedef DBusGProxyClass TerminalDBusDBusProxyClass;
+
+#define TYPE_AWN_TERMINAL_APPLET (awn_terminal_applet_get_type ())
+#define AWN_TERMINAL_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AWN_TERMINAL_APPLET, AwnTerminalApplet))
+#define AWN_TERMINAL_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_AWN_TERMINAL_APPLET, AwnTerminalAppletClass))
+#define IS_AWN_TERMINAL_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AWN_TERMINAL_APPLET))
+#define IS_AWN_TERMINAL_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_AWN_TERMINAL_APPLET))
+#define AWN_TERMINAL_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_AWN_TERMINAL_APPLET, AwnTerminalAppletClass))
+
+typedef struct _AwnTerminalApplet AwnTerminalApplet;
+typedef struct _AwnTerminalAppletClass AwnTerminalAppletClass;
+typedef struct _AwnTerminalAppletPrivate AwnTerminalAppletPrivate;
+#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
+#define _g_free0(var) (var = (g_free (var), NULL))
+#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
+#define _dbus_g_connection_unref0(var) ((var == NULL) ? NULL : (var = (dbus_g_connection_unref (var), NULL)))
+
+struct _TerminalDBusIface {
+	GTypeInterface parent_iface;
+	void (*toggle) (TerminalDBus* self, guint32 time_, GError** error);
+};
+
+struct _DBusObjectVTable {
+	void (*register_object) (DBusConnection*, const char*, void*);
+};
+
+struct _TerminalDBusDBusProxy {
+	DBusGProxy parent_instance;
+	gboolean disposed;
+};
+
+struct _AwnTerminalApplet {
+	AwnAppletSimple parent_instance;
+	AwnTerminalAppletPrivate * priv;
+};
+
+struct _AwnTerminalAppletClass {
+	AwnAppletSimpleClass parent_class;
+};
+
+struct _AwnTerminalAppletPrivate {
+	DesktopAgnosticConfigClient* config;
+	GtkMenu* menu;
+	AwnDialog* dialog;
+	GtkNotebook* notebook;
+	GtkFileChooserButton* chooser;
+	GtkImage* preview_image;
+	GtkWindow* prefs_window;
+	GtkListStore* model;
+	gint number_of_tabs;
+	gfloat _bg_opacity;
+	gchar* _background_image;
+	gchar* _keybinding;
+	gchar* _terminal_command;
+	GTimeVal last_inactive_time;
+};
+
+
+static gpointer awn_terminal_applet_parent_class = NULL;
+static TerminalDBusIface* awn_terminal_applet_terminal_dbus_parent_iface = NULL;
+
+#define not_used APPLETSDIR
+TerminalDBus* terminal_dbus_dbus_proxy_new (DBusGConnection* connection, const char* name, const char* path);
+GType terminal_dbus_get_type (void) G_GNUC_CONST;
+void terminal_dbus_toggle (TerminalDBus* self, guint32 time_, GError** error);
+static void _vala_dbus_register_object (DBusConnection* connection, const char* path, void* object);
+static void _vala_dbus_unregister_object (gpointer connection, GObject* object);
+void terminal_dbus_dbus_register_object (DBusConnection* connection, const char* path, void* object);
+void _terminal_dbus_dbus_unregister (DBusConnection* connection, void* _user_data_);
+DBusHandlerResult terminal_dbus_dbus_message (DBusConnection* connection, DBusMessage* message, void* object);
+static DBusHandlerResult _dbus_terminal_dbus_introspect (TerminalDBus* self, DBusConnection* connection, DBusMessage* message);
+static DBusHandlerResult _dbus_terminal_dbus_property_get_all (TerminalDBus* self, DBusConnection* connection, DBusMessage* message);
+static DBusHandlerResult _dbus_terminal_dbus_toggle (TerminalDBus* self, DBusConnection* connection, DBusMessage* message);
+GType terminal_dbus_dbus_proxy_get_type (void) G_GNUC_CONST;
+DBusHandlerResult terminal_dbus_dbus_proxy_filter (DBusConnection* connection, DBusMessage* message, void* user_data);
+enum  {
+	TERMINAL_DBUS_DBUS_PROXY_DUMMY_PROPERTY
+};
+static void terminal_dbus_dbus_proxy_toggle (TerminalDBus* self, guint32 time_, GError** error);
+static void terminal_dbus_dbus_proxy_terminal_dbus__interface_init (TerminalDBusIface* iface);
+static void _vala_terminal_dbus_dbus_proxy_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec);
+static void _vala_terminal_dbus_dbus_proxy_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec);
+GType awn_terminal_applet_get_type (void) G_GNUC_CONST;
+#define AWN_TERMINAL_APPLET_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), TYPE_AWN_TERMINAL_APPLET, AwnTerminalAppletPrivate))
+enum  {
+	AWN_TERMINAL_APPLET_DUMMY_PROPERTY,
+	AWN_TERMINAL_APPLET_BG_OPACITY,
+	AWN_TERMINAL_APPLET_HIDE_ON_UNFOCUS,
+	AWN_TERMINAL_APPLET_BACKGROUND_IMAGE,
+	AWN_TERMINAL_APPLET_KEYBINDING,
+	AWN_TERMINAL_APPLET_TERMINAL_COMMAND
+};
+AwnTerminalApplet* awn_terminal_applet_new (const gchar* canonical_name, const gchar* uid, gint panel_id);
+AwnTerminalApplet* awn_terminal_applet_construct (GType object_type, const gchar* canonical_name, const gchar* uid, gint panel_id);
+static void awn_terminal_applet_real_constructed (GObject* base);
+static void awn_terminal_applet_clicked_cb (AwnTerminalApplet* self);
+static void _awn_terminal_applet_clicked_cb_awn_icon_clicked (AwnIcon* _sender, gpointer self);
+static void awn_terminal_applet_middle_clicked_cb (AwnTerminalApplet* self);
+static void _awn_terminal_applet_middle_clicked_cb_awn_icon_middle_clicked (AwnIcon* _sender, gpointer self);
+static void awn_terminal_applet_on_context_menu_popup (AwnTerminalApplet* self, GdkEventButton* evt);
+static void _awn_terminal_applet_on_context_menu_popup_awn_icon_context_menu_popup (AwnIcon* _sender, GdkEventButton* event, gpointer self);
+static void awn_terminal_applet_create_new_tab (AwnTerminalApplet* self);
+static void _lambda10_ (GObject* obj, GParamSpec* pspec, AwnTerminalApplet* self);
+static void __lambda10__g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self);
+static void awn_terminal_applet_global_keypress (AwnTerminalApplet* self, const gchar* keystring);
+static void awn_terminal_applet_real_toggle (TerminalDBus* base, guint32 time_, GError** error);
+static void awn_terminal_applet_exited_cb (AwnTerminalApplet* self, VteTerminal* terminal);
+static gboolean awn_terminal_applet_key_press_cb (AwnTerminalApplet* self, GdkEventKey* event, VteTerminal* terminal);
+static void awn_terminal_applet_on_prefs_activate (AwnTerminalApplet* self);
+static void _awn_terminal_applet_on_prefs_activate_gtk_menu_item_activate (GtkMenuItem* _sender, gpointer self);
+static gboolean _lambda0_ (GtkWidget* w, GdkEvent* e, AwnTerminalApplet* self);
+static gboolean __lambda0__gtk_widget_delete_event (GtkWidget* _sender, GdkEvent* event, gpointer self);
+gboolean awn_terminal_applet_get_hide_on_unfocus (AwnTerminalApplet* self);
+static void _lambda1_ (GtkToggleButton* w, AwnTerminalApplet* self);
+void awn_terminal_applet_set_hide_on_unfocus (AwnTerminalApplet* self, gboolean value);
+static void __lambda1__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self);
+static void _lambda2_ (GtkCellRendererAccel* a, const gchar* path, guint accel_key, GdkModifierType accel_mods, guint keycode, AwnTerminalApplet* self);
+void awn_terminal_applet_set_keybinding (AwnTerminalApplet* self, const gchar* value);
+static void __lambda2__gtk_cell_renderer_accel_accel_edited (GtkCellRendererAccel* _sender, const gchar* path_string, guint accel_key, GdkModifierType accel_mods, guint hardware_keycode, gpointer self);
+static void _lambda3_ (GtkCellRendererAccel* a, const gchar* path, AwnTerminalApplet* self);
+static void __lambda3__gtk_cell_renderer_accel_accel_cleared (GtkCellRendererAccel* _sender, const gchar* path_string, gpointer self);
+const gchar* awn_terminal_applet_get_background_image (AwnTerminalApplet* self);
+static void _lambda4_ (GtkFileChooserButton* w, AwnTerminalApplet* self);
+void awn_terminal_applet_set_background_image (AwnTerminalApplet* self, const gchar* value);
+static void __lambda4__gtk_file_chooser_button_file_set (GtkFileChooserButton* _sender, gpointer self);
+static void _lambda5_ (GtkFileChooser* w, AwnTerminalApplet* self);
+static void __lambda5__gtk_file_chooser_update_preview (GtkFileChooser* _sender, gpointer self);
+static void _lambda6_ (GtkButton* b, AwnTerminalApplet* self);
+static void __lambda6__gtk_button_clicked (GtkButton* _sender, gpointer self);
+static void _lambda7_ (GtkRange* w, AwnTerminalApplet* self);
+void awn_terminal_applet_set_bg_opacity (AwnTerminalApplet* self, gfloat value);
+static void __lambda7__gtk_range_value_changed (GtkRange* _sender, gpointer self);
+const gchar* awn_terminal_applet_get_terminal_command (AwnTerminalApplet* self);
+static gboolean _lambda8_ (GtkWidget* w, GdkEventFocus* e, AwnTerminalApplet* self);
+void awn_terminal_applet_set_terminal_command (AwnTerminalApplet* self, const gchar* value);
+static gboolean __lambda8__gtk_widget_focus_out_event (GtkWidget* _sender, GdkEventFocus* event, gpointer self);
+static void _lambda9_ (GtkButton* w, AwnTerminalApplet* self);
+static void __lambda9__gtk_button_clicked (GtkButton* _sender, gpointer self);
+gfloat awn_terminal_applet_get_bg_opacity (AwnTerminalApplet* self);
+const gchar* awn_terminal_applet_get_keybinding (AwnTerminalApplet* self);
+static void _awn_terminal_applet_global_keypress_awn_keybinder_bindkey_handler (const gchar* keystring, gpointer self);
+static GObject * awn_terminal_applet_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
+static void awn_terminal_applet_finalize (GObject* obj);
+void awn_terminal_applet_dbus_register_object (DBusConnection* connection, const char* path, void* object);
+void _awn_terminal_applet_dbus_unregister (DBusConnection* connection, void* _user_data_);
+DBusHandlerResult awn_terminal_applet_dbus_message (DBusConnection* connection, DBusMessage* message, void* object);
+static DBusHandlerResult _dbus_awn_terminal_applet_introspect (AwnTerminalApplet* self, DBusConnection* connection, DBusMessage* message);
+static void _vala_awn_terminal_applet_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec);
+static void _vala_awn_terminal_applet_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec);
+AwnApplet* awn_applet_factory_initp (const gchar* canonical_name, const gchar* uid, gint panel_id);
+static guint _dynamic_request_name0 (DBusGProxy* self, const gchar* param1, guint param2, GError** error);
+
+static const DBusObjectPathVTable _terminal_dbus_dbus_path_vtable = {_terminal_dbus_dbus_unregister, terminal_dbus_dbus_message};
+static const _DBusObjectVTable _terminal_dbus_dbus_vtable = {terminal_dbus_dbus_register_object};
+static const DBusObjectPathVTable _awn_terminal_applet_dbus_path_vtable = {_awn_terminal_applet_dbus_unregister, awn_terminal_applet_dbus_message};
+static const _DBusObjectVTable _awn_terminal_applet_dbus_vtable = {awn_terminal_applet_dbus_register_object};
+
+void terminal_dbus_toggle (TerminalDBus* self, guint32 time_, GError** error) {
+	TERMINAL_DBUS_GET_INTERFACE (self)->toggle (self, time_, error);
+}
+
+
+static void terminal_dbus_base_init (TerminalDBusIface * iface) {
+	static gboolean initialized = FALSE;
+	if (!initialized) {
+		initialized = TRUE;
+	}
+}
+
+
+static void _vala_dbus_register_object (DBusConnection* connection, const char* path, void* object) {
+	const _DBusObjectVTable * vtable;
+	vtable = g_type_get_qdata (G_TYPE_FROM_INSTANCE (object), g_quark_from_static_string ("DBusObjectVTable"));
+	if (vtable) {
+		vtable->register_object (connection, path, object);
+	} else {
+		g_warning ("Object does not implement any D-Bus interface");
+	}
+}
+
+
+static void _vala_dbus_unregister_object (gpointer connection, GObject* object) {
+	char* path;
+	path = g_object_steal_data ((GObject*) object, "dbus_object_path");
+	dbus_connection_unregister_object_path (connection, path);
+	g_free (path);
+}
+
+
+void _terminal_dbus_dbus_unregister (DBusConnection* connection, void* _user_data_) {
+}
+
+
+static DBusHandlerResult _dbus_terminal_dbus_introspect (TerminalDBus* self, DBusConnection* connection, DBusMessage* message) {
+	DBusMessage* reply;
+	DBusMessageIter iter;
+	GString* xml_data;
+	char** children;
+	int i;
+	reply = dbus_message_new_method_return (message);
+	dbus_message_iter_init_append (reply, &iter);
+	xml_data = g_string_new ("<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\" \"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\">\n");
+	g_string_append (xml_data, "<node>\n<interface name=\"org.freedesktop.DBus.Introspectable\">\n  <method name=\"Introspect\">\n    <arg name=\"data\" direction=\"out\" type=\"s\"/>\n  </method>\n</interface>\n<interface name=\"org.freedesktop.DBus.Properties\">\n  <method name=\"Get\">\n    <arg name=\"interface\" direction=\"in\" type=\"s\"/>\n    <arg name=\"propname\" direction=\"in\" type=\"s\"/>\n    <arg name=\"value\" direction=\"out\" type=\"v\"/>\n  </method>\n  <method name=\"Set\">\n    <arg name=\"interface\" direction=\"in\" type=\"s\"/>\n    <arg name=\"propname\" direction=\"in\" type=\"s\"/>\n    <arg name=\"value\" direction=\"in\" type=\"v\"/>\n  </method>\n  <method name=\"GetAll\">\n    <arg name=\"interface\" direction=\"in\" type=\"s\"/>\n    <arg name=\"props\" direction=\"out\" type=\"a{sv}\"/>\n  </method>\n</interface>\n<interface name=\"org.awnproject.Applet.Terminal\">\n  <method name=\"Toggle\">\n    <arg name=\"time_\" type=\"u\" direction=\"in\"/>\n  </method>\n</interface>\n");
+	dbus_connection_list_registered (connection, g_object_get_data ((GObject *) self, "dbus_object_path"), &children);
+	for (i = 0; children[i]; i++) {
+		g_string_append_printf (xml_data, "<node name=\"%s\"/>\n", children[i]);
+	}
+	dbus_free_string_array (children);
+	g_string_append (xml_data, "</node>\n");
+	dbus_message_iter_append_basic (&iter, DBUS_TYPE_STRING, &xml_data->str);
+	g_string_free (xml_data, TRUE);
+	if (reply) {
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+static DBusHandlerResult _dbus_terminal_dbus_property_get_all (TerminalDBus* self, DBusConnection* connection, DBusMessage* message) {
+	DBusMessage* reply;
+	DBusMessageIter iter, reply_iter, subiter;
+	char* interface_name;
+	const char* _tmp0_;
+	if (strcmp (dbus_message_get_signature (message), "s")) {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+	dbus_message_iter_init (message, &iter);
+	reply = dbus_message_new_method_return (message);
+	dbus_message_iter_init_append (reply, &reply_iter);
+	dbus_message_iter_get_basic (&iter, &_tmp0_);
+	dbus_message_iter_next (&iter);
+	interface_name = g_strdup (_tmp0_);
+	if (strcmp (interface_name, "org.awnproject.Applet.Terminal") == 0) {
+		dbus_message_iter_open_container (&reply_iter, DBUS_TYPE_ARRAY, "{sv}", &subiter);
+		dbus_message_iter_close_container (&reply_iter, &subiter);
+	} else {
+		dbus_message_unref (reply);
+		reply = NULL;
+	}
+	g_free (interface_name);
+	if (reply) {
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+static DBusHandlerResult _dbus_terminal_dbus_toggle (TerminalDBus* self, DBusConnection* connection, DBusMessage* message) {
+	DBusMessageIter iter;
+	GError* error;
+	guint32 time_ = 0U;
+	dbus_uint32_t _tmp1_;
+	DBusMessage* reply;
+	error = NULL;
+	if (strcmp (dbus_message_get_signature (message), "u")) {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+	dbus_message_iter_init (message, &iter);
+	dbus_message_iter_get_basic (&iter, &_tmp1_);
+	dbus_message_iter_next (&iter);
+	time_ = _tmp1_;
+	terminal_dbus_toggle (self, time_, &error);
+	if (error) {
+		if (error->domain == DBUS_GERROR) {
+			switch (error->code) {
+				case DBUS_GERROR_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Failed", error->message);
+				break;
+				case DBUS_GERROR_NO_MEMORY:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoMemory", error->message);
+				break;
+				case DBUS_GERROR_SERVICE_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.ServiceUnknown", error->message);
+				break;
+				case DBUS_GERROR_NAME_HAS_NO_OWNER:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NameHasNoOwner", error->message);
+				break;
+				case DBUS_GERROR_NO_REPLY:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoReply", error->message);
+				break;
+				case DBUS_GERROR_IO_ERROR:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.IOError", error->message);
+				break;
+				case DBUS_GERROR_BAD_ADDRESS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.BadAddress", error->message);
+				break;
+				case DBUS_GERROR_NOT_SUPPORTED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NotSupported", error->message);
+				break;
+				case DBUS_GERROR_LIMITS_EXCEEDED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.LimitsExceeded", error->message);
+				break;
+				case DBUS_GERROR_ACCESS_DENIED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AccessDenied", error->message);
+				break;
+				case DBUS_GERROR_AUTH_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AuthFailed", error->message);
+				break;
+				case DBUS_GERROR_NO_SERVER:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoServer", error->message);
+				break;
+				case DBUS_GERROR_TIMEOUT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Timeout", error->message);
+				break;
+				case DBUS_GERROR_NO_NETWORK:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoNetwork", error->message);
+				break;
+				case DBUS_GERROR_ADDRESS_IN_USE:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AddressInUse", error->message);
+				break;
+				case DBUS_GERROR_DISCONNECTED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Disconnected", error->message);
+				break;
+				case DBUS_GERROR_INVALID_ARGS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidArgs", error->message);
+				break;
+				case DBUS_GERROR_FILE_NOT_FOUND:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.FileNotFound", error->message);
+				break;
+				case DBUS_GERROR_FILE_EXISTS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.FileExists", error->message);
+				break;
+				case DBUS_GERROR_UNKNOWN_METHOD:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.UnknownMethod", error->message);
+				break;
+				case DBUS_GERROR_TIMED_OUT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.TimedOut", error->message);
+				break;
+				case DBUS_GERROR_MATCH_RULE_NOT_FOUND:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.MatchRuleNotFound", error->message);
+				break;
+				case DBUS_GERROR_MATCH_RULE_INVALID:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.MatchRuleInvalid", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_EXEC_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ExecFailed", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_FORK_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ForkFailed", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_CHILD_EXITED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ChildExited", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_CHILD_SIGNALED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ChildSignaled", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.Failed", error->message);
+				break;
+				case DBUS_GERROR_UNIX_PROCESS_ID_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.UnixProcessIdUnknown", error->message);
+				break;
+				case DBUS_GERROR_INVALID_SIGNATURE:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidSignature", error->message);
+				break;
+				case DBUS_GERROR_INVALID_FILE_CONTENT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidFileContent", error->message);
+				break;
+				case DBUS_GERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", error->message);
+				break;
+				case DBUS_GERROR_REMOTE_EXCEPTION:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.RemoteException", error->message);
+				break;
+			}
+		}
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	}
+	reply = dbus_message_new_method_return (message);
+	dbus_message_iter_init_append (reply, &iter);
+	if (reply) {
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+DBusHandlerResult terminal_dbus_dbus_message (DBusConnection* connection, DBusMessage* message, void* object) {
+	DBusHandlerResult result;
+	result = DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	if (dbus_message_is_method_call (message, "org.freedesktop.DBus.Introspectable", "Introspect")) {
+		result = _dbus_terminal_dbus_introspect (object, connection, message);
+	} else if (dbus_message_is_method_call (message, "org.freedesktop.DBus.Properties", "GetAll")) {
+		result = _dbus_terminal_dbus_property_get_all (object, connection, message);
+	} else if (dbus_message_is_method_call (message, "org.awnproject.Applet.Terminal", "Toggle")) {
+		result = _dbus_terminal_dbus_toggle (object, connection, message);
+	}
+	if (result == DBUS_HANDLER_RESULT_HANDLED) {
+		return result;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+void terminal_dbus_dbus_register_object (DBusConnection* connection, const char* path, void* object) {
+	if (!g_object_get_data (object, "dbus_object_path")) {
+		g_object_set_data (object, "dbus_object_path", g_strdup (path));
+		dbus_connection_register_object_path (connection, path, &_terminal_dbus_dbus_path_vtable, object);
+		g_object_weak_ref (object, _vala_dbus_unregister_object, connection);
+	}
+}
+
+
+GType terminal_dbus_get_type (void) {
+	static volatile gsize terminal_dbus_type_id__volatile = 0;
+	if (g_once_init_enter (&terminal_dbus_type_id__volatile)) {
+		static const GTypeInfo g_define_type_info = { sizeof (TerminalDBusIface), (GBaseInitFunc) terminal_dbus_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) NULL, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
+		GType terminal_dbus_type_id;
+		terminal_dbus_type_id = g_type_register_static (G_TYPE_INTERFACE, "TerminalDBus", &g_define_type_info, 0);
+		g_type_interface_add_prerequisite (terminal_dbus_type_id, G_TYPE_OBJECT);
+		g_type_set_qdata (terminal_dbus_type_id, g_quark_from_string ("ValaDBusInterfaceProxyType"), &terminal_dbus_dbus_proxy_get_type);
+		g_type_set_qdata (terminal_dbus_type_id, g_quark_from_static_string ("DBusObjectVTable"), (void*) (&_terminal_dbus_dbus_vtable));
+		g_once_init_leave (&terminal_dbus_type_id__volatile, terminal_dbus_type_id);
+	}
+	return terminal_dbus_type_id__volatile;
+}
+
+
+G_DEFINE_TYPE_EXTENDED (TerminalDBusDBusProxy, terminal_dbus_dbus_proxy, DBUS_TYPE_G_PROXY, 0, G_IMPLEMENT_INTERFACE (TYPE_TERMINAL_DBUS, terminal_dbus_dbus_proxy_terminal_dbus__interface_init) );
+TerminalDBus* terminal_dbus_dbus_proxy_new (DBusGConnection* connection, const char* name, const char* path) {
+	TerminalDBus* self;
+	self = g_object_new (terminal_dbus_dbus_proxy_get_type (), "connection", connection, "name", name, "path", path, "interface", "org.awnproject.Applet.Terminal", NULL);
+	return self;
+}
+
+
+static GObject* terminal_dbus_dbus_proxy_construct (GType gtype, guint n_properties, GObjectConstructParam* properties) {
+	GObject* self;
+	DBusGConnection *connection;
+	char* path;
+	char* filter;
+	self = G_OBJECT_CLASS (terminal_dbus_dbus_proxy_parent_class)->constructor (gtype, n_properties, properties);
+	g_object_get (self, "connection", &connection, NULL);
+	g_object_get (self, "path", &path, NULL);
+	dbus_connection_add_filter (dbus_g_connection_get_connection (connection), terminal_dbus_dbus_proxy_filter, self, NULL);
+	filter = g_strdup_printf ("type='signal',path='%s',interface='org.awnproject.Applet.Terminal'", path);
+	dbus_bus_add_match (dbus_g_connection_get_connection (connection), filter, NULL);
+	dbus_g_connection_unref (connection);
+	g_free (path);
+	g_free (filter);
+	return self;
+}
+
+
+DBusHandlerResult terminal_dbus_dbus_proxy_filter (DBusConnection* connection, DBusMessage* message, void* user_data) {
+	if (dbus_message_has_path (message, dbus_g_proxy_get_path (user_data))) {
+	}
+	return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+}
+
+
+static void terminal_dbus_dbus_proxy_dispose (GObject* self) {
+	DBusGConnection *connection;
+	if (((TerminalDBusDBusProxy*) self)->disposed) {
+		return;
+	}
+	((TerminalDBusDBusProxy*) self)->disposed = TRUE;
+	g_object_get (self, "connection", &connection, NULL);
+	dbus_connection_remove_filter (dbus_g_connection_get_connection (connection), terminal_dbus_dbus_proxy_filter, self);
+	G_OBJECT_CLASS (terminal_dbus_dbus_proxy_parent_class)->dispose (self);
+}
+
+
+static void terminal_dbus_dbus_proxy_class_init (TerminalDBusDBusProxyClass* klass) {
+	G_OBJECT_CLASS (klass)->constructor = terminal_dbus_dbus_proxy_construct;
+	G_OBJECT_CLASS (klass)->dispose = terminal_dbus_dbus_proxy_dispose;
+	G_OBJECT_CLASS (klass)->get_property = _vala_terminal_dbus_dbus_proxy_get_property;
+	G_OBJECT_CLASS (klass)->set_property = _vala_terminal_dbus_dbus_proxy_set_property;
+}
+
+
+static void terminal_dbus_dbus_proxy_init (TerminalDBusDBusProxy* self) {
+}
+
+
+static void terminal_dbus_dbus_proxy_toggle (TerminalDBus* self, guint32 time_, GError** error) {
+	DBusError _dbus_error;
+	DBusGConnection *_connection;
+	DBusMessage *_message, *_reply;
+	DBusMessageIter _iter;
+	dbus_uint32_t _tmp0_;
+	if (((TerminalDBusDBusProxy*) self)->disposed) {
+		g_set_error (error, DBUS_GERROR, DBUS_GERROR_DISCONNECTED, "%s", "Connection is closed");
+		return;
+	}
+	_message = dbus_message_new_method_call (dbus_g_proxy_get_bus_name ((DBusGProxy*) self), dbus_g_proxy_get_path ((DBusGProxy*) self), "org.awnproject.Applet.Terminal", "Toggle");
+	dbus_message_iter_init_append (_message, &_iter);
+	_tmp0_ = time_;
+	dbus_message_iter_append_basic (&_iter, DBUS_TYPE_UINT32, &_tmp0_);
+	g_object_get (self, "connection", &_connection, NULL);
+	dbus_error_init (&_dbus_error);
+	_reply = dbus_connection_send_with_reply_and_block (dbus_g_connection_get_connection (_connection), _message, -1, &_dbus_error);
+	dbus_g_connection_unref (_connection);
+	dbus_message_unref (_message);
+	if (dbus_error_is_set (&_dbus_error)) {
+		GQuark _edomain = 0;
+		gint _ecode = 0;
+		if (strstr (_dbus_error.name, "org.freedesktop.DBus.Error") == _dbus_error.name) {
+			const char* _tmp1_;
+			_edomain = DBUS_GERROR;
+			_tmp1_ = _dbus_error.name + 27;
+			if (strcmp (_tmp1_, "Failed") == 0) {
+				_ecode = DBUS_GERROR_FAILED;
+			} else if (strcmp (_tmp1_, "NoMemory") == 0) {
+				_ecode = DBUS_GERROR_NO_MEMORY;
+			} else if (strcmp (_tmp1_, "ServiceUnknown") == 0) {
+				_ecode = DBUS_GERROR_SERVICE_UNKNOWN;
+			} else if (strcmp (_tmp1_, "NameHasNoOwner") == 0) {
+				_ecode = DBUS_GERROR_NAME_HAS_NO_OWNER;
+			} else if (strcmp (_tmp1_, "NoReply") == 0) {
+				_ecode = DBUS_GERROR_NO_REPLY;
+			} else if (strcmp (_tmp1_, "IOError") == 0) {
+				_ecode = DBUS_GERROR_IO_ERROR;
+			} else if (strcmp (_tmp1_, "BadAddress") == 0) {
+				_ecode = DBUS_GERROR_BAD_ADDRESS;
+			} else if (strcmp (_tmp1_, "NotSupported") == 0) {
+				_ecode = DBUS_GERROR_NOT_SUPPORTED;
+			} else if (strcmp (_tmp1_, "LimitsExceeded") == 0) {
+				_ecode = DBUS_GERROR_LIMITS_EXCEEDED;
+			} else if (strcmp (_tmp1_, "AccessDenied") == 0) {
+				_ecode = DBUS_GERROR_ACCESS_DENIED;
+			} else if (strcmp (_tmp1_, "AuthFailed") == 0) {
+				_ecode = DBUS_GERROR_AUTH_FAILED;
+			} else if (strcmp (_tmp1_, "NoServer") == 0) {
+				_ecode = DBUS_GERROR_NO_SERVER;
+			} else if (strcmp (_tmp1_, "Timeout") == 0) {
+				_ecode = DBUS_GERROR_TIMEOUT;
+			} else if (strcmp (_tmp1_, "NoNetwork") == 0) {
+				_ecode = DBUS_GERROR_NO_NETWORK;
+			} else if (strcmp (_tmp1_, "AddressInUse") == 0) {
+				_ecode = DBUS_GERROR_ADDRESS_IN_USE;
+			} else if (strcmp (_tmp1_, "Disconnected") == 0) {
+				_ecode = DBUS_GERROR_DISCONNECTED;
+			} else if (strcmp (_tmp1_, "InvalidArgs") == 0) {
+				_ecode = DBUS_GERROR_INVALID_ARGS;
+			} else if (strcmp (_tmp1_, "FileNotFound") == 0) {
+				_ecode = DBUS_GERROR_FILE_NOT_FOUND;
+			} else if (strcmp (_tmp1_, "FileExists") == 0) {
+				_ecode = DBUS_GERROR_FILE_EXISTS;
+			} else if (strcmp (_tmp1_, "UnknownMethod") == 0) {
+				_ecode = DBUS_GERROR_UNKNOWN_METHOD;
+			} else if (strcmp (_tmp1_, "TimedOut") == 0) {
+				_ecode = DBUS_GERROR_TIMED_OUT;
+			} else if (strcmp (_tmp1_, "MatchRuleNotFound") == 0) {
+				_ecode = DBUS_GERROR_MATCH_RULE_NOT_FOUND;
+			} else if (strcmp (_tmp1_, "MatchRuleInvalid") == 0) {
+				_ecode = DBUS_GERROR_MATCH_RULE_INVALID;
+			} else if (strcmp (_tmp1_, "Spawn.ExecFailed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_EXEC_FAILED;
+			} else if (strcmp (_tmp1_, "Spawn.ForkFailed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_FORK_FAILED;
+			} else if (strcmp (_tmp1_, "Spawn.ChildExited") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_CHILD_EXITED;
+			} else if (strcmp (_tmp1_, "Spawn.ChildSignaled") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_CHILD_SIGNALED;
+			} else if (strcmp (_tmp1_, "Spawn.Failed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_FAILED;
+			} else if (strcmp (_tmp1_, "UnixProcessIdUnknown") == 0) {
+				_ecode = DBUS_GERROR_UNIX_PROCESS_ID_UNKNOWN;
+			} else if (strcmp (_tmp1_, "InvalidSignature") == 0) {
+				_ecode = DBUS_GERROR_INVALID_SIGNATURE;
+			} else if (strcmp (_tmp1_, "InvalidFileContent") == 0) {
+				_ecode = DBUS_GERROR_INVALID_FILE_CONTENT;
+			} else if (strcmp (_tmp1_, "SELinuxSecurityContextUnknown") == 0) {
+				_ecode = DBUS_GERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN;
+			} else if (strcmp (_tmp1_, "RemoteException") == 0) {
+				_ecode = DBUS_GERROR_REMOTE_EXCEPTION;
+			}
+		}
+		g_set_error (error, _edomain, _ecode, "%s", _dbus_error.message);
+		dbus_error_free (&_dbus_error);
+		return;
+	}
+	if (strcmp (dbus_message_get_signature (_reply), "")) {
+		g_set_error (error, DBUS_GERROR, DBUS_GERROR_INVALID_SIGNATURE, "Invalid signature, expected \"%s\", got \"%s\"", "", dbus_message_get_signature (_reply));
+		dbus_message_unref (_reply);
+		return;
+	}
+	dbus_message_iter_init (_reply, &_iter);
+	dbus_message_unref (_reply);
+}
+
+
+static void terminal_dbus_dbus_proxy_terminal_dbus__interface_init (TerminalDBusIface* iface) {
+	iface->toggle = terminal_dbus_dbus_proxy_toggle;
+}
+
+
+static void _vala_terminal_dbus_dbus_proxy_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec) {
+}
+
+
+static void _vala_terminal_dbus_dbus_proxy_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec) {
+}
+
+
+AwnTerminalApplet* awn_terminal_applet_construct (GType object_type, const gchar* canonical_name, const gchar* uid, gint panel_id) {
+	AwnTerminalApplet * self = NULL;
+	g_return_val_if_fail (canonical_name != NULL, NULL);
+	g_return_val_if_fail (uid != NULL, NULL);
+	self = (AwnTerminalApplet*) g_object_new (object_type, "canonical-name", canonical_name, "uid", uid, "panel-id", panel_id, "panel-id", panel_id, NULL);
+	g_object_set ((AwnApplet*) self, "display-name", "Terminal", NULL);
+	return self;
+}
+
+
+AwnTerminalApplet* awn_terminal_applet_new (const gchar* canonical_name, const gchar* uid, gint panel_id) {
+	return awn_terminal_applet_construct (TYPE_AWN_TERMINAL_APPLET, canonical_name, uid, panel_id);
+}
+
+
+static void _awn_terminal_applet_clicked_cb_awn_icon_clicked (AwnIcon* _sender, gpointer self) {
+	awn_terminal_applet_clicked_cb (self);
+}
+
+
+static void _awn_terminal_applet_middle_clicked_cb_awn_icon_middle_clicked (AwnIcon* _sender, gpointer self) {
+	awn_terminal_applet_middle_clicked_cb (self);
+}
+
+
+static void _awn_terminal_applet_on_context_menu_popup_awn_icon_context_menu_popup (AwnIcon* _sender, GdkEventButton* event, gpointer self) {
+	awn_terminal_applet_on_context_menu_popup (self, event);
+}
+
+
+static void _lambda10_ (GObject* obj, GParamSpec* pspec, AwnTerminalApplet* self) {
+	GObject* _tmp0_;
+	gboolean _tmp1_;
+	g_return_if_fail (obj != NULL);
+	g_return_if_fail (pspec != NULL);
+	_tmp0_ = obj;
+	g_object_get ((GtkWindow*) (AWN_IS_DIALOG (_tmp0_) ? ((AwnDialog*) _tmp0_) : NULL), "is-active", &_tmp1_, NULL);
+	if (_tmp1_ == FALSE) {
+		g_get_current_time (&self->priv->last_inactive_time);
+	}
+}
+
+
+static void __lambda10__g_object_notify (GObject* _sender, GParamSpec* pspec, gpointer self) {
+	_lambda10_ (_sender, pspec, self);
+}
+
+
+static gpointer _g_object_ref0 (gpointer self) {
+	return self ? g_object_ref (self) : NULL;
+}
+
+
+static void awn_terminal_applet_real_constructed (GObject* base) {
+	AwnTerminalApplet * self;
+	AwnIcon* _tmp0_ = NULL;
+	AwnIcon* _tmp1_ = NULL;
+	AwnIcon* _tmp2_ = NULL;
+	AwnDialog* _tmp3_ = NULL;
+	GtkVBox* _tmp4_ = NULL;
+	GtkVBox* box;
+	GtkNotebook* _tmp5_ = NULL;
+	DesktopAgnosticConfigClient* _tmp6_ = NULL;
+	DesktopAgnosticConfigClient* _tmp7_;
+	DesktopAgnosticConfigClient* _tmp8_;
+	GError * _inner_error_ = NULL;
+	self = (AwnTerminalApplet*) base;
+	G_OBJECT_CLASS (awn_terminal_applet_parent_class)->constructed ((GObject*) AWN_APPLET_SIMPLE (self));
+	awn_applet_simple_set_tooltip_text ((AwnAppletSimple*) self, "Awn Terminal");
+	awn_applet_simple_set_icon_name ((AwnAppletSimple*) self, "terminal");
+	_tmp0_ = awn_applet_simple_get_icon ((AwnAppletSimple*) self);
+	g_signal_connect_object (_tmp0_, "clicked", (GCallback) _awn_terminal_applet_clicked_cb_awn_icon_clicked, self, 0);
+	_tmp1_ = awn_applet_simple_get_icon ((AwnAppletSimple*) self);
+	g_signal_connect_object (_tmp1_, "middle-clicked", (GCallback) _awn_terminal_applet_middle_clicked_cb_awn_icon_middle_clicked, self, 0);
+	_tmp2_ = awn_applet_simple_get_icon ((AwnAppletSimple*) self);
+	g_signal_connect_object (_tmp2_, "context-menu-popup", (GCallback) _awn_terminal_applet_on_context_menu_popup_awn_icon_context_menu_popup, self, 0);
+	_tmp3_ = (AwnDialog*) awn_dialog_new_for_widget ((GtkWidget*) self);
+	_g_object_unref0 (self->priv->dialog);
+	self->priv->dialog = g_object_ref_sink (_tmp3_);
+	gtk_window_set_skip_taskbar_hint ((GtkWindow*) self->priv->dialog, FALSE);
+	self->priv->number_of_tabs = 0;
+	_tmp4_ = (GtkVBox*) gtk_vbox_new (TRUE, 0);
+	box = g_object_ref_sink (_tmp4_);
+	gtk_container_add ((GtkContainer*) self->priv->dialog, (GtkWidget*) box);
+	_tmp5_ = (GtkNotebook*) gtk_notebook_new ();
+	_g_object_unref0 (self->priv->notebook);
+	self->priv->notebook = g_object_ref_sink (_tmp5_);
+	gtk_notebook_set_tab_pos (self->priv->notebook, GTK_POS_TOP);
+	gtk_notebook_set_scrollable (self->priv->notebook, TRUE);
+	gtk_container_add ((GtkContainer*) box, (GtkWidget*) self->priv->notebook);
+	awn_terminal_applet_create_new_tab (self);
+	g_object_set (self->priv->dialog, "hide-on-unfocus", TRUE, NULL);
+	g_object_set (self->priv->dialog, "hide-on-esc", FALSE, NULL);
+	g_signal_connect_object ((GObject*) self->priv->dialog, "notify::is-active", (GCallback) __lambda10__g_object_notify, self, 0);
+	_tmp6_ = awn_config_get_default_for_applet ((AwnApplet*) self, &_inner_error_);
+	_tmp7_ = _tmp6_;
+	if (_inner_error_ != NULL) {
+		_g_object_unref0 (box);
+		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return;
+	}
+	_tmp8_ = _g_object_ref0 (_tmp7_);
+	_g_object_unref0 (self->priv->config);
+	self->priv->config = _tmp8_;
+	desktop_agnostic_config_client_bind (self->priv->config, DESKTOP_AGNOSTIC_CONFIG_GROUP_DEFAULT, "opacity", (GObject*) self, "bg-opacity", FALSE, DESKTOP_AGNOSTIC_CONFIG_BIND_METHOD_FALLBACK, &_inner_error_);
+	if (_inner_error_ != NULL) {
+		if (_inner_error_->domain == DESKTOP_AGNOSTIC_CONFIG_ERROR) {
+			goto __catch0_desktop_agnostic_config_error;
+		}
+		_g_object_unref0 (box);
+		g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return;
+	}
+	desktop_agnostic_config_client_bind (self->priv->config, DESKTOP_AGNOSTIC_CONFIG_GROUP_DEFAULT, "hide_on_unfocus", (GObject*) self, "hide-on-unfocus", FALSE, DESKTOP_AGNOSTIC_CONFIG_BIND_METHOD_FALLBACK, &_inner_error_);
+	if (_inner_error_ != NULL) {
+		if (_inner_error_->domain == DESKTOP_AGNOSTIC_CONFIG_ERROR) {
+			goto __catch0_desktop_agnostic_config_error;
+		}
+		_g_object_unref0 (box);
+		g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return;
+	}
+	desktop_agnostic_config_client_bind (self->priv->config, DESKTOP_AGNOSTIC_CONFIG_GROUP_DEFAULT, "global_hotkey", (GObject*) self, "keybinding", FALSE, DESKTOP_AGNOSTIC_CONFIG_BIND_METHOD_FALLBACK, &_inner_error_);
+	if (_inner_error_ != NULL) {
+		if (_inner_error_->domain == DESKTOP_AGNOSTIC_CONFIG_ERROR) {
+			goto __catch0_desktop_agnostic_config_error;
+		}
+		_g_object_unref0 (box);
+		g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return;
+	}
+	desktop_agnostic_config_client_bind (self->priv->config, DESKTOP_AGNOSTIC_CONFIG_GROUP_DEFAULT, "bg_img", (GObject*) self, "background-image", FALSE, DESKTOP_AGNOSTIC_CONFIG_BIND_METHOD_FALLBACK, &_inner_error_);
+	if (_inner_error_ != NULL) {
+		if (_inner_error_->domain == DESKTOP_AGNOSTIC_CONFIG_ERROR) {
+			goto __catch0_desktop_agnostic_config_error;
+		}
+		_g_object_unref0 (box);
+		g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return;
+	}
+	desktop_agnostic_config_client_bind (self->priv->config, DESKTOP_AGNOSTIC_CONFIG_GROUP_DEFAULT, "main_terminal", (GObject*) self, "terminal-command", FALSE, DESKTOP_AGNOSTIC_CONFIG_BIND_METHOD_FALLBACK, &_inner_error_);
+	if (_inner_error_ != NULL) {
+		if (_inner_error_->domain == DESKTOP_AGNOSTIC_CONFIG_ERROR) {
+			goto __catch0_desktop_agnostic_config_error;
+		}
+		_g_object_unref0 (box);
+		g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return;
+	}
+	goto __finally0;
+	__catch0_desktop_agnostic_config_error:
+	{
+		GError * err;
+		err = _inner_error_;
+		_inner_error_ = NULL;
+		g_critical ("awn-terminal.vala:193: Config Error: %s", err->message);
+		_g_error_free0 (err);
+	}
+	__finally0:
+	if (_inner_error_ != NULL) {
+		_g_object_unref0 (box);
+		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return;
+	}
+	_g_object_unref0 (box);
+}
+
+
+static void awn_terminal_applet_global_keypress (AwnTerminalApplet* self, const gchar* keystring) {
+	guint32 _tmp0_;
+	GError * _inner_error_ = NULL;
+	g_return_if_fail (self != NULL);
+	g_return_if_fail (keystring != NULL);
+	_tmp0_ = awn_keybinder_get_current_event_time ();
+	terminal_dbus_toggle ((TerminalDBus*) self, _tmp0_, &_inner_error_);
+	if (_inner_error_ != NULL) {
+		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return;
+	}
+}
+
+
+static void awn_terminal_applet_real_toggle (TerminalDBus* base, guint32 time_, GError** error) {
+	AwnTerminalApplet * self;
+	GtkWidgetFlags _tmp0_;
+	GtkWidgetFlags flags;
+	gboolean should_hide;
+	self = (AwnTerminalApplet*) base;
+	_tmp0_ = GTK_WIDGET_FLAGS ((GtkWidget*) self->priv->dialog);
+	flags = _tmp0_ & GTK_VISIBLE;
+	should_hide = flags != 0;
+	if (should_hide) {
+		gboolean _tmp1_;
+		g_object_get ((GtkWindow*) self->priv->dialog, "is-active", &_tmp1_, NULL);
+		if (_tmp1_) {
+			should_hide = TRUE;
+		} else {
+			GTimeVal cur_time = {0};
+			glong sec_diff;
+			should_hide = FALSE;
+			g_get_current_time (&cur_time);
+			sec_diff = cur_time.tv_sec - self->priv->last_inactive_time.tv_sec;
+			if (sec_diff <= 1) {
+				glong usec_diff;
+				usec_diff = ((sec_diff * 1000000) + cur_time.tv_usec) - self->priv->last_inactive_time.tv_usec;
+				if (usec_diff <= 250000) {
+					should_hide = TRUE;
+				}
+			}
+		}
+	}
+	if (should_hide) {
+		gtk_widget_hide ((GtkWidget*) self->priv->dialog);
+	} else {
+		gtk_widget_show_all ((GtkWidget*) self->priv->dialog);
+		gtk_window_present_with_time ((GtkWindow*) self->priv->dialog, time_);
+	}
+}
+
+
+static void awn_terminal_applet_create_new_tab (AwnTerminalApplet* self) {
+	VteTerminal* _tmp0_ = NULL;
+	VteTerminal* terminal;
+	gchar* _tmp1_ = NULL;
+	gchar* _tmp2_;
+	GtkLabel* _tmp3_ = NULL;
+	GtkLabel* _tmp4_;
+	GtkLabel* label;
+	gint _tmp5_;
+	g_return_if_fail (self != NULL);
+	_tmp0_ = (VteTerminal*) vte_terminal_new ();
+	terminal = g_object_ref_sink (_tmp0_);
+	vte_terminal_set_emulation (terminal, "xterm");
+	vte_terminal_fork_command (terminal, NULL, NULL, NULL, "~/", FALSE, FALSE, FALSE);
+	if (self->priv->_background_image != NULL) {
+		vte_terminal_set_background_image_file (terminal, self->priv->_background_image);
+	}
+	self->priv->number_of_tabs++;
+	_tmp1_ = g_strdup_printf ("Term #%d", self->priv->number_of_tabs);
+	_tmp2_ = _tmp1_;
+	_tmp3_ = (GtkLabel*) gtk_label_new (_tmp2_);
+	_tmp4_ = g_object_ref_sink (_tmp3_);
+	_g_free0 (_tmp2_);
+	label = _tmp4_;
+	gtk_notebook_append_page (self->priv->notebook, (GtkWidget*) terminal, (GtkWidget*) label);
+	_tmp5_ = gtk_notebook_get_n_pages (self->priv->notebook);
+	if (_tmp5_ > 1) {
+		gtk_notebook_set_show_tabs (self->priv->notebook, TRUE);
+		gtk_widget_show_all ((GtkWidget*) self->priv->dialog);
+	} else {
+		gtk_notebook_set_show_tabs (self->priv->notebook, FALSE);
+	}
+	g_signal_connect_swapped (terminal, "child-exited", (GCallback) awn_terminal_applet_exited_cb, self);
+	g_signal_connect_swapped (terminal, "key-press-event", (GCallback) awn_terminal_applet_key_press_cb, self);
+	_g_object_unref0 (label);
+	_g_object_unref0 (terminal);
+}
+
+
+static void awn_terminal_applet_clicked_cb (AwnTerminalApplet* self) {
+	GtkWidgetFlags _tmp0_;
+	GtkWidgetFlags flags;
+	g_return_if_fail (self != NULL);
+	_tmp0_ = GTK_WIDGET_FLAGS ((GtkWidget*) self->priv->dialog);
+	flags = _tmp0_ & GTK_VISIBLE;
+	if (flags != 0) {
+		gtk_widget_hide ((GtkWidget*) self->priv->dialog);
+	} else {
+		gtk_widget_show_all ((GtkWidget*) self->priv->dialog);
+	}
+}
+
+
+static void awn_terminal_applet_middle_clicked_cb (AwnTerminalApplet* self) {
+	gchar* _tmp0_;
+	gchar* terminal;
+	gboolean _tmp1_ = FALSE;
+	GdkScreen* _tmp4_ = NULL;
+	GError * _inner_error_ = NULL;
+	g_return_if_fail (self != NULL);
+	_tmp0_ = g_strdup (self->priv->_terminal_command);
+	terminal = _tmp0_;
+	if (terminal == NULL) {
+		_tmp1_ = TRUE;
+	} else {
+		gsize _tmp2_;
+		_tmp2_ = strlen (terminal);
+		_tmp1_ = _tmp2_ == 0;
+	}
+	if (_tmp1_) {
+		gchar* _tmp3_;
+		_tmp3_ = g_strdup ("gnome-terminal");
+		_g_free0 (terminal);
+		terminal = _tmp3_;
+	}
+	_tmp4_ = gtk_window_get_screen ((GtkWindow*) self);
+	gdk_spawn_command_line_on_screen (_tmp4_, terminal, &_inner_error_);
+	if (_inner_error_ != NULL) {
+		goto __catch1_g_error;
+	}
+	goto __finally1;
+	__catch1_g_error:
+	{
+		g_clear_error (&_inner_error_);
+		_inner_error_ = NULL;
+		g_warning ("awn-terminal.vala:301: Unable to run '%s'!", terminal);
+	}
+	__finally1:
+	if (_inner_error_ != NULL) {
+		_g_free0 (terminal);
+		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return;
+	}
+	_g_free0 (terminal);
+}
+
+
+static gboolean awn_terminal_applet_key_press_cb (AwnTerminalApplet* self, GdkEventKey* event, VteTerminal* terminal) {
+	gboolean result = FALSE;
+	GdkModifierType mods;
+	GdkModifierType is_ctrl;
+	GdkModifierType is_shift;
+	gboolean _tmp0_ = FALSE;
+	g_return_val_if_fail (self != NULL, FALSE);
+	g_return_val_if_fail (terminal != NULL, FALSE);
+	mods = (GdkModifierType) (*event).state;
+	is_ctrl = mods & GDK_CONTROL_MASK;
+	is_shift = mods & GDK_SHIFT_MASK;
+	if (is_ctrl != 0) {
+		_tmp0_ = is_shift != 0;
+	} else {
+		_tmp0_ = FALSE;
+	}
+	if (_tmp0_) {
+		guint _tmp1_;
+		const gchar* _tmp2_ = NULL;
+		const gchar* key;
+		_tmp1_ = gdk_keyval_to_lower ((*event).keyval);
+		_tmp2_ = gdk_keyval_name (_tmp1_);
+		key = _tmp2_;
+		if (g_strcmp0 (key, "c") == 0) {
+			vte_terminal_copy_clipboard (terminal);
+		} else {
+			if (g_strcmp0 (key, "v") == 0) {
+				vte_terminal_paste_clipboard (terminal);
+			} else {
+				if (g_strcmp0 (key, "t") == 0) {
+					gint _tmp3_;
+					awn_terminal_applet_create_new_tab (self);
+					_tmp3_ = gtk_notebook_get_n_pages (self->priv->notebook);
+					gtk_notebook_set_current_page (self->priv->notebook, _tmp3_ - 1);
+				}
+			}
+		}
+		result = TRUE;
+		return result;
+	} else {
+		if (is_ctrl != 0) {
+			guint _tmp4_;
+			const gchar* _tmp5_ = NULL;
+			const gchar* key;
+			_tmp4_ = gdk_keyval_to_lower ((*event).keyval);
+			_tmp5_ = gdk_keyval_name (_tmp4_);
+			key = _tmp5_;
+			if (g_strcmp0 (key, "Page_Up") == 0) {
+				gint _tmp6_;
+				gint page;
+				gint _tmp7_;
+				_tmp6_ = gtk_notebook_get_current_page (self->priv->notebook);
+				page = _tmp6_ - 1;
+				_tmp7_ = gtk_notebook_get_n_pages (self->priv->notebook);
+				page = page % _tmp7_;
+				gtk_notebook_set_current_page (self->priv->notebook, page);
+				result = TRUE;
+				return result;
+			} else {
+				if (g_strcmp0 (key, "Page_Down") == 0) {
+					gint _tmp8_;
+					gint page;
+					gint _tmp9_;
+					_tmp8_ = gtk_notebook_get_current_page (self->priv->notebook);
+					page = _tmp8_ + 1;
+					_tmp9_ = gtk_notebook_get_n_pages (self->priv->notebook);
+					page = page % _tmp9_;
+					gtk_notebook_set_current_page (self->priv->notebook, page);
+					result = TRUE;
+					return result;
+				}
+			}
+		}
+	}
+	result = FALSE;
+	return result;
+}
+
+
+static void awn_terminal_applet_exited_cb (AwnTerminalApplet* self, VteTerminal* terminal) {
+	gint _tmp0_;
+	gint pages;
+	g_return_if_fail (self != NULL);
+	g_return_if_fail (terminal != NULL);
+	_tmp0_ = gtk_notebook_get_n_pages (self->priv->notebook);
+	pages = _tmp0_;
+	if (pages > 1) {
+		gint _tmp1_;
+		gint page;
+		_tmp1_ = gtk_notebook_get_current_page (self->priv->notebook);
+		page = _tmp1_;
+		gtk_notebook_remove_page (self->priv->notebook, page);
+		if (pages == 2) {
+			gtk_notebook_set_show_tabs (self->priv->notebook, FALSE);
+		}
+		gtk_widget_show_all ((GtkWidget*) self->priv->dialog);
+	} else {
+		vte_terminal_reset (terminal, TRUE, TRUE);
+		vte_terminal_fork_command (terminal, NULL, NULL, NULL, "~/", FALSE, FALSE, FALSE);
+		gtk_widget_hide ((GtkWidget*) self->priv->dialog);
+	}
+}
+
+
+static void _awn_terminal_applet_on_prefs_activate_gtk_menu_item_activate (GtkMenuItem* _sender, gpointer self) {
+	awn_terminal_applet_on_prefs_activate (self);
+}
+
+
+static void awn_terminal_applet_on_context_menu_popup (AwnTerminalApplet* self, GdkEventButton* evt) {
+	AwnIcon* _tmp7_ = NULL;
+	g_return_if_fail (self != NULL);
+	if (self->priv->menu == NULL) {
+		GtkImageMenuItem* prefs_item = NULL;
+		GtkWidget* about_item = NULL;
+		GtkWidget* _tmp0_ = NULL;
+		GtkWidget* _tmp1_;
+		GtkMenu* _tmp2_;
+		GtkImageMenuItem* _tmp3_ = NULL;
+		GtkWidget* _tmp4_ = NULL;
+		GtkWidget* _tmp5_;
+		GtkWidget* _tmp6_;
+		_tmp0_ = awn_applet_create_default_menu ((AwnApplet*) self);
+		_tmp1_ = _tmp0_;
+		_tmp2_ = _g_object_ref0 (GTK_IS_MENU (_tmp1_) ? ((GtkMenu*) _tmp1_) : NULL);
+		_g_object_unref0 (self->priv->menu);
+		self->priv->menu = _tmp2_;
+		_tmp3_ = (GtkImageMenuItem*) gtk_image_menu_item_new_from_stock (GTK_STOCK_PREFERENCES, NULL);
+		_g_object_unref0 (prefs_item);
+		prefs_item = g_object_ref_sink (_tmp3_);
+		g_signal_connect_object ((GtkMenuItem*) prefs_item, "activate", (GCallback) _awn_terminal_applet_on_prefs_activate_gtk_menu_item_activate, self, 0);
+		gtk_widget_show ((GtkWidget*) prefs_item);
+		gtk_menu_shell_append ((GtkMenuShell*) self->priv->menu, (GtkWidget*) ((GtkMenuItem*) prefs_item));
+		_tmp4_ = awn_applet_create_about_item_simple ((AwnApplet*) self, "Copyright © 2009 Michal Hruby" "<michal.mhr@gmail.com>", AWN_APPLET_LICENSE_GPLV2, VERSION);
+		_tmp5_ = _g_object_ref0 (_tmp4_);
+		_g_object_unref0 (about_item);
+		about_item = _tmp5_;
+		gtk_widget_show (about_item);
+		_tmp6_ = about_item;
+		gtk_menu_shell_append ((GtkMenuShell*) self->priv->menu, (GtkWidget*) (GTK_IS_MENU_ITEM (_tmp6_) ? ((GtkMenuItem*) _tmp6_) : NULL));
+		_g_object_unref0 (about_item);
+		_g_object_unref0 (prefs_item);
+	}
+	gtk_menu_set_screen (self->priv->menu, NULL);
+	_tmp7_ = awn_applet_simple_get_icon ((AwnAppletSimple*) self);
+	awn_icon_popup_gtk_menu (_tmp7_, (GtkWidget*) self->priv->menu, (*evt).button, (*evt).time);
+}
+
+
+static gboolean _lambda0_ (GtkWidget* w, GdkEvent* e, AwnTerminalApplet* self) {
+	gboolean result = FALSE;
+	g_return_val_if_fail (w != NULL, FALSE);
+	g_return_val_if_fail (e != NULL, FALSE);
+	gtk_widget_hide (w);
+	result = TRUE;
+	return result;
+}
+
+
+static gboolean __lambda0__gtk_widget_delete_event (GtkWidget* _sender, GdkEvent* event, gpointer self) {
+	gboolean result;
+	result = _lambda0_ (_sender, event, self);
+	return result;
+}
+
+
+static void _lambda1_ (GtkToggleButton* w, AwnTerminalApplet* self) {
+	gboolean _tmp0_;
+	g_return_if_fail (w != NULL);
+	_tmp0_ = gtk_toggle_button_get_active (w);
+	awn_terminal_applet_set_hide_on_unfocus (self, _tmp0_);
+}
+
+
+static void __lambda1__gtk_toggle_button_toggled (GtkToggleButton* _sender, gpointer self) {
+	_lambda1_ (_sender, self);
+}
+
+
+static void _lambda2_ (GtkCellRendererAccel* a, const gchar* path, guint accel_key, GdkModifierType accel_mods, guint keycode, AwnTerminalApplet* self) {
+	guint key = 0U;
+	EggVirtualModifierType virt_mods = 0;
+	GdkKeymap* _tmp0_ = NULL;
+	EggVirtualModifierType _tmp1_;
+	gchar* _tmp2_ = NULL;
+	gchar* _tmp3_;
+	g_return_if_fail (a != NULL);
+	g_return_if_fail (path != NULL);
+	_tmp0_ = gdk_keymap_get_default ();
+	egg_keymap_virtualize_modifiers (_tmp0_, accel_mods, &_tmp1_);
+	virt_mods = _tmp1_;
+	_tmp2_ = egg_virtual_accelerator_name (accel_key, virt_mods);
+	_tmp3_ = _tmp2_;
+	awn_terminal_applet_set_keybinding (self, _tmp3_);
+	_g_free0 (_tmp3_);
+}
+
+
+static void __lambda2__gtk_cell_renderer_accel_accel_edited (GtkCellRendererAccel* _sender, const gchar* path_string, guint accel_key, GdkModifierType accel_mods, guint hardware_keycode, gpointer self) {
+	_lambda2_ (_sender, path_string, accel_key, accel_mods, hardware_keycode, self);
+}
+
+
+static void _lambda3_ (GtkCellRendererAccel* a, const gchar* path, AwnTerminalApplet* self) {
+	g_return_if_fail (a != NULL);
+	g_return_if_fail (path != NULL);
+	awn_terminal_applet_set_keybinding (self, "");
+}
+
+
+static void __lambda3__gtk_cell_renderer_accel_accel_cleared (GtkCellRendererAccel* _sender, const gchar* path_string, gpointer self) {
+	_lambda3_ (_sender, path_string, self);
+}
+
+
+static void _lambda4_ (GtkFileChooserButton* w, AwnTerminalApplet* self) {
+	gchar* _tmp0_ = NULL;
+	gchar* _tmp1_;
+	g_return_if_fail (w != NULL);
+	_tmp0_ = gtk_file_chooser_get_filename ((GtkFileChooser*) w);
+	_tmp1_ = _tmp0_;
+	awn_terminal_applet_set_background_image (self, _tmp1_);
+	_g_free0 (_tmp1_);
+}
+
+
+static void __lambda4__gtk_file_chooser_button_file_set (GtkFileChooserButton* _sender, gpointer self) {
+	_lambda4_ (_sender, self);
+}
+
+
+static void _lambda5_ (GtkFileChooser* w, AwnTerminalApplet* self) {
+	gchar* _tmp0_ = NULL;
+	gchar* filename;
+	GdkPixbuf* _tmp1_ = NULL;
+	GdkPixbuf* pixbuf;
+	GError * _inner_error_ = NULL;
+	g_return_if_fail (w != NULL);
+	_tmp0_ = gtk_file_chooser_get_preview_filename (w);
+	filename = _tmp0_;
+	_tmp1_ = gdk_pixbuf_new_from_file_at_size (filename, 128, 128, &_inner_error_);
+	pixbuf = _tmp1_;
+	if (_inner_error_ != NULL) {
+		goto __catch2_g_error;
+	}
+	gtk_image_set_from_pixbuf (self->priv->preview_image, pixbuf);
+	gtk_file_chooser_set_preview_widget_active (w, TRUE);
+	_g_object_unref0 (pixbuf);
+	goto __finally2;
+	__catch2_g_error:
+	{
+		g_clear_error (&_inner_error_);
+		_inner_error_ = NULL;
+		gtk_file_chooser_set_preview_widget_active (w, FALSE);
+	}
+	__finally2:
+	if (_inner_error_ != NULL) {
+		_g_free0 (filename);
+		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return;
+	}
+	_g_free0 (filename);
+}
+
+
+static void __lambda5__gtk_file_chooser_update_preview (GtkFileChooser* _sender, gpointer self) {
+	_lambda5_ (_sender, self);
+}
+
+
+static void _lambda6_ (GtkButton* b, AwnTerminalApplet* self) {
+	g_return_if_fail (b != NULL);
+	gtk_file_chooser_set_filename ((GtkFileChooser*) self->priv->chooser, "");
+	awn_terminal_applet_set_background_image (self, "");
+}
+
+
+static void __lambda6__gtk_button_clicked (GtkButton* _sender, gpointer self) {
+	_lambda6_ (_sender, self);
+}
+
+
+static void _lambda7_ (GtkRange* w, AwnTerminalApplet* self) {
+	gdouble _tmp0_;
+	g_return_if_fail (w != NULL);
+	_tmp0_ = gtk_range_get_value (w);
+	awn_terminal_applet_set_bg_opacity (self, (gfloat) _tmp0_);
+}
+
+
+static void __lambda7__gtk_range_value_changed (GtkRange* _sender, gpointer self) {
+	_lambda7_ (_sender, self);
+}
+
+
+static gboolean _lambda8_ (GtkWidget* w, GdkEventFocus* e, AwnTerminalApplet* self) {
+	gboolean result = FALSE;
+	GtkWidget* _tmp0_;
+	const gchar* _tmp1_ = NULL;
+	g_return_val_if_fail (w != NULL, FALSE);
+	_tmp0_ = w;
+	_tmp1_ = gtk_entry_get_text (GTK_IS_ENTRY (_tmp0_) ? ((GtkEntry*) _tmp0_) : NULL);
+	awn_terminal_applet_set_terminal_command (self, _tmp1_);
+	result = FALSE;
+	return result;
+}
+
+
+static gboolean __lambda8__gtk_widget_focus_out_event (GtkWidget* _sender, GdkEventFocus* event, gpointer self) {
+	gboolean result;
+	result = _lambda8_ (_sender, event, self);
+	return result;
+}
+
+
+static void _lambda9_ (GtkButton* w, AwnTerminalApplet* self) {
+	g_return_if_fail (w != NULL);
+	gtk_widget_hide ((GtkWidget*) self->priv->prefs_window);
+}
+
+
+static void __lambda9__gtk_button_clicked (GtkButton* _sender, gpointer self) {
+	_lambda9_ (_sender, self);
+}
+
+
+static void awn_terminal_applet_on_prefs_activate (AwnTerminalApplet* self) {
+	GtkWindow* _tmp0_ = NULL;
+	const gchar* _tmp1_ = NULL;
+	GtkVBox* _tmp2_ = NULL;
+	GtkBox* box;
+	GtkLabel* _tmp3_ = NULL;
+	GtkWidget* widget;
+	GtkWidget* _tmp4_;
+	const gchar* _tmp5_ = NULL;
+	gchar* _tmp6_ = NULL;
+	gchar* _tmp7_;
+	GtkWidget* _tmp8_;
+	GtkAlignment* _tmp9_ = NULL;
+	GtkAlignment* align;
+	GtkVBox* _tmp10_ = NULL;
+	GtkBox* box2;
+	const gchar* _tmp11_ = NULL;
+	GtkCheckButton* _tmp12_ = NULL;
+	GtkWidget* _tmp13_;
+	gboolean _tmp14_;
+	GtkWidget* _tmp15_;
+	GtkCellRenderer* ren = NULL;
+	GtkTreeViewColumn* col = NULL;
+	GtkTreeView* _tmp16_ = NULL;
+	GtkTreeView* treeview;
+	GtkListStore* _tmp17_ = NULL;
+	GtkCellRendererText* _tmp18_ = NULL;
+	const gchar* _tmp19_ = NULL;
+	GtkTreeViewColumn* _tmp20_ = NULL;
+	GtkCellRendererAccel* _tmp21_ = NULL;
+	GtkCellRenderer* _tmp22_;
+	GtkCellRenderer* _tmp23_;
+	GtkCellRenderer* _tmp24_;
+	GtkCellRenderer* _tmp25_;
+	const gchar* _tmp26_ = NULL;
+	GtkTreeViewColumn* _tmp27_ = NULL;
+	GtkTreeIter iter = {0};
+	GtkTreeIter _tmp28_ = {0};
+	const gchar* _tmp29_ = NULL;
+	GtkVBox* _tmp30_ = NULL;
+	GtkBox* section_box;
+	GtkLabel* _tmp31_ = NULL;
+	GtkWidget* _tmp32_;
+	const gchar* _tmp33_ = NULL;
+	gchar* _tmp34_ = NULL;
+	gchar* _tmp35_;
+	GtkWidget* _tmp36_;
+	GtkAlignment* _tmp37_ = NULL;
+	GtkHBox* _tmp38_ = NULL;
+	GtkImage* _tmp39_ = NULL;
+	const gchar* _tmp40_ = NULL;
+	GtkFileChooserButton* _tmp41_ = NULL;
+	const gchar* _tmp42_ = NULL;
+	GtkButton* _tmp43_ = NULL;
+	GtkWidget* button;
+	GtkWidget* _tmp44_;
+	GtkVBox* _tmp45_ = NULL;
+	GtkLabel* _tmp46_ = NULL;
+	GtkWidget* _tmp47_;
+	const gchar* _tmp48_ = NULL;
+	gchar* _tmp49_ = NULL;
+	gchar* _tmp50_;
+	GtkWidget* _tmp51_;
+	GtkAlignment* _tmp52_ = NULL;
+	GtkHScale* _tmp53_ = NULL;
+	GtkWidget* _tmp54_;
+	GtkWidget* _tmp55_;
+	GtkVBox* _tmp56_ = NULL;
+	GtkLabel* _tmp57_ = NULL;
+	GtkWidget* _tmp58_;
+	const gchar* _tmp59_ = NULL;
+	gchar* _tmp60_ = NULL;
+	gchar* _tmp61_;
+	GtkWidget* _tmp62_;
+	GtkAlignment* _tmp63_ = NULL;
+	GtkEntry* _tmp64_ = NULL;
+	GtkWidget* _tmp65_;
+	const gchar* _tmp66_ = NULL;
+	GtkWidget* _tmp67_;
+	GtkHButtonBox* _tmp68_ = NULL;
+	GtkBox* _tmp69_;
+	GtkButton* _tmp70_ = NULL;
+	GtkWidget* _tmp71_;
+	g_return_if_fail (self != NULL);
+	if (self->priv->prefs_window != NULL) {
+		gtk_widget_show_all ((GtkWidget*) self->priv->prefs_window);
+		return;
+	}
+	_tmp0_ = (GtkWindow*) gtk_window_new (GTK_WINDOW_TOPLEVEL);
+	_g_object_unref0 (self->priv->prefs_window);
+	self->priv->prefs_window = g_object_ref_sink (_tmp0_);
+	_tmp1_ = _ ("Preferences");
+	gtk_window_set_title (self->priv->prefs_window, _tmp1_);
+	gtk_window_set_default_icon_name ("terminal");
+	gtk_container_set_border_width ((GtkContainer*) self->priv->prefs_window, (guint) 6);
+	g_signal_connect_object ((GtkWidget*) self->priv->prefs_window, "delete-event", (GCallback) __lambda0__gtk_widget_delete_event, self, 0);
+	_tmp2_ = (GtkVBox*) gtk_vbox_new (FALSE, 6);
+	box = (GtkBox*) g_object_ref_sink (_tmp2_);
+	gtk_container_add ((GtkContainer*) self->priv->prefs_window, (GtkWidget*) box);
+	_tmp3_ = (GtkLabel*) gtk_label_new ("");
+	widget = (GtkWidget*) g_object_ref_sink (_tmp3_);
+	_tmp4_ = widget;
+	_tmp5_ = _ ("Behavior");
+	_tmp6_ = g_strdup_printf ("<b>%s</b>", _tmp5_);
+	_tmp7_ = _tmp6_;
+	gtk_label_set_markup (GTK_IS_LABEL (_tmp4_) ? ((GtkLabel*) _tmp4_) : NULL, _tmp7_);
+	_g_free0 (_tmp7_);
+	_tmp8_ = widget;
+	gtk_misc_set_alignment ((GtkMisc*) (GTK_IS_LABEL (_tmp8_) ? ((GtkLabel*) _tmp8_) : NULL), 0.0f, 0.5f);
+	gtk_box_pack_start (box, widget, FALSE, FALSE, (guint) 0);
+	_tmp9_ = (GtkAlignment*) gtk_alignment_new (0.5f, 0.5f, 1.0f, 0.0f);
+	align = g_object_ref_sink (_tmp9_);
+	gtk_alignment_set_padding (align, (guint) 0, (guint) 0, (guint) 10, (guint) 0);
+	gtk_box_pack_start (box, (GtkWidget*) align, FALSE, FALSE, (guint) 0);
+	_tmp10_ = (GtkVBox*) gtk_vbox_new (FALSE, 6);
+	box2 = (GtkBox*) g_object_ref_sink (_tmp10_);
+	gtk_container_add ((GtkContainer*) align, (GtkWidget*) box2);
+	_tmp11_ = _ ("Hide when focus is lost");
+	_tmp12_ = (GtkCheckButton*) gtk_check_button_new_with_label (_tmp11_);
+	_g_object_unref0 (widget);
+	widget = (GtkWidget*) g_object_ref_sink (_tmp12_);
+	_tmp13_ = widget;
+	_tmp14_ = awn_terminal_applet_get_hide_on_unfocus (self);
+	gtk_toggle_button_set_active ((GtkToggleButton*) (GTK_IS_CHECK_BUTTON (_tmp13_) ? ((GtkCheckButton*) _tmp13_) : NULL), _tmp14_);
+	_tmp15_ = widget;
+	g_signal_connect_object ((GtkToggleButton*) (GTK_IS_CHECK_BUTTON (_tmp15_) ? ((GtkCheckButton*) _tmp15_) : NULL), "toggled", (GCallback) __lambda1__gtk_toggle_button_toggled, self, 0);
+	gtk_box_pack_start (box2, widget, FALSE, FALSE, (guint) 0);
+	_tmp16_ = (GtkTreeView*) gtk_tree_view_new ();
+	treeview = g_object_ref_sink (_tmp16_);
+	gtk_box_pack_start (box2, (GtkWidget*) treeview, FALSE, FALSE, (guint) 0);
+	_tmp17_ = gtk_list_store_new (2, G_TYPE_STRING, G_TYPE_STRING);
+	_g_object_unref0 (self->priv->model);
+	self->priv->model = _tmp17_;
+	gtk_tree_view_set_model (treeview, (GtkTreeModel*) self->priv->model);
+	_tmp18_ = (GtkCellRendererText*) gtk_cell_renderer_text_new ();
+	_g_object_unref0 (ren);
+	ren = (GtkCellRenderer*) g_object_ref_sink (_tmp18_);
+	_tmp19_ = _ ("Action");
+	_tmp20_ = gtk_tree_view_column_new_with_attributes (_tmp19_, ren, "text", 0, NULL);
+	_g_object_unref0 (col);
+	col = g_object_ref_sink (_tmp20_);
+	gtk_tree_view_append_column (treeview, col);
+	_tmp21_ = (GtkCellRendererAccel*) gtk_cell_renderer_accel_new ();
+	_g_object_unref0 (ren);
+	ren = (GtkCellRenderer*) g_object_ref_sink (_tmp21_);
+	_tmp22_ = ren;
+	g_object_set ((GtkCellRendererText*) (GTK_IS_CELL_RENDERER_ACCEL (_tmp22_) ? ((GtkCellRendererAccel*) _tmp22_) : NULL), "editable", TRUE, NULL);
+	_tmp23_ = ren;
+	g_object_set (GTK_IS_CELL_RENDERER_ACCEL (_tmp23_) ? ((GtkCellRendererAccel*) _tmp23_) : NULL, "accel-mode", GTK_CELL_RENDERER_ACCEL_MODE_OTHER, NULL);
+	_tmp24_ = ren;
+	g_signal_connect_object (GTK_IS_CELL_RENDERER_ACCEL (_tmp24_) ? ((GtkCellRendererAccel*) _tmp24_) : NULL, "accel-edited", (GCallback) __lambda2__gtk_cell_renderer_accel_accel_edited, self, 0);
+	_tmp25_ = ren;
+	g_signal_connect_object (GTK_IS_CELL_RENDERER_ACCEL (_tmp25_) ? ((GtkCellRendererAccel*) _tmp25_) : NULL, "accel-cleared", (GCallback) __lambda3__gtk_cell_renderer_accel_accel_cleared, self, 0);
+	_tmp26_ = _ ("Shortcut");
+	_tmp27_ = gtk_tree_view_column_new_with_attributes (_tmp26_, ren, "text", 1, NULL);
+	_g_object_unref0 (col);
+	col = g_object_ref_sink (_tmp27_);
+	gtk_tree_view_append_column (treeview, col);
+	gtk_list_store_append (self->priv->model, &_tmp28_);
+	iter = _tmp28_;
+	_tmp29_ = _ ("Activate");
+	gtk_list_store_set (self->priv->model, &iter, 0, _tmp29_, -1);
+	awn_terminal_applet_set_keybinding (self, self->priv->_keybinding);
+	_tmp30_ = (GtkVBox*) gtk_vbox_new (FALSE, 0);
+	section_box = (GtkBox*) g_object_ref_sink (_tmp30_);
+	gtk_box_pack_start (box, (GtkWidget*) section_box, FALSE, FALSE, (guint) 0);
+	_tmp31_ = (GtkLabel*) gtk_label_new ("");
+	_g_object_unref0 (widget);
+	widget = (GtkWidget*) g_object_ref_sink (_tmp31_);
+	_tmp32_ = widget;
+	_tmp33_ = _ ("Background image");
+	_tmp34_ = g_strdup_printf ("<b>%s</b>", _tmp33_);
+	_tmp35_ = _tmp34_;
+	gtk_label_set_markup (GTK_IS_LABEL (_tmp32_) ? ((GtkLabel*) _tmp32_) : NULL, _tmp35_);
+	_g_free0 (_tmp35_);
+	_tmp36_ = widget;
+	gtk_misc_set_alignment ((GtkMisc*) (GTK_IS_LABEL (_tmp36_) ? ((GtkLabel*) _tmp36_) : NULL), 0.0f, 0.5f);
+	gtk_box_pack_start (section_box, widget, FALSE, FALSE, (guint) 0);
+	_tmp37_ = (GtkAlignment*) gtk_alignment_new (0.5f, 0.5f, 1.0f, 0.0f);
+	_g_object_unref0 (align);
+	align = g_object_ref_sink (_tmp37_);
+	gtk_alignment_set_padding (align, (guint) 0, (guint) 0, (guint) 10, (guint) 0);
+	gtk_box_pack_start (section_box, (GtkWidget*) align, FALSE, FALSE, (guint) 0);
+	_tmp38_ = (GtkHBox*) gtk_hbox_new (FALSE, 3);
+	_g_object_unref0 (box2);
+	box2 = (GtkBox*) g_object_ref_sink (_tmp38_);
+	gtk_container_add ((GtkContainer*) align, (GtkWidget*) box2);
+	_tmp39_ = (GtkImage*) gtk_image_new ();
+	_g_object_unref0 (self->priv->preview_image);
+	self->priv->preview_image = g_object_ref_sink (_tmp39_);
+	_tmp40_ = _ ("Select a file");
+	_tmp41_ = (GtkFileChooserButton*) gtk_file_chooser_button_new (_tmp40_, GTK_FILE_CHOOSER_ACTION_OPEN);
+	_g_object_unref0 (self->priv->chooser);
+	self->priv->chooser = g_object_ref_sink (_tmp41_);
+	_tmp42_ = awn_terminal_applet_get_background_image (self);
+	gtk_file_chooser_set_filename ((GtkFileChooser*) self->priv->chooser, _tmp42_);
+	gtk_file_chooser_set_preview_widget ((GtkFileChooser*) self->priv->chooser, (GtkWidget*) self->priv->preview_image);
+	gtk_widget_set_size_request ((GtkWidget*) self->priv->chooser, 200, -1);
+	g_signal_connect_object (self->priv->chooser, "file-set", (GCallback) __lambda4__gtk_file_chooser_button_file_set, self, 0);
+	g_signal_connect_object ((GtkFileChooser*) self->priv->chooser, "update-preview", (GCallback) __lambda5__gtk_file_chooser_update_preview, self, 0);
+	gtk_box_pack_start (box2, (GtkWidget*) self->priv->chooser, TRUE, TRUE, (guint) 0);
+	_tmp43_ = (GtkButton*) gtk_button_new_from_stock (GTK_STOCK_CLEAR);
+	button = (GtkWidget*) g_object_ref_sink (_tmp43_);
+	_tmp44_ = button;
+	g_signal_connect_object (GTK_IS_BUTTON (_tmp44_) ? ((GtkButton*) _tmp44_) : NULL, "clicked", (GCallback) __lambda6__gtk_button_clicked, self, 0);
+	gtk_box_pack_start (box2, button, FALSE, FALSE, (guint) 0);
+	_tmp45_ = (GtkVBox*) gtk_vbox_new (FALSE, 0);
+	_g_object_unref0 (section_box);
+	section_box = (GtkBox*) g_object_ref_sink (_tmp45_);
+	gtk_box_pack_start (box, (GtkWidget*) section_box, FALSE, FALSE, (guint) 0);
+	_tmp46_ = (GtkLabel*) gtk_label_new ("");
+	_g_object_unref0 (widget);
+	widget = (GtkWidget*) g_object_ref_sink (_tmp46_);
+	_tmp47_ = widget;
+	_tmp48_ = _ ("Terminal opacity");
+	_tmp49_ = g_strdup_printf ("<b>%s</b>", _tmp48_);
+	_tmp50_ = _tmp49_;
+	gtk_label_set_markup (GTK_IS_LABEL (_tmp47_) ? ((GtkLabel*) _tmp47_) : NULL, _tmp50_);
+	_g_free0 (_tmp50_);
+	_tmp51_ = widget;
+	gtk_misc_set_alignment ((GtkMisc*) (GTK_IS_LABEL (_tmp51_) ? ((GtkLabel*) _tmp51_) : NULL), 0.0f, 0.5f);
+	gtk_box_pack_start (section_box, widget, FALSE, FALSE, (guint) 3);
+	_tmp52_ = (GtkAlignment*) gtk_alignment_new (0.5f, 0.5f, 1.0f, 0.0f);
+	_g_object_unref0 (align);
+	align = g_object_ref_sink (_tmp52_);
+	gtk_alignment_set_padding (align, (guint) 0, (guint) 0, (guint) 10, (guint) 0);
+	gtk_box_pack_start (section_box, (GtkWidget*) align, FALSE, FALSE, (guint) 0);
+	_tmp53_ = (GtkHScale*) gtk_hscale_new_with_range ((gdouble) 0.1f, (gdouble) 1.0f, (gdouble) 0.1f);
+	_g_object_unref0 (widget);
+	widget = (GtkWidget*) g_object_ref_sink (_tmp53_);
+	_tmp54_ = widget;
+	gtk_range_set_value (GTK_IS_RANGE (_tmp54_) ? ((GtkRange*) _tmp54_) : NULL, (gdouble) self->priv->_bg_opacity);
+	_tmp55_ = widget;
+	g_signal_connect_object ((GtkRange*) (GTK_IS_SCALE (_tmp55_) ? ((GtkScale*) _tmp55_) : NULL), "value-changed", (GCallback) __lambda7__gtk_range_value_changed, self, 0);
+	gtk_container_add ((GtkContainer*) align, widget);
+	_tmp56_ = (GtkVBox*) gtk_vbox_new (FALSE, 0);
+	_g_object_unref0 (section_box);
+	section_box = (GtkBox*) g_object_ref_sink (_tmp56_);
+	gtk_box_pack_start (box, (GtkWidget*) section_box, FALSE, FALSE, (guint) 0);
+	_tmp57_ = (GtkLabel*) gtk_label_new ("");
+	_g_object_unref0 (widget);
+	widget = (GtkWidget*) g_object_ref_sink (_tmp57_);
+	_tmp58_ = widget;
+	_tmp59_ = _ ("External Terminal");
+	_tmp60_ = g_strdup_printf ("<b>%s</b>", _tmp59_);
+	_tmp61_ = _tmp60_;
+	gtk_label_set_markup (GTK_IS_LABEL (_tmp58_) ? ((GtkLabel*) _tmp58_) : NULL, _tmp61_);
+	_g_free0 (_tmp61_);
+	_tmp62_ = widget;
+	gtk_misc_set_alignment ((GtkMisc*) (GTK_IS_LABEL (_tmp62_) ? ((GtkLabel*) _tmp62_) : NULL), 0.0f, 0.5f);
+	gtk_box_pack_start (section_box, widget, FALSE, FALSE, (guint) 3);
+	_tmp63_ = (GtkAlignment*) gtk_alignment_new (0.5f, 0.5f, 1.0f, 0.0f);
+	_g_object_unref0 (align);
+	align = g_object_ref_sink (_tmp63_);
+	gtk_alignment_set_padding (align, (guint) 0, (guint) 0, (guint) 10, (guint) 0);
+	gtk_box_pack_start (section_box, (GtkWidget*) align, FALSE, FALSE, (guint) 0);
+	_tmp64_ = (GtkEntry*) gtk_entry_new ();
+	_g_object_unref0 (widget);
+	widget = (GtkWidget*) g_object_ref_sink (_tmp64_);
+	_tmp65_ = widget;
+	_tmp66_ = awn_terminal_applet_get_terminal_command (self);
+	gtk_entry_set_text (GTK_IS_ENTRY (_tmp65_) ? ((GtkEntry*) _tmp65_) : NULL, _tmp66_);
+	_tmp67_ = widget;
+	g_signal_connect_object ((GtkWidget*) (GTK_IS_ENTRY (_tmp67_) ? ((GtkEntry*) _tmp67_) : NULL), "focus-out-event", (GCallback) __lambda8__gtk_widget_focus_out_event, self, 0);
+	gtk_container_add ((GtkContainer*) align, widget);
+	_tmp68_ = (GtkHButtonBox*) gtk_hbutton_box_new ();
+	_g_object_unref0 (box2);
+	box2 = (GtkBox*) g_object_ref_sink (_tmp68_);
+	_tmp69_ = box2;
+	gtk_button_box_set_layout (GTK_IS_BUTTON_BOX (_tmp69_) ? ((GtkButtonBox*) _tmp69_) : NULL, GTK_BUTTONBOX_END);
+	gtk_box_pack_end (box, (GtkWidget*) box2, FALSE, FALSE, (guint) 0);
+	_tmp70_ = (GtkButton*) gtk_button_new_from_stock (GTK_STOCK_CLOSE);
+	_g_object_unref0 (widget);
+	widget = (GtkWidget*) g_object_ref_sink (_tmp70_);
+	gtk_box_pack_start (box2, widget, FALSE, FALSE, (guint) 0);
+	_tmp71_ = widget;
+	g_signal_connect_object (GTK_IS_BUTTON (_tmp71_) ? ((GtkButton*) _tmp71_) : NULL, "clicked", (GCallback) __lambda9__gtk_button_clicked, self, 0);
+	gtk_widget_show_all ((GtkWidget*) self->priv->prefs_window);
+	_g_object_unref0 (button);
+	_g_object_unref0 (section_box);
+	_g_object_unref0 (treeview);
+	_g_object_unref0 (col);
+	_g_object_unref0 (ren);
+	_g_object_unref0 (box2);
+	_g_object_unref0 (align);
+	_g_object_unref0 (widget);
+	_g_object_unref0 (box);
+}
+
+
+gfloat awn_terminal_applet_get_bg_opacity (AwnTerminalApplet* self) {
+	gfloat result;
+	g_return_val_if_fail (self != NULL, 0.0F);
+	result = self->priv->_bg_opacity;
+	return result;
+}
+
+
+void awn_terminal_applet_set_bg_opacity (AwnTerminalApplet* self, gfloat value) {
+	g_return_if_fail (self != NULL);
+	self->priv->_bg_opacity = value;
+	gtk_window_set_opacity ((GtkWindow*) self->priv->dialog, (gdouble) value);
+	g_object_notify ((GObject *) self, "bg-opacity");
+}
+
+
+gboolean awn_terminal_applet_get_hide_on_unfocus (AwnTerminalApplet* self) {
+	gboolean result;
+	gboolean _tmp0_;
+	g_return_val_if_fail (self != NULL, FALSE);
+	g_object_get (self->priv->dialog, "hide-on-unfocus", &_tmp0_, NULL);
+	result = _tmp0_;
+	return result;
+}
+
+
+void awn_terminal_applet_set_hide_on_unfocus (AwnTerminalApplet* self, gboolean value) {
+	g_return_if_fail (self != NULL);
+	g_object_set (self->priv->dialog, "hide-on-unfocus", value, NULL);
+	g_object_notify ((GObject *) self, "hide-on-unfocus");
+}
+
+
+const gchar* awn_terminal_applet_get_background_image (AwnTerminalApplet* self) {
+	const gchar* result;
+	g_return_val_if_fail (self != NULL, NULL);
+	result = self->priv->_background_image;
+	return result;
+}
+
+
+void awn_terminal_applet_set_background_image (AwnTerminalApplet* self, const gchar* value) {
+	gchar* _tmp0_;
+	g_return_if_fail (self != NULL);
+	_tmp0_ = g_strdup (value);
+	_g_free0 (self->priv->_background_image);
+	self->priv->_background_image = _tmp0_;
+	{
+		gint i;
+		i = 0;
+		{
+			gboolean _tmp1_;
+			_tmp1_ = TRUE;
+			while (TRUE) {
+				gint _tmp2_;
+				GtkWidget* _tmp3_ = NULL;
+				GtkWidget* _tmp4_;
+				VteTerminal* _tmp5_;
+				VteTerminal* term;
+				if (!_tmp1_) {
+					i++;
+				}
+				_tmp1_ = FALSE;
+				_tmp2_ = gtk_notebook_get_n_pages (self->priv->notebook);
+				if (!(i < _tmp2_)) {
+					break;
+				}
+				_tmp3_ = gtk_notebook_get_nth_page (self->priv->notebook, i);
+				_tmp4_ = _tmp3_;
+				_tmp5_ = _g_object_ref0 (VTE_IS_TERMINAL (_tmp4_) ? ((VteTerminal*) _tmp4_) : NULL);
+				term = _tmp5_;
+				vte_terminal_set_background_image_file (term, value);
+				_g_object_unref0 (term);
+			}
+		}
+	}
+	g_object_notify ((GObject *) self, "background-image");
+}
+
+
+const gchar* awn_terminal_applet_get_keybinding (AwnTerminalApplet* self) {
+	const gchar* result;
+	g_return_val_if_fail (self != NULL, NULL);
+	result = self->priv->_keybinding;
+	return result;
+}
+
+
+static void _awn_terminal_applet_global_keypress_awn_keybinder_bindkey_handler (const gchar* keystring, gpointer self) {
+	awn_terminal_applet_global_keypress (self, keystring);
+}
+
+
+void awn_terminal_applet_set_keybinding (AwnTerminalApplet* self, const gchar* value) {
+	gboolean _tmp0_ = FALSE;
+	gchar* _tmp2_;
+	gboolean _tmp3_ = FALSE;
+	g_return_if_fail (self != NULL);
+	g_debug ("awn-terminal.vala:80: keybinding: %s", value);
+	if (self->priv->_keybinding != NULL) {
+		gsize _tmp1_;
+		_tmp1_ = strlen (self->priv->_keybinding);
+		_tmp0_ = _tmp1_ > 0;
+	} else {
+		_tmp0_ = FALSE;
+	}
+	if (_tmp0_) {
+		awn_keybinder_unbind (self->priv->_keybinding, _awn_terminal_applet_global_keypress_awn_keybinder_bindkey_handler, self);
+	}
+	_tmp2_ = g_strdup (value);
+	_g_free0 (self->priv->_keybinding);
+	self->priv->_keybinding = _tmp2_;
+	if (self->priv->_keybinding != NULL) {
+		gsize _tmp4_;
+		_tmp4_ = strlen (self->priv->_keybinding);
+		_tmp3_ = _tmp4_ > 0;
+	} else {
+		_tmp3_ = FALSE;
+	}
+	if (_tmp3_) {
+		awn_keybinder_bind (self->priv->_keybinding, _awn_terminal_applet_global_keypress_awn_keybinder_bindkey_handler, self);
+	}
+	if (self->priv->model != NULL) {
+		GtkTreeIter iter = {0};
+		GtkTreeIter _tmp5_ = {0};
+		gboolean _tmp6_;
+		_tmp6_ = gtk_tree_model_get_iter_first ((GtkTreeModel*) self->priv->model, &_tmp5_);
+		iter = _tmp5_;
+		if (_tmp6_) {
+			const gchar* _tmp7_ = NULL;
+			gboolean _tmp8_ = FALSE;
+			if (self->priv->_keybinding != NULL) {
+				gsize _tmp9_;
+				_tmp9_ = strlen (self->priv->_keybinding);
+				_tmp8_ = _tmp9_ > 0;
+			} else {
+				_tmp8_ = FALSE;
+			}
+			if (_tmp8_) {
+				_tmp7_ = self->priv->_keybinding;
+			} else {
+				const gchar* _tmp10_ = NULL;
+				_tmp10_ = _ ("Disabled");
+				_tmp7_ = _tmp10_;
+			}
+			gtk_list_store_set (self->priv->model, &iter, 1, _tmp7_, -1);
+		}
+	}
+	g_object_notify ((GObject *) self, "keybinding");
+}
+
+
+const gchar* awn_terminal_applet_get_terminal_command (AwnTerminalApplet* self) {
+	const gchar* result;
+	g_return_val_if_fail (self != NULL, NULL);
+	result = self->priv->_terminal_command;
+	return result;
+}
+
+
+void awn_terminal_applet_set_terminal_command (AwnTerminalApplet* self, const gchar* value) {
+	gchar* _tmp0_;
+	g_return_if_fail (self != NULL);
+	_tmp0_ = g_strdup (value);
+	_g_free0 (self->priv->_terminal_command);
+	self->priv->_terminal_command = _tmp0_;
+	g_object_notify ((GObject *) self, "terminal-command");
+}
+
+
+static GObject * awn_terminal_applet_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
+	GObject * obj;
+	GObjectClass * parent_class;
+	AwnTerminalApplet * self;
+	GTimeVal _tmp0_ = {0};
+	GTimeVal _tmp1_ = {0};
+	parent_class = G_OBJECT_CLASS (awn_terminal_applet_parent_class);
+	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
+	self = AWN_TERMINAL_APPLET (obj);
+	awn_keybinder_init ();
+	g_get_current_time (&_tmp0_);
+	_tmp1_ = _tmp0_;
+	self->priv->last_inactive_time = _tmp1_;
+	return obj;
+}
+
+
+static void awn_terminal_applet_class_init (AwnTerminalAppletClass * klass) {
+	awn_terminal_applet_parent_class = g_type_class_peek_parent (klass);
+	g_type_class_add_private (klass, sizeof (AwnTerminalAppletPrivate));
+	G_OBJECT_CLASS (klass)->constructed = awn_terminal_applet_real_constructed;
+	G_OBJECT_CLASS (klass)->get_property = _vala_awn_terminal_applet_get_property;
+	G_OBJECT_CLASS (klass)->set_property = _vala_awn_terminal_applet_set_property;
+	G_OBJECT_CLASS (klass)->constructor = awn_terminal_applet_constructor;
+	G_OBJECT_CLASS (klass)->finalize = awn_terminal_applet_finalize;
+	g_object_class_install_property (G_OBJECT_CLASS (klass), AWN_TERMINAL_APPLET_BG_OPACITY, g_param_spec_float ("bg-opacity", "bg-opacity", "bg-opacity", -G_MAXFLOAT, G_MAXFLOAT, 0.0F, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+	g_object_class_install_property (G_OBJECT_CLASS (klass), AWN_TERMINAL_APPLET_HIDE_ON_UNFOCUS, g_param_spec_boolean ("hide-on-unfocus", "hide-on-unfocus", "hide-on-unfocus", FALSE, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+	g_object_class_install_property (G_OBJECT_CLASS (klass), AWN_TERMINAL_APPLET_BACKGROUND_IMAGE, g_param_spec_string ("background-image", "background-image", "background-image", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+	g_object_class_install_property (G_OBJECT_CLASS (klass), AWN_TERMINAL_APPLET_KEYBINDING, g_param_spec_string ("keybinding", "keybinding", "keybinding", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+	g_object_class_install_property (G_OBJECT_CLASS (klass), AWN_TERMINAL_APPLET_TERMINAL_COMMAND, g_param_spec_string ("terminal-command", "terminal-command", "terminal-command", NULL, G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB | G_PARAM_READABLE | G_PARAM_WRITABLE));
+}
+
+
+static void awn_terminal_applet_terminal_dbus_interface_init (TerminalDBusIface * iface) {
+	awn_terminal_applet_terminal_dbus_parent_iface = g_type_interface_peek_parent (iface);
+	iface->toggle = (void (*)(TerminalDBus* ,guint32 ,GError**)) awn_terminal_applet_real_toggle;
+}
+
+
+static void awn_terminal_applet_instance_init (AwnTerminalApplet * self) {
+	self->priv = AWN_TERMINAL_APPLET_GET_PRIVATE (self);
+	self->priv->model = NULL;
+	self->priv->_background_image = NULL;
+	self->priv->_keybinding = NULL;
+	self->priv->_terminal_command = NULL;
+}
+
+
+static void awn_terminal_applet_finalize (GObject* obj) {
+	AwnTerminalApplet * self;
+	self = AWN_TERMINAL_APPLET (obj);
+	_g_object_unref0 (self->priv->config);
+	_g_object_unref0 (self->priv->menu);
+	_g_object_unref0 (self->priv->dialog);
+	_g_object_unref0 (self->priv->notebook);
+	_g_object_unref0 (self->priv->chooser);
+	_g_object_unref0 (self->priv->preview_image);
+	_g_object_unref0 (self->priv->prefs_window);
+	_g_object_unref0 (self->priv->model);
+	_g_free0 (self->priv->_background_image);
+	_g_free0 (self->priv->_keybinding);
+	_g_free0 (self->priv->_terminal_command);
+	G_OBJECT_CLASS (awn_terminal_applet_parent_class)->finalize (obj);
+}
+
+
+void _awn_terminal_applet_dbus_unregister (DBusConnection* connection, void* _user_data_) {
+}
+
+
+static DBusHandlerResult _dbus_awn_terminal_applet_introspect (AwnTerminalApplet* self, DBusConnection* connection, DBusMessage* message) {
+	DBusMessage* reply;
+	DBusMessageIter iter;
+	GString* xml_data;
+	char** children;
+	int i;
+	reply = dbus_message_new_method_return (message);
+	dbus_message_iter_init_append (reply, &iter);
+	xml_data = g_string_new ("<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\" \"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\">\n");
+	g_string_append (xml_data, "<node>\n<interface name=\"org.freedesktop.DBus.Introspectable\">\n  <method name=\"Introspect\">\n    <arg name=\"data\" direction=\"out\" type=\"s\"/>\n  </method>\n</interface>\n<interface name=\"org.freedesktop.DBus.Properties\">\n  <method name=\"Get\">\n    <arg name=\"interface\" direction=\"in\" type=\"s\"/>\n    <arg name=\"propname\" direction=\"in\" type=\"s\"/>\n    <arg name=\"value\" direction=\"out\" type=\"v\"/>\n  </method>\n  <method name=\"Set\">\n    <arg name=\"interface\" direction=\"in\" type=\"s\"/>\n    <arg name=\"propname\" direction=\"in\" type=\"s\"/>\n    <arg name=\"value\" direction=\"in\" type=\"v\"/>\n  </method>\n  <method name=\"GetAll\">\n    <arg name=\"interface\" direction=\"in\" type=\"s\"/>\n    <arg name=\"props\" direction=\"out\" type=\"a{sv}\"/>\n  </method>\n</interface>\n<interface name=\"org.awnproject.Applet.Terminal\">\n  <method name=\"Toggle\">\n    <arg name=\"time_\" type=\"u\" direction=\"in\"/>\n  </method>\n</interface>\n");
+	dbus_connection_list_registered (connection, g_object_get_data ((GObject *) self, "dbus_object_path"), &children);
+	for (i = 0; children[i]; i++) {
+		g_string_append_printf (xml_data, "<node name=\"%s\"/>\n", children[i]);
+	}
+	dbus_free_string_array (children);
+	g_string_append (xml_data, "</node>\n");
+	dbus_message_iter_append_basic (&iter, DBUS_TYPE_STRING, &xml_data->str);
+	g_string_free (xml_data, TRUE);
+	if (reply) {
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+DBusHandlerResult awn_terminal_applet_dbus_message (DBusConnection* connection, DBusMessage* message, void* object) {
+	DBusHandlerResult result;
+	result = DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	if (dbus_message_is_method_call (message, "org.freedesktop.DBus.Introspectable", "Introspect")) {
+		result = _dbus_awn_terminal_applet_introspect (object, connection, message);
+	}
+	if (result == DBUS_HANDLER_RESULT_HANDLED) {
+		return result;
+	} else if (terminal_dbus_dbus_message (connection, message, object) == DBUS_HANDLER_RESULT_HANDLED) {
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+void awn_terminal_applet_dbus_register_object (DBusConnection* connection, const char* path, void* object) {
+	if (!g_object_get_data (object, "dbus_object_path")) {
+		g_object_set_data (object, "dbus_object_path", g_strdup (path));
+		dbus_connection_register_object_path (connection, path, &_awn_terminal_applet_dbus_path_vtable, object);
+		g_object_weak_ref (object, _vala_dbus_unregister_object, connection);
+	}
+	terminal_dbus_dbus_register_object (connection, path, object);
+}
+
+
+GType awn_terminal_applet_get_type (void) {
+	static volatile gsize awn_terminal_applet_type_id__volatile = 0;
+	if (g_once_init_enter (&awn_terminal_applet_type_id__volatile)) {
+		static const GTypeInfo g_define_type_info = { sizeof (AwnTerminalAppletClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) awn_terminal_applet_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (AwnTerminalApplet), 0, (GInstanceInitFunc) awn_terminal_applet_instance_init, NULL };
+		static const GInterfaceInfo terminal_dbus_info = { (GInterfaceInitFunc) awn_terminal_applet_terminal_dbus_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
+		GType awn_terminal_applet_type_id;
+		awn_terminal_applet_type_id = g_type_register_static (AWN_TYPE_APPLET_SIMPLE, "AwnTerminalApplet", &g_define_type_info, 0);
+		g_type_add_interface_static (awn_terminal_applet_type_id, TYPE_TERMINAL_DBUS, &terminal_dbus_info);
+		g_type_set_qdata (awn_terminal_applet_type_id, g_quark_from_static_string ("DBusObjectVTable"), (void*) (&_awn_terminal_applet_dbus_vtable));
+		g_once_init_leave (&awn_terminal_applet_type_id__volatile, awn_terminal_applet_type_id);
+	}
+	return awn_terminal_applet_type_id__volatile;
+}
+
+
+static void _vala_awn_terminal_applet_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec) {
+	AwnTerminalApplet * self;
+	self = AWN_TERMINAL_APPLET (object);
+	switch (property_id) {
+		case AWN_TERMINAL_APPLET_BG_OPACITY:
+		g_value_set_float (value, awn_terminal_applet_get_bg_opacity (self));
+		break;
+		case AWN_TERMINAL_APPLET_HIDE_ON_UNFOCUS:
+		g_value_set_boolean (value, awn_terminal_applet_get_hide_on_unfocus (self));
+		break;
+		case AWN_TERMINAL_APPLET_BACKGROUND_IMAGE:
+		g_value_set_string (value, awn_terminal_applet_get_background_image (self));
+		break;
+		case AWN_TERMINAL_APPLET_KEYBINDING:
+		g_value_set_string (value, awn_terminal_applet_get_keybinding (self));
+		break;
+		case AWN_TERMINAL_APPLET_TERMINAL_COMMAND:
+		g_value_set_string (value, awn_terminal_applet_get_terminal_command (self));
+		break;
+		default:
+		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+		break;
+	}
+}
+
+
+static void _vala_awn_terminal_applet_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec) {
+	AwnTerminalApplet * self;
+	self = AWN_TERMINAL_APPLET (object);
+	switch (property_id) {
+		case AWN_TERMINAL_APPLET_BG_OPACITY:
+		awn_terminal_applet_set_bg_opacity (self, g_value_get_float (value));
+		break;
+		case AWN_TERMINAL_APPLET_HIDE_ON_UNFOCUS:
+		awn_terminal_applet_set_hide_on_unfocus (self, g_value_get_boolean (value));
+		break;
+		case AWN_TERMINAL_APPLET_BACKGROUND_IMAGE:
+		awn_terminal_applet_set_background_image (self, g_value_get_string (value));
+		break;
+		case AWN_TERMINAL_APPLET_KEYBINDING:
+		awn_terminal_applet_set_keybinding (self, g_value_get_string (value));
+		break;
+		case AWN_TERMINAL_APPLET_TERMINAL_COMMAND:
+		awn_terminal_applet_set_terminal_command (self, g_value_get_string (value));
+		break;
+		default:
+		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+		break;
+	}
+}
+
+
+static guint _dynamic_request_name0 (DBusGProxy* self, const gchar* param1, guint param2, GError** error) {
+	guint result;
+	dbus_g_proxy_call (self, "RequestName", error, G_TYPE_STRING, param1, G_TYPE_UINT, param2, G_TYPE_INVALID, G_TYPE_UINT, &result, G_TYPE_INVALID);
+	if (*error) {
+		return 0U;
+	}
+	return result;
+}
+
+
+AwnApplet* awn_applet_factory_initp (const gchar* canonical_name, const gchar* uid, gint panel_id) {
+	AwnApplet* result = NULL;
+	DBusGConnection* _tmp0_ = NULL;
+	DBusGConnection* conn;
+	DBusGProxy* _tmp1_ = NULL;
+	DBusGProxy* bus;
+	guint _tmp2_;
+	guint _result_;
+	AwnTerminalApplet* _tmp3_ = NULL;
+	AwnTerminalApplet* applet;
+	GError * _inner_error_ = NULL;
+	g_return_val_if_fail (canonical_name != NULL, NULL);
+	g_return_val_if_fail (uid != NULL, NULL);
+	bindtextdomain (GETTEXT_PACKAGE, LOCALEDIR);
+	textdomain (GETTEXT_PACKAGE);
+	_tmp0_ = dbus_g_bus_get (DBUS_BUS_SESSION, &_inner_error_);
+	conn = _tmp0_;
+	if (_inner_error_ != NULL) {
+		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return NULL;
+	}
+	_tmp1_ = dbus_g_proxy_new_for_name (conn, "org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus");
+	bus = _tmp1_;
+	_tmp2_ = _dynamic_request_name0 (bus, "org.awnproject.Applet.Terminal", (guint) 0, &_inner_error_);
+	_result_ = _tmp2_;
+	if (_inner_error_ != NULL) {
+		_g_object_unref0 (bus);
+		_dbus_g_connection_unref0 (conn);
+		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+		g_clear_error (&_inner_error_);
+		return NULL;
+	}
+	if (_result_ != DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER) {
+		g_warning ("awn-terminal.vala:622: Coudln't get ownership of org.awnproject.Applet" \
+".Terminal!");
+	}
+	_tmp3_ = awn_terminal_applet_new (canonical_name, uid, panel_id);
+	applet = g_object_ref_sink (_tmp3_);
+	_vala_dbus_register_object (dbus_g_connection_get_connection (conn), "/org/awnproject/Applet/Terminal", (GObject*) applet);
+	result = (AwnApplet*) applet;
+	_g_object_unref0 (bus);
+	_dbus_g_connection_unref0 (conn);
+	return result;
+}
+
+
+
--- a/applets/maintained/related/Makefile.am
+++ b/applets/maintained/related/Makefile.am
@@ -10,7 +10,6 @@
 	$(NULL)
 
 VALA_FILES = \
-	related-applet.vala	\
 	$(NULL)
 
 AM_VALAFLAGS = \
@@ -28,7 +27,7 @@
 	$(ZEITGEIST_LIBS)	\
 	$(NULL)
 
-include $(top_srcdir)/Makefile.vala-applet
+include $(top_srcdir)/Makefile.c-applet
 #include $(top_srcdir)/Makefile.schemas
 
 applet_LTLIBRARIES = related.la
@@ -36,6 +35,7 @@
 	$(VALA_C_FILES) \
 	awn-desktop-lookup.c \
 	awn-desktop-lookup-cached.c \
+	related-applet.c \
 	xutils.c \
 	util.c \
 	$(NULL)
--- /dev/null
+++ b/applets/maintained/related/related-applet.c
@@ -0,0 +1,2986 @@
+/* related-applet.c generated by valac 0.12.1, the Vala compiler
+ * generated from related-applet.vala, do not modify */
+
+/*
+ * Copyright (C) 2010 Michal Hruby <michal.mhr@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA.
+ *
+ * Author : Michal Hruby <michal.mhr@gmail.com>
+ */
+
+#include <glib.h>
+#include <glib-object.h>
+#include <dbus/dbus-glib.h>
+#include <stdlib.h>
+#include <string.h>
+#include <dbus/dbus-glib-lowlevel.h>
+#include <dbus/dbus.h>
+#include <libawn/libawn.h>
+#include <libwnck/libwnck.h>
+#include <awn-desktop-lookup-cached.h>
+#include <zeitgeist.h>
+#include <gtk/gtk.h>
+#include <gio/gio.h>
+#include <pango/pango.h>
+#include <gdk/gdk.h>
+#include <gio/gdesktopappinfo.h>
+
+
+#define TYPE_WNCK_SYNC_MATCHER (wnck_sync_matcher_get_type ())
+#define WNCK_SYNC_MATCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WNCK_SYNC_MATCHER, WnckSyncMatcher))
+#define IS_WNCK_SYNC_MATCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WNCK_SYNC_MATCHER))
+#define WNCK_SYNC_MATCHER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_WNCK_SYNC_MATCHER, WnckSyncMatcherIface))
+
+typedef struct _WnckSyncMatcher WnckSyncMatcher;
+typedef struct _WnckSyncMatcherIface WnckSyncMatcherIface;
+typedef struct _DBusObjectVTable _DBusObjectVTable;
+#define _g_free0(var) (var = (g_free (var), NULL))
+typedef struct _WnckSyncMatcherDBusProxy WnckSyncMatcherDBusProxy;
+typedef DBusGProxyClass WnckSyncMatcherDBusProxyClass;
+
+#define TYPE_DESKTOP_FILE_INFO (desktop_file_info_get_type ())
+typedef struct _DesktopFileInfo DesktopFileInfo;
+
+#define TYPE_RELATED_APPLET (related_applet_get_type ())
+#define RELATED_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RELATED_APPLET, RelatedApplet))
+#define RELATED_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_RELATED_APPLET, RelatedAppletClass))
+#define IS_RELATED_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RELATED_APPLET))
+#define IS_RELATED_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_RELATED_APPLET))
+#define RELATED_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RELATED_APPLET, RelatedAppletClass))
+
+typedef struct _RelatedApplet RelatedApplet;
+typedef struct _RelatedAppletClass RelatedAppletClass;
+typedef struct _RelatedAppletPrivate RelatedAppletPrivate;
+#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
+#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
+#define _dbus_g_connection_unref0(var) ((var == NULL) ? NULL : (var = (dbus_g_connection_unref (var), NULL)))
+#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
+#define _g_key_file_free0(var) ((var == NULL) ? NULL : (var = (g_key_file_free (var), NULL)))
+#define __g_list_free__g_object_unref0_0(var) ((var == NULL) ? NULL : (var = (_g_list_free__g_object_unref0_ (var), NULL)))
+#define _g_ptr_array_free0(var) ((var == NULL) ? NULL : (var = (g_ptr_array_free (var, TRUE), NULL)))
+#define _g_array_free0(var) ((var == NULL) ? NULL : (var = (g_array_free (var, TRUE), NULL)))
+typedef struct _RelatedAppletUpdateStarData RelatedAppletUpdateStarData;
+typedef struct _RelatedAppletGetRecentByMimetypeData RelatedAppletGetRecentByMimetypeData;
+typedef struct _RelatedAppletGetEventsForActorData RelatedAppletGetEventsForActorData;
+typedef struct _RelatedAppletBuildDialogData RelatedAppletBuildDialogData;
+typedef struct _Block1Data Block1Data;
+#define __g_list_free__g_free0_0(var) ((var == NULL) ? NULL : (var = (_g_list_free__g_free0_ (var), NULL)))
+
+struct _WnckSyncMatcherIface {
+	GTypeInterface parent_iface;
+	gchar* (*desktop_file_for_xid) (WnckSyncMatcher* self, guint32 xid, GError** error);
+	gboolean (*window_match_is_ready) (WnckSyncMatcher* self, guint32 xid, GError** error);
+	void (*register_desktop_file_for_pid) (WnckSyncMatcher* self, const gchar* filename, gint32 pid, GError** error);
+	guint32* (*xids_for_desktop_file) (WnckSyncMatcher* self, const gchar* filename, int* result_length1, GError** error);
+};
+
+struct _DBusObjectVTable {
+	void (*register_object) (DBusConnection*, const char*, void*);
+};
+
+struct _WnckSyncMatcherDBusProxy {
+	DBusGProxy parent_instance;
+	gboolean disposed;
+};
+
+struct _DesktopFileInfo {
+	gchar* name;
+	gchar** mimetypes;
+	gint mimetypes_length1;
+	gint _mimetypes_size_;
+};
+
+struct _RelatedApplet {
+	AwnAppletSimple parent_instance;
+	RelatedAppletPrivate * priv;
+};
+
+struct _RelatedAppletClass {
+	AwnAppletSimpleClass parent_class;
+};
+
+struct _RelatedAppletPrivate {
+	WnckScreen* wnck_screen;
+	AwnDesktopLookupCached* lookup;
+	ZeitgeistLog* zg_log;
+	AwnOverlay* throbber;
+	AwnOverlay* star_overlay;
+	GHashTable* desktop_file_info;
+	AwnDialog* dialog;
+	GtkVBox* vbox;
+	gchar* current_desktop_file_path;
+};
+
+struct _RelatedAppletUpdateStarData {
+	int _state_;
+	GObject* _source_object_;
+	GAsyncResult* _res_;
+	GSimpleAsyncResult* _async_result;
+	RelatedApplet* self;
+	gchar* desktop_file;
+	GPtrArray* _tmp0_;
+	GPtrArray* ptr_array;
+	gchar* _tmp1_;
+	gchar* actor;
+	ZeitgeistEvent* _tmp2_;
+	ZeitgeistEvent* event;
+	GList* helper_event_list;
+	gchar* _tmp3_;
+	gchar* _tmp4_;
+	DesktopFileInfo* df_data;
+	gconstpointer _tmp5_;
+	gboolean _tmp6_;
+	gchar** mimetype_collection;
+	int mimetype_collection_length1;
+	int mimetype_it;
+	const gchar* mimetype;
+	ZeitgeistEvent* _tmp7_;
+	ZeitgeistEvent* mime_event;
+	ZeitgeistSubject* _tmp8_;
+	ZeitgeistSubject* subject;
+	ZeitgeistEvent* _tmp9_;
+	ZeitgeistTimeRange* _tmp10_;
+	ZeitgeistTimeRange* _tmp11_;
+	GPtrArray* _tmp12_;
+	GArray* _tmp13_;
+	GArray* _tmp14_;
+	GArray* events;
+	gchar* _tmp15_;
+	gchar* _tmp16_;
+	GError * _inner_error_;
+};
+
+struct _RelatedAppletGetRecentByMimetypeData {
+	int _state_;
+	GObject* _source_object_;
+	GAsyncResult* _res_;
+	GSimpleAsyncResult* _async_result;
+	RelatedApplet* self;
+	gchar** mimetypes;
+	gint mimetypes_length1;
+	gboolean result;
+	GList* helper_event_list;
+	GPtrArray* _tmp0_;
+	GPtrArray* ptr_array;
+	gchar** mimetype_collection;
+	int mimetype_collection_length1;
+	int mimetype_it;
+	const gchar* mimetype;
+	ZeitgeistEvent* _tmp1_;
+	ZeitgeistEvent* event;
+	ZeitgeistSubject* _tmp2_;
+	ZeitgeistSubject* subject;
+	ZeitgeistEvent* _tmp3_;
+	ZeitgeistResultSet* events;
+	ZeitgeistTimeRange* _tmp4_;
+	ZeitgeistTimeRange* _tmp5_;
+	GPtrArray* _tmp6_;
+	ZeitgeistResultSet* _tmp7_;
+	ZeitgeistResultSet* _tmp8_;
+	ZeitgeistResultSet* _tmp9_;
+	GError * err;
+	gint results_pushed;
+	ZeitgeistResultSet* _tmp10_;
+	ZeitgeistResultSet* _e_it;
+	ZeitgeistEvent* e;
+	ZeitgeistEvent* _tmp11_;
+	gint _tmp12_;
+	ZeitgeistSubject* _tmp13_;
+	ZeitgeistSubject* _tmp14_;
+	ZeitgeistSubject* s;
+	gboolean _tmp15_;
+	gboolean _tmp16_;
+	guint _tmp17_;
+	GError * _inner_error_;
+};
+
+struct _RelatedAppletGetEventsForActorData {
+	int _state_;
+	GObject* _source_object_;
+	GAsyncResult* _res_;
+	GSimpleAsyncResult* _async_result;
+	RelatedApplet* self;
+	gchar* actor;
+	gboolean result;
+	GPtrArray* _tmp0_;
+	GPtrArray* ptr_array;
+	ZeitgeistEvent* _tmp1_;
+	ZeitgeistEvent* event;
+	gchar* _tmp2_;
+	gchar* _tmp3_;
+	ZeitgeistResultSet* events;
+	ZeitgeistTimeRange* _tmp4_;
+	ZeitgeistTimeRange* _tmp5_;
+	GPtrArray* _tmp6_;
+	ZeitgeistResultSet* _tmp7_;
+	ZeitgeistResultSet* _tmp8_;
+	ZeitgeistResultSet* _tmp9_;
+	GError * err;
+	gint results_pushed;
+	ZeitgeistResultSet* _tmp10_;
+	ZeitgeistResultSet* _e_it;
+	ZeitgeistEvent* e;
+	ZeitgeistEvent* _tmp11_;
+	gint _tmp12_;
+	ZeitgeistSubject* _tmp13_;
+	ZeitgeistSubject* _tmp14_;
+	ZeitgeistSubject* s;
+	gboolean _tmp15_;
+	gboolean _tmp16_;
+	guint _tmp17_;
+	GError * _inner_error_;
+};
+
+struct _RelatedAppletBuildDialogData {
+	int _state_;
+	GObject* _source_object_;
+	GAsyncResult* _res_;
+	GSimpleAsyncResult* _async_result;
+	RelatedApplet* self;
+	gchar* desktop_file;
+	GtkVBox* _tmp0_;
+	gboolean found1;
+	gboolean found2;
+	gchar* _tmp1_;
+	DesktopFileInfo* df_data;
+	gconstpointer _tmp2_;
+	gboolean _tmp3_;
+	gboolean _tmp4_;
+	gchar** _tmp5_;
+	gchar** _tmp6_;
+	gint _tmp6__length1;
+	gboolean _tmp7_;
+	GtkHSeparator* _tmp8_;
+	GtkHSeparator* _tmp9_;
+	gchar* actor;
+	gchar* _tmp10_;
+	gboolean _tmp11_;
+	gboolean _tmp12_;
+	gboolean _tmp13_;
+	gboolean _tmp14_;
+	GtkLabel* _tmp15_;
+	GtkLabel* l;
+};
+
+struct _Block1Data {
+	int _ref_count_;
+	RelatedApplet * self;
+	GFile* f;
+	gchar* desktop_file;
+};
+
+
+static gpointer related_applet_parent_class = NULL;
+
+WnckSyncMatcher* wnck_sync_matcher_dbus_proxy_new (DBusGConnection* connection, const char* name, const char* path);
+GType wnck_sync_matcher_get_type (void) G_GNUC_CONST;
+gchar* wnck_sync_matcher_desktop_file_for_xid (WnckSyncMatcher* self, guint32 xid, GError** error);
+gboolean wnck_sync_matcher_window_match_is_ready (WnckSyncMatcher* self, guint32 xid, GError** error);
+void wnck_sync_matcher_register_desktop_file_for_pid (WnckSyncMatcher* self, const gchar* filename, gint32 pid, GError** error);
+guint32* wnck_sync_matcher_xids_for_desktop_file (WnckSyncMatcher* self, const gchar* filename, int* result_length1, GError** error);
+static void _vala_dbus_register_object (DBusConnection* connection, const char* path, void* object);
+static void _vala_dbus_unregister_object (gpointer connection, GObject* object);
+void wnck_sync_matcher_dbus_register_object (DBusConnection* connection, const char* path, void* object);
+void _wnck_sync_matcher_dbus_unregister (DBusConnection* connection, void* _user_data_);
+DBusHandlerResult wnck_sync_matcher_dbus_message (DBusConnection* connection, DBusMessage* message, void* object);
+static DBusHandlerResult _dbus_wnck_sync_matcher_introspect (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message);
+static DBusHandlerResult _dbus_wnck_sync_matcher_property_get_all (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message);
+static DBusHandlerResult _dbus_wnck_sync_matcher_desktop_file_for_xid (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message);
+static DBusHandlerResult _dbus_wnck_sync_matcher_window_match_is_ready (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message);
+static DBusHandlerResult _dbus_wnck_sync_matcher_register_desktop_file_for_pid (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message);
+static DBusHandlerResult _dbus_wnck_sync_matcher_xids_for_desktop_file (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message);
+GType wnck_sync_matcher_dbus_proxy_get_type (void) G_GNUC_CONST;
+DBusHandlerResult wnck_sync_matcher_dbus_proxy_filter (DBusConnection* connection, DBusMessage* message, void* user_data);
+enum  {
+	WNCK_SYNC_MATCHER_DBUS_PROXY_DUMMY_PROPERTY
+};
+static gchar* wnck_sync_matcher_dbus_proxy_desktop_file_for_xid (WnckSyncMatcher* self, guint32 xid, GError** error);
+static gboolean wnck_sync_matcher_dbus_proxy_window_match_is_ready (WnckSyncMatcher* self, guint32 xid, GError** error);
+static void wnck_sync_matcher_dbus_proxy_register_desktop_file_for_pid (WnckSyncMatcher* self, const gchar* filename, gint32 pid, GError** error);
+static guint32* wnck_sync_matcher_dbus_proxy_xids_for_desktop_file (WnckSyncMatcher* self, const gchar* filename, int* result_length1, GError** error);
+static void wnck_sync_matcher_dbus_proxy_wnck_sync_matcher__interface_init (WnckSyncMatcherIface* iface);
+static void _vala_wnck_sync_matcher_dbus_proxy_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec);
+static void _vala_wnck_sync_matcher_dbus_proxy_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec);
+GType desktop_file_info_get_type (void) G_GNUC_CONST;
+DesktopFileInfo* desktop_file_info_dup (const DesktopFileInfo* self);
+void desktop_file_info_free (DesktopFileInfo* self);
+void desktop_file_info_copy (const DesktopFileInfo* self, DesktopFileInfo* dest);
+void desktop_file_info_destroy (DesktopFileInfo* self);
+static gchar** _vala_array_dup1 (gchar** self, int length);
+GType related_applet_get_type (void) G_GNUC_CONST;
+#define RELATED_APPLET_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), TYPE_RELATED_APPLET, RelatedAppletPrivate))
+enum  {
+	RELATED_APPLET_DUMMY_PROPERTY
+};
+RelatedApplet* related_applet_new (const gchar* canonical_name, const gchar* uid, gint panel_id);
+RelatedApplet* related_applet_construct (GType object_type, const gchar* canonical_name, const gchar* uid, gint panel_id);
+static void _g_free0_ (gpointer var);
+static void _desktop_file_info_free0_ (gpointer var);
+static void related_applet_window_opened (RelatedApplet* self, WnckWindow* window);
+static void _related_applet_window_opened_wnck_screen_window_opened (WnckScreen* _sender, WnckWindow* window, gpointer self);
+static void related_applet_window_changed (RelatedApplet* self, WnckWindow* old_window);
+static void _related_applet_window_changed_wnck_screen_active_window_changed (WnckScreen* _sender, WnckWindow* previous_window, gpointer self);
+static void related_applet_on_clicked (RelatedApplet* self);
+static void _related_applet_on_clicked_awn_applet_simple_clicked (AwnAppletSimple* _sender, gpointer self);
+static void related_applet_update_star (RelatedApplet* self, const gchar* desktop_file, GAsyncReadyCallback _callback_, gpointer _user_data_);
+static void related_applet_update_star_finish (RelatedApplet* self, GAsyncResult* _res_);
+static void related_applet_update_star_data_free (gpointer _data);
+static gboolean related_applet_update_star_co (RelatedAppletUpdateStarData* data);
+static void related_applet_update_star_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_);
+static void _g_object_unref0_ (gpointer var);
+static void _g_list_free__g_object_unref0_ (GList* self);
+static void related_applet_get_recent_by_mimetype_data_free (gpointer _data);
+static gchar** _vala_array_dup2 (gchar** self, int length);
+static void related_applet_get_recent_by_mimetype (RelatedApplet* self, gchar** mimetypes, int mimetypes_length1, GAsyncReadyCallback _callback_, gpointer _user_data_);
+static gboolean related_applet_get_recent_by_mimetype_finish (RelatedApplet* self, GAsyncResult* _res_);
+static gboolean related_applet_get_recent_by_mimetype_co (RelatedAppletGetRecentByMimetypeData* data);
+static void related_applet_get_recent_by_mimetype_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_);
+static gboolean related_applet_push_result (RelatedApplet* self, ZeitgeistEvent* event, ZeitgeistSubject* subject);
+static void related_applet_get_events_for_actor_data_free (gpointer _data);
+static void related_applet_get_events_for_actor (RelatedApplet* self, const gchar* actor, GAsyncReadyCallback _callback_, gpointer _user_data_);
+static gboolean related_applet_get_events_for_actor_finish (RelatedApplet* self, GAsyncResult* _res_);
+static gboolean related_applet_get_events_for_actor_co (RelatedAppletGetEventsForActorData* data);
+static void related_applet_get_events_for_actor_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_);
+static void related_applet_build_dialog_data_free (gpointer _data);
+static void related_applet_build_dialog (RelatedApplet* self, const gchar* desktop_file, GAsyncReadyCallback _callback_, gpointer _user_data_);
+static void related_applet_build_dialog_finish (RelatedApplet* self, GAsyncResult* _res_);
+static gboolean related_applet_build_dialog_co (RelatedAppletBuildDialogData* data);
+static void related_applet_build_dialog_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_);
+static Block1Data* block1_data_ref (Block1Data* _data1_);
+static void block1_data_unref (Block1Data* _data1_);
+static void _lambda0_ (Block1Data* _data1_);
+static void _g_list_free__g_free0_ (GList* self);
+static void __lambda0__gtk_button_clicked (GtkButton* _sender, gpointer self);
+static GObject * related_applet_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties);
+static void related_applet_finalize (GObject* obj);
+AwnApplet* awn_applet_factory_initp (const gchar* canonical_name, const gchar* uid, gint panel_id);
+static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func);
+static void _vala_array_free (gpointer array, gint array_length, GDestroyNotify destroy_func);
+
+static const DBusObjectPathVTable _wnck_sync_matcher_dbus_path_vtable = {_wnck_sync_matcher_dbus_unregister, wnck_sync_matcher_dbus_message};
+static const _DBusObjectVTable _wnck_sync_matcher_dbus_vtable = {wnck_sync_matcher_dbus_register_object};
+
+gchar* wnck_sync_matcher_desktop_file_for_xid (WnckSyncMatcher* self, guint32 xid, GError** error) {
+	return WNCK_SYNC_MATCHER_GET_INTERFACE (self)->desktop_file_for_xid (self, xid, error);
+}
+
+
+gboolean wnck_sync_matcher_window_match_is_ready (WnckSyncMatcher* self, guint32 xid, GError** error) {
+	return WNCK_SYNC_MATCHER_GET_INTERFACE (self)->window_match_is_ready (self, xid, error);
+}
+
+
+void wnck_sync_matcher_register_desktop_file_for_pid (WnckSyncMatcher* self, const gchar* filename, gint32 pid, GError** error) {
+	WNCK_SYNC_MATCHER_GET_INTERFACE (self)->register_desktop_file_for_pid (self, filename, pid, error);
+}
+
+
+guint32* wnck_sync_matcher_xids_for_desktop_file (WnckSyncMatcher* self, const gchar* filename, int* result_length1, GError** error) {
+	return WNCK_SYNC_MATCHER_GET_INTERFACE (self)->xids_for_desktop_file (self, filename, result_length1, error);
+}
+
+
+static void wnck_sync_matcher_base_init (WnckSyncMatcherIface * iface) {
+	static gboolean initialized = FALSE;
+	if (!initialized) {
+		initialized = TRUE;
+	}
+}
+
+
+static void _vala_dbus_register_object (DBusConnection* connection, const char* path, void* object) {
+	const _DBusObjectVTable * vtable;
+	vtable = g_type_get_qdata (G_TYPE_FROM_INSTANCE (object), g_quark_from_static_string ("DBusObjectVTable"));
+	if (vtable) {
+		vtable->register_object (connection, path, object);
+	} else {
+		g_warning ("Object does not implement any D-Bus interface");
+	}
+}
+
+
+static void _vala_dbus_unregister_object (gpointer connection, GObject* object) {
+	char* path;
+	path = g_object_steal_data ((GObject*) object, "dbus_object_path");
+	dbus_connection_unregister_object_path (connection, path);
+	g_free (path);
+}
+
+
+void _wnck_sync_matcher_dbus_unregister (DBusConnection* connection, void* _user_data_) {
+}
+
+
+static DBusHandlerResult _dbus_wnck_sync_matcher_introspect (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message) {
+	DBusMessage* reply;
+	DBusMessageIter iter;
+	GString* xml_data;
+	char** children;
+	int i;
+	reply = dbus_message_new_method_return (message);
+	dbus_message_iter_init_append (reply, &iter);
+	xml_data = g_string_new ("<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\" \"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\">\n");
+	g_string_append (xml_data, "<node>\n<interface name=\"org.freedesktop.DBus.Introspectable\">\n  <method name=\"Introspect\">\n    <arg name=\"data\" direction=\"out\" type=\"s\"/>\n  </method>\n</interface>\n<interface name=\"org.freedesktop.DBus.Properties\">\n  <method name=\"Get\">\n    <arg name=\"interface\" direction=\"in\" type=\"s\"/>\n    <arg name=\"propname\" direction=\"in\" type=\"s\"/>\n    <arg name=\"value\" direction=\"out\" type=\"v\"/>\n  </method>\n  <method name=\"Set\">\n    <arg name=\"interface\" direction=\"in\" type=\"s\"/>\n    <arg name=\"propname\" direction=\"in\" type=\"s\"/>\n    <arg name=\"value\" direction=\"in\" type=\"v\"/>\n  </method>\n  <method name=\"GetAll\">\n    <arg name=\"interface\" direction=\"in\" type=\"s\"/>\n    <arg name=\"props\" direction=\"out\" type=\"a{sv}\"/>\n  </method>\n</interface>\n<interface name=\"org.wncksync.Matcher\">\n  <method name=\"DesktopFileForXid\">\n    <arg name=\"xid\" type=\"u\" direction=\"in\"/>\n    <arg name=\"result\" type=\"s\" direction=\"out\"/>\n  </method>\n  <method name=\"WindowMatchIsReady\">\n    <arg name=\"xid\" type=\"u\" direction=\"in\"/>\n    <arg name=\"result\" type=\"b\" direction=\"out\"/>\n  </method>\n  <method name=\"RegisterDesktopFileForPid\">\n    <arg name=\"filename\" type=\"s\" direction=\"in\"/>\n    <arg name=\"pid\" type=\"i\" direction=\"in\"/>\n  </method>\n  <method name=\"XidsForDesktopFile\">\n    <arg name=\"filename\" type=\"s\" direction=\"in\"/>\n    <arg name=\"result\" type=\"au\" direction=\"out\"/>\n  </method>\n</interface>\n");
+	dbus_connection_list_registered (connection, g_object_get_data ((GObject *) self, "dbus_object_path"), &children);
+	for (i = 0; children[i]; i++) {
+		g_string_append_printf (xml_data, "<node name=\"%s\"/>\n", children[i]);
+	}
+	dbus_free_string_array (children);
+	g_string_append (xml_data, "</node>\n");
+	dbus_message_iter_append_basic (&iter, DBUS_TYPE_STRING, &xml_data->str);
+	g_string_free (xml_data, TRUE);
+	if (reply) {
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+static DBusHandlerResult _dbus_wnck_sync_matcher_property_get_all (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message) {
+	DBusMessage* reply;
+	DBusMessageIter iter, reply_iter, subiter;
+	char* interface_name;
+	const char* _tmp0_;
+	if (strcmp (dbus_message_get_signature (message), "s")) {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+	dbus_message_iter_init (message, &iter);
+	reply = dbus_message_new_method_return (message);
+	dbus_message_iter_init_append (reply, &reply_iter);
+	dbus_message_iter_get_basic (&iter, &_tmp0_);
+	dbus_message_iter_next (&iter);
+	interface_name = g_strdup (_tmp0_);
+	if (strcmp (interface_name, "org.wncksync.Matcher") == 0) {
+		dbus_message_iter_open_container (&reply_iter, DBUS_TYPE_ARRAY, "{sv}", &subiter);
+		dbus_message_iter_close_container (&reply_iter, &subiter);
+	} else {
+		dbus_message_unref (reply);
+		reply = NULL;
+	}
+	g_free (interface_name);
+	if (reply) {
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+static DBusHandlerResult _dbus_wnck_sync_matcher_desktop_file_for_xid (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message) {
+	DBusMessageIter iter;
+	GError* error;
+	guint32 xid = 0U;
+	dbus_uint32_t _tmp1_;
+	gchar* result;
+	DBusMessage* reply;
+	const char* _tmp2_;
+	error = NULL;
+	if (strcmp (dbus_message_get_signature (message), "u")) {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+	dbus_message_iter_init (message, &iter);
+	dbus_message_iter_get_basic (&iter, &_tmp1_);
+	dbus_message_iter_next (&iter);
+	xid = _tmp1_;
+	result = wnck_sync_matcher_desktop_file_for_xid (self, xid, &error);
+	if (error) {
+		if (error->domain == DBUS_GERROR) {
+			switch (error->code) {
+				case DBUS_GERROR_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Failed", error->message);
+				break;
+				case DBUS_GERROR_NO_MEMORY:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoMemory", error->message);
+				break;
+				case DBUS_GERROR_SERVICE_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.ServiceUnknown", error->message);
+				break;
+				case DBUS_GERROR_NAME_HAS_NO_OWNER:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NameHasNoOwner", error->message);
+				break;
+				case DBUS_GERROR_NO_REPLY:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoReply", error->message);
+				break;
+				case DBUS_GERROR_IO_ERROR:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.IOError", error->message);
+				break;
+				case DBUS_GERROR_BAD_ADDRESS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.BadAddress", error->message);
+				break;
+				case DBUS_GERROR_NOT_SUPPORTED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NotSupported", error->message);
+				break;
+				case DBUS_GERROR_LIMITS_EXCEEDED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.LimitsExceeded", error->message);
+				break;
+				case DBUS_GERROR_ACCESS_DENIED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AccessDenied", error->message);
+				break;
+				case DBUS_GERROR_AUTH_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AuthFailed", error->message);
+				break;
+				case DBUS_GERROR_NO_SERVER:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoServer", error->message);
+				break;
+				case DBUS_GERROR_TIMEOUT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Timeout", error->message);
+				break;
+				case DBUS_GERROR_NO_NETWORK:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoNetwork", error->message);
+				break;
+				case DBUS_GERROR_ADDRESS_IN_USE:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AddressInUse", error->message);
+				break;
+				case DBUS_GERROR_DISCONNECTED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Disconnected", error->message);
+				break;
+				case DBUS_GERROR_INVALID_ARGS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidArgs", error->message);
+				break;
+				case DBUS_GERROR_FILE_NOT_FOUND:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.FileNotFound", error->message);
+				break;
+				case DBUS_GERROR_FILE_EXISTS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.FileExists", error->message);
+				break;
+				case DBUS_GERROR_UNKNOWN_METHOD:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.UnknownMethod", error->message);
+				break;
+				case DBUS_GERROR_TIMED_OUT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.TimedOut", error->message);
+				break;
+				case DBUS_GERROR_MATCH_RULE_NOT_FOUND:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.MatchRuleNotFound", error->message);
+				break;
+				case DBUS_GERROR_MATCH_RULE_INVALID:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.MatchRuleInvalid", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_EXEC_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ExecFailed", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_FORK_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ForkFailed", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_CHILD_EXITED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ChildExited", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_CHILD_SIGNALED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ChildSignaled", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.Failed", error->message);
+				break;
+				case DBUS_GERROR_UNIX_PROCESS_ID_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.UnixProcessIdUnknown", error->message);
+				break;
+				case DBUS_GERROR_INVALID_SIGNATURE:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidSignature", error->message);
+				break;
+				case DBUS_GERROR_INVALID_FILE_CONTENT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidFileContent", error->message);
+				break;
+				case DBUS_GERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", error->message);
+				break;
+				case DBUS_GERROR_REMOTE_EXCEPTION:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.RemoteException", error->message);
+				break;
+			}
+		}
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	}
+	reply = dbus_message_new_method_return (message);
+	dbus_message_iter_init_append (reply, &iter);
+	_tmp2_ = result;
+	dbus_message_iter_append_basic (&iter, DBUS_TYPE_STRING, &_tmp2_);
+	_g_free0 ( result);
+	if (reply) {
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+static DBusHandlerResult _dbus_wnck_sync_matcher_window_match_is_ready (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message) {
+	DBusMessageIter iter;
+	GError* error;
+	guint32 xid = 0U;
+	dbus_uint32_t _tmp3_;
+	gboolean result;
+	DBusMessage* reply;
+	dbus_bool_t _tmp4_;
+	error = NULL;
+	if (strcmp (dbus_message_get_signature (message), "u")) {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+	dbus_message_iter_init (message, &iter);
+	dbus_message_iter_get_basic (&iter, &_tmp3_);
+	dbus_message_iter_next (&iter);
+	xid = _tmp3_;
+	result = wnck_sync_matcher_window_match_is_ready (self, xid, &error);
+	if (error) {
+		if (error->domain == DBUS_GERROR) {
+			switch (error->code) {
+				case DBUS_GERROR_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Failed", error->message);
+				break;
+				case DBUS_GERROR_NO_MEMORY:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoMemory", error->message);
+				break;
+				case DBUS_GERROR_SERVICE_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.ServiceUnknown", error->message);
+				break;
+				case DBUS_GERROR_NAME_HAS_NO_OWNER:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NameHasNoOwner", error->message);
+				break;
+				case DBUS_GERROR_NO_REPLY:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoReply", error->message);
+				break;
+				case DBUS_GERROR_IO_ERROR:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.IOError", error->message);
+				break;
+				case DBUS_GERROR_BAD_ADDRESS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.BadAddress", error->message);
+				break;
+				case DBUS_GERROR_NOT_SUPPORTED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NotSupported", error->message);
+				break;
+				case DBUS_GERROR_LIMITS_EXCEEDED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.LimitsExceeded", error->message);
+				break;
+				case DBUS_GERROR_ACCESS_DENIED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AccessDenied", error->message);
+				break;
+				case DBUS_GERROR_AUTH_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AuthFailed", error->message);
+				break;
+				case DBUS_GERROR_NO_SERVER:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoServer", error->message);
+				break;
+				case DBUS_GERROR_TIMEOUT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Timeout", error->message);
+				break;
+				case DBUS_GERROR_NO_NETWORK:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoNetwork", error->message);
+				break;
+				case DBUS_GERROR_ADDRESS_IN_USE:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AddressInUse", error->message);
+				break;
+				case DBUS_GERROR_DISCONNECTED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Disconnected", error->message);
+				break;
+				case DBUS_GERROR_INVALID_ARGS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidArgs", error->message);
+				break;
+				case DBUS_GERROR_FILE_NOT_FOUND:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.FileNotFound", error->message);
+				break;
+				case DBUS_GERROR_FILE_EXISTS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.FileExists", error->message);
+				break;
+				case DBUS_GERROR_UNKNOWN_METHOD:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.UnknownMethod", error->message);
+				break;
+				case DBUS_GERROR_TIMED_OUT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.TimedOut", error->message);
+				break;
+				case DBUS_GERROR_MATCH_RULE_NOT_FOUND:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.MatchRuleNotFound", error->message);
+				break;
+				case DBUS_GERROR_MATCH_RULE_INVALID:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.MatchRuleInvalid", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_EXEC_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ExecFailed", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_FORK_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ForkFailed", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_CHILD_EXITED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ChildExited", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_CHILD_SIGNALED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ChildSignaled", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.Failed", error->message);
+				break;
+				case DBUS_GERROR_UNIX_PROCESS_ID_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.UnixProcessIdUnknown", error->message);
+				break;
+				case DBUS_GERROR_INVALID_SIGNATURE:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidSignature", error->message);
+				break;
+				case DBUS_GERROR_INVALID_FILE_CONTENT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidFileContent", error->message);
+				break;
+				case DBUS_GERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", error->message);
+				break;
+				case DBUS_GERROR_REMOTE_EXCEPTION:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.RemoteException", error->message);
+				break;
+			}
+		}
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	}
+	reply = dbus_message_new_method_return (message);
+	dbus_message_iter_init_append (reply, &iter);
+	_tmp4_ = result;
+	dbus_message_iter_append_basic (&iter, DBUS_TYPE_BOOLEAN, &_tmp4_);
+	if (reply) {
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+static DBusHandlerResult _dbus_wnck_sync_matcher_register_desktop_file_for_pid (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message) {
+	DBusMessageIter iter;
+	GError* error;
+	gchar* filename = NULL;
+	const char* _tmp5_;
+	gint32 pid = 0;
+	dbus_int32_t _tmp6_;
+	DBusMessage* reply;
+	error = NULL;
+	if (strcmp (dbus_message_get_signature (message), "si")) {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+	dbus_message_iter_init (message, &iter);
+	dbus_message_iter_get_basic (&iter, &_tmp5_);
+	dbus_message_iter_next (&iter);
+	filename = g_strdup (_tmp5_);
+	dbus_message_iter_get_basic (&iter, &_tmp6_);
+	dbus_message_iter_next (&iter);
+	pid = _tmp6_;
+	wnck_sync_matcher_register_desktop_file_for_pid (self, filename, pid, &error);
+	if (error) {
+		if (error->domain == DBUS_GERROR) {
+			switch (error->code) {
+				case DBUS_GERROR_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Failed", error->message);
+				break;
+				case DBUS_GERROR_NO_MEMORY:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoMemory", error->message);
+				break;
+				case DBUS_GERROR_SERVICE_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.ServiceUnknown", error->message);
+				break;
+				case DBUS_GERROR_NAME_HAS_NO_OWNER:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NameHasNoOwner", error->message);
+				break;
+				case DBUS_GERROR_NO_REPLY:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoReply", error->message);
+				break;
+				case DBUS_GERROR_IO_ERROR:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.IOError", error->message);
+				break;
+				case DBUS_GERROR_BAD_ADDRESS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.BadAddress", error->message);
+				break;
+				case DBUS_GERROR_NOT_SUPPORTED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NotSupported", error->message);
+				break;
+				case DBUS_GERROR_LIMITS_EXCEEDED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.LimitsExceeded", error->message);
+				break;
+				case DBUS_GERROR_ACCESS_DENIED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AccessDenied", error->message);
+				break;
+				case DBUS_GERROR_AUTH_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AuthFailed", error->message);
+				break;
+				case DBUS_GERROR_NO_SERVER:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoServer", error->message);
+				break;
+				case DBUS_GERROR_TIMEOUT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Timeout", error->message);
+				break;
+				case DBUS_GERROR_NO_NETWORK:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoNetwork", error->message);
+				break;
+				case DBUS_GERROR_ADDRESS_IN_USE:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AddressInUse", error->message);
+				break;
+				case DBUS_GERROR_DISCONNECTED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Disconnected", error->message);
+				break;
+				case DBUS_GERROR_INVALID_ARGS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidArgs", error->message);
+				break;
+				case DBUS_GERROR_FILE_NOT_FOUND:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.FileNotFound", error->message);
+				break;
+				case DBUS_GERROR_FILE_EXISTS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.FileExists", error->message);
+				break;
+				case DBUS_GERROR_UNKNOWN_METHOD:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.UnknownMethod", error->message);
+				break;
+				case DBUS_GERROR_TIMED_OUT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.TimedOut", error->message);
+				break;
+				case DBUS_GERROR_MATCH_RULE_NOT_FOUND:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.MatchRuleNotFound", error->message);
+				break;
+				case DBUS_GERROR_MATCH_RULE_INVALID:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.MatchRuleInvalid", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_EXEC_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ExecFailed", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_FORK_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ForkFailed", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_CHILD_EXITED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ChildExited", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_CHILD_SIGNALED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ChildSignaled", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.Failed", error->message);
+				break;
+				case DBUS_GERROR_UNIX_PROCESS_ID_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.UnixProcessIdUnknown", error->message);
+				break;
+				case DBUS_GERROR_INVALID_SIGNATURE:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidSignature", error->message);
+				break;
+				case DBUS_GERROR_INVALID_FILE_CONTENT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidFileContent", error->message);
+				break;
+				case DBUS_GERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", error->message);
+				break;
+				case DBUS_GERROR_REMOTE_EXCEPTION:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.RemoteException", error->message);
+				break;
+			}
+		}
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	}
+	reply = dbus_message_new_method_return (message);
+	dbus_message_iter_init_append (reply, &iter);
+	_g_free0 (filename);
+	if (reply) {
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+static DBusHandlerResult _dbus_wnck_sync_matcher_xids_for_desktop_file (WnckSyncMatcher* self, DBusConnection* connection, DBusMessage* message) {
+	DBusMessageIter iter;
+	GError* error;
+	gchar* filename = NULL;
+	const char* _tmp7_;
+	guint32* result;
+	int result_length1;
+	DBusMessage* reply;
+	guint32* _tmp8_;
+	DBusMessageIter _tmp9_;
+	int _tmp10_;
+	error = NULL;
+	if (strcmp (dbus_message_get_signature (message), "s")) {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+	dbus_message_iter_init (message, &iter);
+	dbus_message_iter_get_basic (&iter, &_tmp7_);
+	dbus_message_iter_next (&iter);
+	filename = g_strdup (_tmp7_);
+	result_length1 = 0;
+	result = wnck_sync_matcher_xids_for_desktop_file (self, filename, &result_length1, &error);
+	if (error) {
+		if (error->domain == DBUS_GERROR) {
+			switch (error->code) {
+				case DBUS_GERROR_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Failed", error->message);
+				break;
+				case DBUS_GERROR_NO_MEMORY:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoMemory", error->message);
+				break;
+				case DBUS_GERROR_SERVICE_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.ServiceUnknown", error->message);
+				break;
+				case DBUS_GERROR_NAME_HAS_NO_OWNER:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NameHasNoOwner", error->message);
+				break;
+				case DBUS_GERROR_NO_REPLY:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoReply", error->message);
+				break;
+				case DBUS_GERROR_IO_ERROR:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.IOError", error->message);
+				break;
+				case DBUS_GERROR_BAD_ADDRESS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.BadAddress", error->message);
+				break;
+				case DBUS_GERROR_NOT_SUPPORTED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NotSupported", error->message);
+				break;
+				case DBUS_GERROR_LIMITS_EXCEEDED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.LimitsExceeded", error->message);
+				break;
+				case DBUS_GERROR_ACCESS_DENIED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AccessDenied", error->message);
+				break;
+				case DBUS_GERROR_AUTH_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AuthFailed", error->message);
+				break;
+				case DBUS_GERROR_NO_SERVER:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoServer", error->message);
+				break;
+				case DBUS_GERROR_TIMEOUT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Timeout", error->message);
+				break;
+				case DBUS_GERROR_NO_NETWORK:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.NoNetwork", error->message);
+				break;
+				case DBUS_GERROR_ADDRESS_IN_USE:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.AddressInUse", error->message);
+				break;
+				case DBUS_GERROR_DISCONNECTED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Disconnected", error->message);
+				break;
+				case DBUS_GERROR_INVALID_ARGS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidArgs", error->message);
+				break;
+				case DBUS_GERROR_FILE_NOT_FOUND:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.FileNotFound", error->message);
+				break;
+				case DBUS_GERROR_FILE_EXISTS:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.FileExists", error->message);
+				break;
+				case DBUS_GERROR_UNKNOWN_METHOD:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.UnknownMethod", error->message);
+				break;
+				case DBUS_GERROR_TIMED_OUT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.TimedOut", error->message);
+				break;
+				case DBUS_GERROR_MATCH_RULE_NOT_FOUND:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.MatchRuleNotFound", error->message);
+				break;
+				case DBUS_GERROR_MATCH_RULE_INVALID:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.MatchRuleInvalid", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_EXEC_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ExecFailed", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_FORK_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ForkFailed", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_CHILD_EXITED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ChildExited", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_CHILD_SIGNALED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.ChildSignaled", error->message);
+				break;
+				case DBUS_GERROR_SPAWN_FAILED:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.Spawn.Failed", error->message);
+				break;
+				case DBUS_GERROR_UNIX_PROCESS_ID_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.UnixProcessIdUnknown", error->message);
+				break;
+				case DBUS_GERROR_INVALID_SIGNATURE:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidSignature", error->message);
+				break;
+				case DBUS_GERROR_INVALID_FILE_CONTENT:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.InvalidFileContent", error->message);
+				break;
+				case DBUS_GERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.SELinuxSecurityContextUnknown", error->message);
+				break;
+				case DBUS_GERROR_REMOTE_EXCEPTION:
+				reply = dbus_message_new_error (message, "org.freedesktop.DBus.Error.RemoteException", error->message);
+				break;
+			}
+		}
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	}
+	reply = dbus_message_new_method_return (message);
+	dbus_message_iter_init_append (reply, &iter);
+	_g_free0 (filename);
+	_tmp8_ = result;
+	dbus_message_iter_open_container (&iter, DBUS_TYPE_ARRAY, "u", &_tmp9_);
+	for (_tmp10_ = 0; _tmp10_ < result_length1; _tmp10_++) {
+		dbus_uint32_t _tmp11_;
+		_tmp11_ = *_tmp8_;
+		dbus_message_iter_append_basic (&_tmp9_, DBUS_TYPE_UINT32, &_tmp11_);
+		_tmp8_++;
+	}
+	dbus_message_iter_close_container (&iter, &_tmp9_);
+	 result = (g_free ( result), NULL);
+	if (reply) {
+		dbus_connection_send (connection, reply, NULL);
+		dbus_message_unref (reply);
+		return DBUS_HANDLER_RESULT_HANDLED;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+DBusHandlerResult wnck_sync_matcher_dbus_message (DBusConnection* connection, DBusMessage* message, void* object) {
+	DBusHandlerResult result;
+	result = DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	if (dbus_message_is_method_call (message, "org.freedesktop.DBus.Introspectable", "Introspect")) {
+		result = _dbus_wnck_sync_matcher_introspect (object, connection, message);
+	} else if (dbus_message_is_method_call (message, "org.freedesktop.DBus.Properties", "GetAll")) {
+		result = _dbus_wnck_sync_matcher_property_get_all (object, connection, message);
+	} else if (dbus_message_is_method_call (message, "org.wncksync.Matcher", "DesktopFileForXid")) {
+		result = _dbus_wnck_sync_matcher_desktop_file_for_xid (object, connection, message);
+	} else if (dbus_message_is_method_call (message, "org.wncksync.Matcher", "WindowMatchIsReady")) {
+		result = _dbus_wnck_sync_matcher_window_match_is_ready (object, connection, message);
+	} else if (dbus_message_is_method_call (message, "org.wncksync.Matcher", "RegisterDesktopFileForPid")) {
+		result = _dbus_wnck_sync_matcher_register_desktop_file_for_pid (object, connection, message);
+	} else if (dbus_message_is_method_call (message, "org.wncksync.Matcher", "XidsForDesktopFile")) {
+		result = _dbus_wnck_sync_matcher_xids_for_desktop_file (object, connection, message);
+	}
+	if (result == DBUS_HANDLER_RESULT_HANDLED) {
+		return result;
+	} else {
+		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+	}
+}
+
+
+void wnck_sync_matcher_dbus_register_object (DBusConnection* connection, const char* path, void* object) {
+	if (!g_object_get_data (object, "dbus_object_path")) {
+		g_object_set_data (object, "dbus_object_path", g_strdup (path));
+		dbus_connection_register_object_path (connection, path, &_wnck_sync_matcher_dbus_path_vtable, object);
+		g_object_weak_ref (object, _vala_dbus_unregister_object, connection);
+	}
+}
+
+
+GType wnck_sync_matcher_get_type (void) {
+	static volatile gsize wnck_sync_matcher_type_id__volatile = 0;
+	if (g_once_init_enter (&wnck_sync_matcher_type_id__volatile)) {
+		static const GTypeInfo g_define_type_info = { sizeof (WnckSyncMatcherIface), (GBaseInitFunc) wnck_sync_matcher_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) NULL, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
+		GType wnck_sync_matcher_type_id;
+		wnck_sync_matcher_type_id = g_type_register_static (G_TYPE_INTERFACE, "WnckSyncMatcher", &g_define_type_info, 0);
+		g_type_interface_add_prerequisite (wnck_sync_matcher_type_id, G_TYPE_OBJECT);
+		g_type_set_qdata (wnck_sync_matcher_type_id, g_quark_from_string ("ValaDBusInterfaceProxyType"), &wnck_sync_matcher_dbus_proxy_get_type);
+		g_type_set_qdata (wnck_sync_matcher_type_id, g_quark_from_static_string ("DBusObjectVTable"), (void*) (&_wnck_sync_matcher_dbus_vtable));
+		g_once_init_leave (&wnck_sync_matcher_type_id__volatile, wnck_sync_matcher_type_id);
+	}
+	return wnck_sync_matcher_type_id__volatile;
+}
+
+
+G_DEFINE_TYPE_EXTENDED (WnckSyncMatcherDBusProxy, wnck_sync_matcher_dbus_proxy, DBUS_TYPE_G_PROXY, 0, G_IMPLEMENT_INTERFACE (TYPE_WNCK_SYNC_MATCHER, wnck_sync_matcher_dbus_proxy_wnck_sync_matcher__interface_init) );
+WnckSyncMatcher* wnck_sync_matcher_dbus_proxy_new (DBusGConnection* connection, const char* name, const char* path) {
+	WnckSyncMatcher* self;
+	self = g_object_new (wnck_sync_matcher_dbus_proxy_get_type (), "connection", connection, "name", name, "path", path, "interface", "org.wncksync.Matcher", NULL);
+	return self;
+}
+
+
+static GObject* wnck_sync_matcher_dbus_proxy_construct (GType gtype, guint n_properties, GObjectConstructParam* properties) {
+	GObject* self;
+	DBusGConnection *connection;
+	char* path;
+	char* filter;
+	self = G_OBJECT_CLASS (wnck_sync_matcher_dbus_proxy_parent_class)->constructor (gtype, n_properties, properties);
+	g_object_get (self, "connection", &connection, NULL);
+	g_object_get (self, "path", &path, NULL);
+	dbus_connection_add_filter (dbus_g_connection_get_connection (connection), wnck_sync_matcher_dbus_proxy_filter, self, NULL);
+	filter = g_strdup_printf ("type='signal',path='%s',interface='org.wncksync.Matcher'", path);
+	dbus_bus_add_match (dbus_g_connection_get_connection (connection), filter, NULL);
+	dbus_g_connection_unref (connection);
+	g_free (path);
+	g_free (filter);
+	return self;
+}
+
+
+DBusHandlerResult wnck_sync_matcher_dbus_proxy_filter (DBusConnection* connection, DBusMessage* message, void* user_data) {
+	if (dbus_message_has_path (message, dbus_g_proxy_get_path (user_data))) {
+	}
+	return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+}
+
+
+static void wnck_sync_matcher_dbus_proxy_dispose (GObject* self) {
+	DBusGConnection *connection;
+	if (((WnckSyncMatcherDBusProxy*) self)->disposed) {
+		return;
+	}
+	((WnckSyncMatcherDBusProxy*) self)->disposed = TRUE;
+	g_object_get (self, "connection", &connection, NULL);
+	dbus_connection_remove_filter (dbus_g_connection_get_connection (connection), wnck_sync_matcher_dbus_proxy_filter, self);
+	G_OBJECT_CLASS (wnck_sync_matcher_dbus_proxy_parent_class)->dispose (self);
+}
+
+
+static void wnck_sync_matcher_dbus_proxy_class_init (WnckSyncMatcherDBusProxyClass* klass) {
+	G_OBJECT_CLASS (klass)->constructor = wnck_sync_matcher_dbus_proxy_construct;
+	G_OBJECT_CLASS (klass)->dispose = wnck_sync_matcher_dbus_proxy_dispose;
+	G_OBJECT_CLASS (klass)->get_property = _vala_wnck_sync_matcher_dbus_proxy_get_property;
+	G_OBJECT_CLASS (klass)->set_property = _vala_wnck_sync_matcher_dbus_proxy_set_property;
+}
+
+
+static void wnck_sync_matcher_dbus_proxy_init (WnckSyncMatcherDBusProxy* self) {
+}
+
+
+static gchar* wnck_sync_matcher_dbus_proxy_desktop_file_for_xid (WnckSyncMatcher* self, guint32 xid, GError** error) {
+	DBusError _dbus_error;
+	DBusGConnection *_connection;
+	DBusMessage *_message, *_reply;
+	DBusMessageIter _iter;
+	dbus_uint32_t _tmp0_;
+	gchar* _result;
+	const char* _tmp1_;
+	if (((WnckSyncMatcherDBusProxy*) self)->disposed) {
+		g_set_error (error, DBUS_GERROR, DBUS_GERROR_DISCONNECTED, "%s", "Connection is closed");
+		return NULL;
+	}
+	_message = dbus_message_new_method_call (dbus_g_proxy_get_bus_name ((DBusGProxy*) self), dbus_g_proxy_get_path ((DBusGProxy*) self), "org.wncksync.Matcher", "DesktopFileForXid");
+	dbus_message_iter_init_append (_message, &_iter);
+	_tmp0_ = xid;
+	dbus_message_iter_append_basic (&_iter, DBUS_TYPE_UINT32, &_tmp0_);
+	g_object_get (self, "connection", &_connection, NULL);
+	dbus_error_init (&_dbus_error);
+	_reply = dbus_connection_send_with_reply_and_block (dbus_g_connection_get_connection (_connection), _message, -1, &_dbus_error);
+	dbus_g_connection_unref (_connection);
+	dbus_message_unref (_message);
+	if (dbus_error_is_set (&_dbus_error)) {
+		GQuark _edomain = 0;
+		gint _ecode = 0;
+		if (strstr (_dbus_error.name, "org.freedesktop.DBus.Error") == _dbus_error.name) {
+			const char* _tmp2_;
+			_edomain = DBUS_GERROR;
+			_tmp2_ = _dbus_error.name + 27;
+			if (strcmp (_tmp2_, "Failed") == 0) {
+				_ecode = DBUS_GERROR_FAILED;
+			} else if (strcmp (_tmp2_, "NoMemory") == 0) {
+				_ecode = DBUS_GERROR_NO_MEMORY;
+			} else if (strcmp (_tmp2_, "ServiceUnknown") == 0) {
+				_ecode = DBUS_GERROR_SERVICE_UNKNOWN;
+			} else if (strcmp (_tmp2_, "NameHasNoOwner") == 0) {
+				_ecode = DBUS_GERROR_NAME_HAS_NO_OWNER;
+			} else if (strcmp (_tmp2_, "NoReply") == 0) {
+				_ecode = DBUS_GERROR_NO_REPLY;
+			} else if (strcmp (_tmp2_, "IOError") == 0) {
+				_ecode = DBUS_GERROR_IO_ERROR;
+			} else if (strcmp (_tmp2_, "BadAddress") == 0) {
+				_ecode = DBUS_GERROR_BAD_ADDRESS;
+			} else if (strcmp (_tmp2_, "NotSupported") == 0) {
+				_ecode = DBUS_GERROR_NOT_SUPPORTED;
+			} else if (strcmp (_tmp2_, "LimitsExceeded") == 0) {
+				_ecode = DBUS_GERROR_LIMITS_EXCEEDED;
+			} else if (strcmp (_tmp2_, "AccessDenied") == 0) {
+				_ecode = DBUS_GERROR_ACCESS_DENIED;
+			} else if (strcmp (_tmp2_, "AuthFailed") == 0) {
+				_ecode = DBUS_GERROR_AUTH_FAILED;
+			} else if (strcmp (_tmp2_, "NoServer") == 0) {
+				_ecode = DBUS_GERROR_NO_SERVER;
+			} else if (strcmp (_tmp2_, "Timeout") == 0) {
+				_ecode = DBUS_GERROR_TIMEOUT;
+			} else if (strcmp (_tmp2_, "NoNetwork") == 0) {
+				_ecode = DBUS_GERROR_NO_NETWORK;
+			} else if (strcmp (_tmp2_, "AddressInUse") == 0) {
+				_ecode = DBUS_GERROR_ADDRESS_IN_USE;
+			} else if (strcmp (_tmp2_, "Disconnected") == 0) {
+				_ecode = DBUS_GERROR_DISCONNECTED;
+			} else if (strcmp (_tmp2_, "InvalidArgs") == 0) {
+				_ecode = DBUS_GERROR_INVALID_ARGS;
+			} else if (strcmp (_tmp2_, "FileNotFound") == 0) {
+				_ecode = DBUS_GERROR_FILE_NOT_FOUND;
+			} else if (strcmp (_tmp2_, "FileExists") == 0) {
+				_ecode = DBUS_GERROR_FILE_EXISTS;
+			} else if (strcmp (_tmp2_, "UnknownMethod") == 0) {
+				_ecode = DBUS_GERROR_UNKNOWN_METHOD;
+			} else if (strcmp (_tmp2_, "TimedOut") == 0) {
+				_ecode = DBUS_GERROR_TIMED_OUT;
+			} else if (strcmp (_tmp2_, "MatchRuleNotFound") == 0) {
+				_ecode = DBUS_GERROR_MATCH_RULE_NOT_FOUND;
+			} else if (strcmp (_tmp2_, "MatchRuleInvalid") == 0) {
+				_ecode = DBUS_GERROR_MATCH_RULE_INVALID;
+			} else if (strcmp (_tmp2_, "Spawn.ExecFailed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_EXEC_FAILED;
+			} else if (strcmp (_tmp2_, "Spawn.ForkFailed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_FORK_FAILED;
+			} else if (strcmp (_tmp2_, "Spawn.ChildExited") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_CHILD_EXITED;
+			} else if (strcmp (_tmp2_, "Spawn.ChildSignaled") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_CHILD_SIGNALED;
+			} else if (strcmp (_tmp2_, "Spawn.Failed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_FAILED;
+			} else if (strcmp (_tmp2_, "UnixProcessIdUnknown") == 0) {
+				_ecode = DBUS_GERROR_UNIX_PROCESS_ID_UNKNOWN;
+			} else if (strcmp (_tmp2_, "InvalidSignature") == 0) {
+				_ecode = DBUS_GERROR_INVALID_SIGNATURE;
+			} else if (strcmp (_tmp2_, "InvalidFileContent") == 0) {
+				_ecode = DBUS_GERROR_INVALID_FILE_CONTENT;
+			} else if (strcmp (_tmp2_, "SELinuxSecurityContextUnknown") == 0) {
+				_ecode = DBUS_GERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN;
+			} else if (strcmp (_tmp2_, "RemoteException") == 0) {
+				_ecode = DBUS_GERROR_REMOTE_EXCEPTION;
+			}
+		}
+		g_set_error (error, _edomain, _ecode, "%s", _dbus_error.message);
+		dbus_error_free (&_dbus_error);
+		return NULL;
+	}
+	if (strcmp (dbus_message_get_signature (_reply), "s")) {
+		g_set_error (error, DBUS_GERROR, DBUS_GERROR_INVALID_SIGNATURE, "Invalid signature, expected \"%s\", got \"%s\"", "s", dbus_message_get_signature (_reply));
+		dbus_message_unref (_reply);
+		return NULL;
+	}
+	dbus_message_iter_init (_reply, &_iter);
+	dbus_message_iter_get_basic (&_iter, &_tmp1_);
+	dbus_message_iter_next (&_iter);
+	_result = g_strdup (_tmp1_);
+	dbus_message_unref (_reply);
+	return _result;
+}
+
+
+static gboolean wnck_sync_matcher_dbus_proxy_window_match_is_ready (WnckSyncMatcher* self, guint32 xid, GError** error) {
+	DBusError _dbus_error;
+	DBusGConnection *_connection;
+	DBusMessage *_message, *_reply;
+	DBusMessageIter _iter;
+	dbus_uint32_t _tmp3_;
+	gboolean _result;
+	dbus_bool_t _tmp4_;
+	if (((WnckSyncMatcherDBusProxy*) self)->disposed) {
+		g_set_error (error, DBUS_GERROR, DBUS_GERROR_DISCONNECTED, "%s", "Connection is closed");
+		return FALSE;
+	}
+	_message = dbus_message_new_method_call (dbus_g_proxy_get_bus_name ((DBusGProxy*) self), dbus_g_proxy_get_path ((DBusGProxy*) self), "org.wncksync.Matcher", "WindowMatchIsReady");
+	dbus_message_iter_init_append (_message, &_iter);
+	_tmp3_ = xid;
+	dbus_message_iter_append_basic (&_iter, DBUS_TYPE_UINT32, &_tmp3_);
+	g_object_get (self, "connection", &_connection, NULL);
+	dbus_error_init (&_dbus_error);
+	_reply = dbus_connection_send_with_reply_and_block (dbus_g_connection_get_connection (_connection), _message, -1, &_dbus_error);
+	dbus_g_connection_unref (_connection);
+	dbus_message_unref (_message);
+	if (dbus_error_is_set (&_dbus_error)) {
+		GQuark _edomain = 0;
+		gint _ecode = 0;
+		if (strstr (_dbus_error.name, "org.freedesktop.DBus.Error") == _dbus_error.name) {
+			const char* _tmp5_;
+			_edomain = DBUS_GERROR;
+			_tmp5_ = _dbus_error.name + 27;
+			if (strcmp (_tmp5_, "Failed") == 0) {
+				_ecode = DBUS_GERROR_FAILED;
+			} else if (strcmp (_tmp5_, "NoMemory") == 0) {
+				_ecode = DBUS_GERROR_NO_MEMORY;
+			} else if (strcmp (_tmp5_, "ServiceUnknown") == 0) {
+				_ecode = DBUS_GERROR_SERVICE_UNKNOWN;
+			} else if (strcmp (_tmp5_, "NameHasNoOwner") == 0) {
+				_ecode = DBUS_GERROR_NAME_HAS_NO_OWNER;
+			} else if (strcmp (_tmp5_, "NoReply") == 0) {
+				_ecode = DBUS_GERROR_NO_REPLY;
+			} else if (strcmp (_tmp5_, "IOError") == 0) {
+				_ecode = DBUS_GERROR_IO_ERROR;
+			} else if (strcmp (_tmp5_, "BadAddress") == 0) {
+				_ecode = DBUS_GERROR_BAD_ADDRESS;
+			} else if (strcmp (_tmp5_, "NotSupported") == 0) {
+				_ecode = DBUS_GERROR_NOT_SUPPORTED;
+			} else if (strcmp (_tmp5_, "LimitsExceeded") == 0) {
+				_ecode = DBUS_GERROR_LIMITS_EXCEEDED;
+			} else if (strcmp (_tmp5_, "AccessDenied") == 0) {
+				_ecode = DBUS_GERROR_ACCESS_DENIED;
+			} else if (strcmp (_tmp5_, "AuthFailed") == 0) {
+				_ecode = DBUS_GERROR_AUTH_FAILED;
+			} else if (strcmp (_tmp5_, "NoServer") == 0) {
+				_ecode = DBUS_GERROR_NO_SERVER;
+			} else if (strcmp (_tmp5_, "Timeout") == 0) {
+				_ecode = DBUS_GERROR_TIMEOUT;
+			} else if (strcmp (_tmp5_, "NoNetwork") == 0) {
+				_ecode = DBUS_GERROR_NO_NETWORK;
+			} else if (strcmp (_tmp5_, "AddressInUse") == 0) {
+				_ecode = DBUS_GERROR_ADDRESS_IN_USE;
+			} else if (strcmp (_tmp5_, "Disconnected") == 0) {
+				_ecode = DBUS_GERROR_DISCONNECTED;
+			} else if (strcmp (_tmp5_, "InvalidArgs") == 0) {
+				_ecode = DBUS_GERROR_INVALID_ARGS;
+			} else if (strcmp (_tmp5_, "FileNotFound") == 0) {
+				_ecode = DBUS_GERROR_FILE_NOT_FOUND;
+			} else if (strcmp (_tmp5_, "FileExists") == 0) {
+				_ecode = DBUS_GERROR_FILE_EXISTS;
+			} else if (strcmp (_tmp5_, "UnknownMethod") == 0) {
+				_ecode = DBUS_GERROR_UNKNOWN_METHOD;
+			} else if (strcmp (_tmp5_, "TimedOut") == 0) {
+				_ecode = DBUS_GERROR_TIMED_OUT;
+			} else if (strcmp (_tmp5_, "MatchRuleNotFound") == 0) {
+				_ecode = DBUS_GERROR_MATCH_RULE_NOT_FOUND;
+			} else if (strcmp (_tmp5_, "MatchRuleInvalid") == 0) {
+				_ecode = DBUS_GERROR_MATCH_RULE_INVALID;
+			} else if (strcmp (_tmp5_, "Spawn.ExecFailed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_EXEC_FAILED;
+			} else if (strcmp (_tmp5_, "Spawn.ForkFailed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_FORK_FAILED;
+			} else if (strcmp (_tmp5_, "Spawn.ChildExited") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_CHILD_EXITED;
+			} else if (strcmp (_tmp5_, "Spawn.ChildSignaled") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_CHILD_SIGNALED;
+			} else if (strcmp (_tmp5_, "Spawn.Failed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_FAILED;
+			} else if (strcmp (_tmp5_, "UnixProcessIdUnknown") == 0) {
+				_ecode = DBUS_GERROR_UNIX_PROCESS_ID_UNKNOWN;
+			} else if (strcmp (_tmp5_, "InvalidSignature") == 0) {
+				_ecode = DBUS_GERROR_INVALID_SIGNATURE;
+			} else if (strcmp (_tmp5_, "InvalidFileContent") == 0) {
+				_ecode = DBUS_GERROR_INVALID_FILE_CONTENT;
+			} else if (strcmp (_tmp5_, "SELinuxSecurityContextUnknown") == 0) {
+				_ecode = DBUS_GERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN;
+			} else if (strcmp (_tmp5_, "RemoteException") == 0) {
+				_ecode = DBUS_GERROR_REMOTE_EXCEPTION;
+			}
+		}
+		g_set_error (error, _edomain, _ecode, "%s", _dbus_error.message);
+		dbus_error_free (&_dbus_error);
+		return FALSE;
+	}
+	if (strcmp (dbus_message_get_signature (_reply), "b")) {
+		g_set_error (error, DBUS_GERROR, DBUS_GERROR_INVALID_SIGNATURE, "Invalid signature, expected \"%s\", got \"%s\"", "b", dbus_message_get_signature (_reply));
+		dbus_message_unref (_reply);
+		return FALSE;
+	}
+	dbus_message_iter_init (_reply, &_iter);
+	dbus_message_iter_get_basic (&_iter, &_tmp4_);
+	dbus_message_iter_next (&_iter);
+	_result = _tmp4_;
+	dbus_message_unref (_reply);
+	return _result;
+}
+
+
+static void wnck_sync_matcher_dbus_proxy_register_desktop_file_for_pid (WnckSyncMatcher* self, const gchar* filename, gint32 pid, GError** error) {
+	DBusError _dbus_error;
+	DBusGConnection *_connection;
+	DBusMessage *_message, *_reply;
+	DBusMessageIter _iter;
+	const char* _tmp6_;
+	dbus_int32_t _tmp7_;
+	if (((WnckSyncMatcherDBusProxy*) self)->disposed) {
+		g_set_error (error, DBUS_GERROR, DBUS_GERROR_DISCONNECTED, "%s", "Connection is closed");
+		return;
+	}
+	_message = dbus_message_new_method_call (dbus_g_proxy_get_bus_name ((DBusGProxy*) self), dbus_g_proxy_get_path ((DBusGProxy*) self), "org.wncksync.Matcher", "RegisterDesktopFileForPid");
+	dbus_message_iter_init_append (_message, &_iter);
+	_tmp6_ = filename;
+	dbus_message_iter_append_basic (&_iter, DBUS_TYPE_STRING, &_tmp6_);
+	_tmp7_ = pid;
+	dbus_message_iter_append_basic (&_iter, DBUS_TYPE_INT32, &_tmp7_);
+	g_object_get (self, "connection", &_connection, NULL);
+	dbus_error_init (&_dbus_error);
+	_reply = dbus_connection_send_with_reply_and_block (dbus_g_connection_get_connection (_connection), _message, -1, &_dbus_error);
+	dbus_g_connection_unref (_connection);
+	dbus_message_unref (_message);
+	if (dbus_error_is_set (&_dbus_error)) {
+		GQuark _edomain = 0;
+		gint _ecode = 0;
+		if (strstr (_dbus_error.name, "org.freedesktop.DBus.Error") == _dbus_error.name) {
+			const char* _tmp8_;
+			_edomain = DBUS_GERROR;
+			_tmp8_ = _dbus_error.name + 27;
+			if (strcmp (_tmp8_, "Failed") == 0) {
+				_ecode = DBUS_GERROR_FAILED;
+			} else if (strcmp (_tmp8_, "NoMemory") == 0) {
+				_ecode = DBUS_GERROR_NO_MEMORY;
+			} else if (strcmp (_tmp8_, "ServiceUnknown") == 0) {
+				_ecode = DBUS_GERROR_SERVICE_UNKNOWN;
+			} else if (strcmp (_tmp8_, "NameHasNoOwner") == 0) {
+				_ecode = DBUS_GERROR_NAME_HAS_NO_OWNER;
+			} else if (strcmp (_tmp8_, "NoReply") == 0) {
+				_ecode = DBUS_GERROR_NO_REPLY;
+			} else if (strcmp (_tmp8_, "IOError") == 0) {
+				_ecode = DBUS_GERROR_IO_ERROR;
+			} else if (strcmp (_tmp8_, "BadAddress") == 0) {
+				_ecode = DBUS_GERROR_BAD_ADDRESS;
+			} else if (strcmp (_tmp8_, "NotSupported") == 0) {
+				_ecode = DBUS_GERROR_NOT_SUPPORTED;
+			} else if (strcmp (_tmp8_, "LimitsExceeded") == 0) {
+				_ecode = DBUS_GERROR_LIMITS_EXCEEDED;
+			} else if (strcmp (_tmp8_, "AccessDenied") == 0) {
+				_ecode = DBUS_GERROR_ACCESS_DENIED;
+			} else if (strcmp (_tmp8_, "AuthFailed") == 0) {
+				_ecode = DBUS_GERROR_AUTH_FAILED;
+			} else if (strcmp (_tmp8_, "NoServer") == 0) {
+				_ecode = DBUS_GERROR_NO_SERVER;
+			} else if (strcmp (_tmp8_, "Timeout") == 0) {
+				_ecode = DBUS_GERROR_TIMEOUT;
+			} else if (strcmp (_tmp8_, "NoNetwork") == 0) {
+				_ecode = DBUS_GERROR_NO_NETWORK;
+			} else if (strcmp (_tmp8_, "AddressInUse") == 0) {
+				_ecode = DBUS_GERROR_ADDRESS_IN_USE;
+			} else if (strcmp (_tmp8_, "Disconnected") == 0) {
+				_ecode = DBUS_GERROR_DISCONNECTED;
+			} else if (strcmp (_tmp8_, "InvalidArgs") == 0) {
+				_ecode = DBUS_GERROR_INVALID_ARGS;
+			} else if (strcmp (_tmp8_, "FileNotFound") == 0) {
+				_ecode = DBUS_GERROR_FILE_NOT_FOUND;
+			} else if (strcmp (_tmp8_, "FileExists") == 0) {
+				_ecode = DBUS_GERROR_FILE_EXISTS;
+			} else if (strcmp (_tmp8_, "UnknownMethod") == 0) {
+				_ecode = DBUS_GERROR_UNKNOWN_METHOD;
+			} else if (strcmp (_tmp8_, "TimedOut") == 0) {
+				_ecode = DBUS_GERROR_TIMED_OUT;
+			} else if (strcmp (_tmp8_, "MatchRuleNotFound") == 0) {
+				_ecode = DBUS_GERROR_MATCH_RULE_NOT_FOUND;
+			} else if (strcmp (_tmp8_, "MatchRuleInvalid") == 0) {
+				_ecode = DBUS_GERROR_MATCH_RULE_INVALID;
+			} else if (strcmp (_tmp8_, "Spawn.ExecFailed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_EXEC_FAILED;
+			} else if (strcmp (_tmp8_, "Spawn.ForkFailed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_FORK_FAILED;
+			} else if (strcmp (_tmp8_, "Spawn.ChildExited") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_CHILD_EXITED;
+			} else if (strcmp (_tmp8_, "Spawn.ChildSignaled") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_CHILD_SIGNALED;
+			} else if (strcmp (_tmp8_, "Spawn.Failed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_FAILED;
+			} else if (strcmp (_tmp8_, "UnixProcessIdUnknown") == 0) {
+				_ecode = DBUS_GERROR_UNIX_PROCESS_ID_UNKNOWN;
+			} else if (strcmp (_tmp8_, "InvalidSignature") == 0) {
+				_ecode = DBUS_GERROR_INVALID_SIGNATURE;
+			} else if (strcmp (_tmp8_, "InvalidFileContent") == 0) {
+				_ecode = DBUS_GERROR_INVALID_FILE_CONTENT;
+			} else if (strcmp (_tmp8_, "SELinuxSecurityContextUnknown") == 0) {
+				_ecode = DBUS_GERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN;
+			} else if (strcmp (_tmp8_, "RemoteException") == 0) {
+				_ecode = DBUS_GERROR_REMOTE_EXCEPTION;
+			}
+		}
+		g_set_error (error, _edomain, _ecode, "%s", _dbus_error.message);
+		dbus_error_free (&_dbus_error);
+		return;
+	}
+	if (strcmp (dbus_message_get_signature (_reply), "")) {
+		g_set_error (error, DBUS_GERROR, DBUS_GERROR_INVALID_SIGNATURE, "Invalid signature, expected \"%s\", got \"%s\"", "", dbus_message_get_signature (_reply));
+		dbus_message_unref (_reply);
+		return;
+	}
+	dbus_message_iter_init (_reply, &_iter);
+	dbus_message_unref (_reply);
+}
+
+
+static guint32* wnck_sync_matcher_dbus_proxy_xids_for_desktop_file (WnckSyncMatcher* self, const gchar* filename, int* result_length1, GError** error) {
+	DBusError _dbus_error;
+	DBusGConnection *_connection;
+	DBusMessage *_message, *_reply;
+	DBusMessageIter _iter;
+	const char* _tmp9_;
+	guint32* _result;
+	int _result_length1;
+	guint32* _tmp10_;
+	int _tmp10__length;
+	int _tmp10__size;
+	int _tmp10__length1;
+	DBusMessageIter _tmp11_;
+	if (((WnckSyncMatcherDBusProxy*) self)->disposed) {
+		g_set_error (error, DBUS_GERROR, DBUS_GERROR_DISCONNECTED, "%s", "Connection is closed");
+		return NULL;
+	}
+	_message = dbus_message_new_method_call (dbus_g_proxy_get_bus_name ((DBusGProxy*) self), dbus_g_proxy_get_path ((DBusGProxy*) self), "org.wncksync.Matcher", "XidsForDesktopFile");
+	dbus_message_iter_init_append (_message, &_iter);
+	_tmp9_ = filename;
+	dbus_message_iter_append_basic (&_iter, DBUS_TYPE_STRING, &_tmp9_);
+	g_object_get (self, "connection", &_connection, NULL);
+	dbus_error_init (&_dbus_error);
+	_reply = dbus_connection_send_with_reply_and_block (dbus_g_connection_get_connection (_connection), _message, -1, &_dbus_error);
+	dbus_g_connection_unref (_connection);
+	dbus_message_unref (_message);
+	if (dbus_error_is_set (&_dbus_error)) {
+		GQuark _edomain = 0;
+		gint _ecode = 0;
+		if (strstr (_dbus_error.name, "org.freedesktop.DBus.Error") == _dbus_error.name) {
+			const char* _tmp13_;
+			_edomain = DBUS_GERROR;
+			_tmp13_ = _dbus_error.name + 27;
+			if (strcmp (_tmp13_, "Failed") == 0) {
+				_ecode = DBUS_GERROR_FAILED;
+			} else if (strcmp (_tmp13_, "NoMemory") == 0) {
+				_ecode = DBUS_GERROR_NO_MEMORY;
+			} else if (strcmp (_tmp13_, "ServiceUnknown") == 0) {
+				_ecode = DBUS_GERROR_SERVICE_UNKNOWN;
+			} else if (strcmp (_tmp13_, "NameHasNoOwner") == 0) {
+				_ecode = DBUS_GERROR_NAME_HAS_NO_OWNER;
+			} else if (strcmp (_tmp13_, "NoReply") == 0) {
+				_ecode = DBUS_GERROR_NO_REPLY;
+			} else if (strcmp (_tmp13_, "IOError") == 0) {
+				_ecode = DBUS_GERROR_IO_ERROR;
+			} else if (strcmp (_tmp13_, "BadAddress") == 0) {
+				_ecode = DBUS_GERROR_BAD_ADDRESS;
+			} else if (strcmp (_tmp13_, "NotSupported") == 0) {
+				_ecode = DBUS_GERROR_NOT_SUPPORTED;
+			} else if (strcmp (_tmp13_, "LimitsExceeded") == 0) {
+				_ecode = DBUS_GERROR_LIMITS_EXCEEDED;
+			} else if (strcmp (_tmp13_, "AccessDenied") == 0) {
+				_ecode = DBUS_GERROR_ACCESS_DENIED;
+			} else if (strcmp (_tmp13_, "AuthFailed") == 0) {
+				_ecode = DBUS_GERROR_AUTH_FAILED;
+			} else if (strcmp (_tmp13_, "NoServer") == 0) {
+				_ecode = DBUS_GERROR_NO_SERVER;
+			} else if (strcmp (_tmp13_, "Timeout") == 0) {
+				_ecode = DBUS_GERROR_TIMEOUT;
+			} else if (strcmp (_tmp13_, "NoNetwork") == 0) {
+				_ecode = DBUS_GERROR_NO_NETWORK;
+			} else if (strcmp (_tmp13_, "AddressInUse") == 0) {
+				_ecode = DBUS_GERROR_ADDRESS_IN_USE;
+			} else if (strcmp (_tmp13_, "Disconnected") == 0) {
+				_ecode = DBUS_GERROR_DISCONNECTED;
+			} else if (strcmp (_tmp13_, "InvalidArgs") == 0) {
+				_ecode = DBUS_GERROR_INVALID_ARGS;
+			} else if (strcmp (_tmp13_, "FileNotFound") == 0) {
+				_ecode = DBUS_GERROR_FILE_NOT_FOUND;
+			} else if (strcmp (_tmp13_, "FileExists") == 0) {
+				_ecode = DBUS_GERROR_FILE_EXISTS;
+			} else if (strcmp (_tmp13_, "UnknownMethod") == 0) {
+				_ecode = DBUS_GERROR_UNKNOWN_METHOD;
+			} else if (strcmp (_tmp13_, "TimedOut") == 0) {
+				_ecode = DBUS_GERROR_TIMED_OUT;
+			} else if (strcmp (_tmp13_, "MatchRuleNotFound") == 0) {
+				_ecode = DBUS_GERROR_MATCH_RULE_NOT_FOUND;
+			} else if (strcmp (_tmp13_, "MatchRuleInvalid") == 0) {
+				_ecode = DBUS_GERROR_MATCH_RULE_INVALID;
+			} else if (strcmp (_tmp13_, "Spawn.ExecFailed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_EXEC_FAILED;
+			} else if (strcmp (_tmp13_, "Spawn.ForkFailed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_FORK_FAILED;
+			} else if (strcmp (_tmp13_, "Spawn.ChildExited") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_CHILD_EXITED;
+			} else if (strcmp (_tmp13_, "Spawn.ChildSignaled") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_CHILD_SIGNALED;
+			} else if (strcmp (_tmp13_, "Spawn.Failed") == 0) {
+				_ecode = DBUS_GERROR_SPAWN_FAILED;
+			} else if (strcmp (_tmp13_, "UnixProcessIdUnknown") == 0) {
+				_ecode = DBUS_GERROR_UNIX_PROCESS_ID_UNKNOWN;
+			} else if (strcmp (_tmp13_, "InvalidSignature") == 0) {
+				_ecode = DBUS_GERROR_INVALID_SIGNATURE;
+			} else if (strcmp (_tmp13_, "InvalidFileContent") == 0) {
+				_ecode = DBUS_GERROR_INVALID_FILE_CONTENT;
+			} else if (strcmp (_tmp13_, "SELinuxSecurityContextUnknown") == 0) {
+				_ecode = DBUS_GERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN;
+			} else if (strcmp (_tmp13_, "RemoteException") == 0) {
+				_ecode = DBUS_GERROR_REMOTE_EXCEPTION;
+			}
+		}
+		g_set_error (error, _edomain, _ecode, "%s", _dbus_error.message);
+		dbus_error_free (&_dbus_error);
+		return NULL;
+	}
+	if (strcmp (dbus_message_get_signature (_reply), "au")) {
+		g_set_error (error, DBUS_GERROR, DBUS_GERROR_INVALID_SIGNATURE, "Invalid signature, expected \"%s\", got \"%s\"", "au", dbus_message_get_signature (_reply));
+		dbus_message_unref (_reply);
+		return NULL;
+	}
+	dbus_message_iter_init (_reply, &_iter);
+	_result_length1 = 0;
+	_tmp10_ = g_new (guint32, 5);
+	_tmp10__length = 0;
+	_tmp10__size = 4;
+	_tmp10__length1 = 0;
+	dbus_message_iter_recurse (&_iter, &_tmp11_);
+	for (; dbus_message_iter_get_arg_type (&_tmp11_); _tmp10__length1++) {
+		dbus_uint32_t _tmp12_;
+		if (_tmp10__size == _tmp10__length) {
+			_tmp10__size = 2 * _tmp10__size;
+			_tmp10_ = g_renew (guint32, _tmp10_, _tmp10__size + 1);
+		}
+		dbus_message_iter_get_basic (&_tmp11_, &_tmp12_);
+		dbus_message_iter_next (&_tmp11_);
+		_tmp10_[_tmp10__length++] = _tmp12_;
+	}
+	_result_length1 = _tmp10__length1;
+	dbus_message_iter_next (&_iter);
+	_result = _tmp10_;
+	*result_length1 = _result_length1;
+	dbus_message_unref (_reply);
+	return _result;
+}
+
+
+static void wnck_sync_matcher_dbus_proxy_wnck_sync_matcher__interface_init (WnckSyncMatcherIface* iface) {
+	iface->desktop_file_for_xid = wnck_sync_matcher_dbus_proxy_desktop_file_for_xid;
+	iface->window_match_is_ready = wnck_sync_matcher_dbus_proxy_window_match_is_ready;
+	iface->register_desktop_file_for_pid = wnck_sync_matcher_dbus_proxy_register_desktop_file_for_pid;
+	iface->xids_for_desktop_file = wnck_sync_matcher_dbus_proxy_xids_for_desktop_file;
+}
+
+
+static void _vala_wnck_sync_matcher_dbus_proxy_get_property (GObject * object, guint property_id, GValue * value, GParamSpec * pspec) {
+}
+
+
+static void _vala_wnck_sync_matcher_dbus_proxy_set_property (GObject * object, guint property_id, const GValue * value, GParamSpec * pspec) {
+}
+
+
+static gchar** _vala_array_dup1 (gchar** self, int length) {
+	gchar** result;
+	int i;
+	result = g_new0 (gchar*, length + 1);
+	for (i = 0; i < length; i++) {
+		result[i] = g_strdup (self[i]);
+	}
+	return result;
+}
+
+
+void desktop_file_info_copy (const DesktopFileInfo* self, DesktopFileInfo* dest) {
+	gchar** _tmp0_;
+	dest->name = g_strdup (self->name);
+	dest->mimetypes = (_tmp0_ = self->mimetypes, (_tmp0_ == NULL) ? ((gpointer) _tmp0_) : _vala_array_dup1 (_tmp0_, (*self).mimetypes_length1));
+	dest->mimetypes_length1 = self->mimetypes_length1;
+}
+
+
+void desktop_file_info_destroy (DesktopFileInfo* self) {
+	_g_free0 ((*self).name);
+	(*self).mimetypes = (_vala_array_free ((*self).mimetypes, (*self).mimetypes_length1, (GDestroyNotify) g_free), NULL);
+}
+
+
+DesktopFileInfo* desktop_file_info_dup (const DesktopFileInfo* self) {
+	DesktopFileInfo* dup;
+	dup = g_new0 (DesktopFileInfo, 1);
+	desktop_file_info_copy (self, dup);
+	return dup;
+}
+
+
+void desktop_file_info_free (DesktopFileInfo* self) {
+	desktop_file_info_destroy (self);
+	g_free (self);
+}
+
+
+GType desktop_file_info_get_type (void) {
+	static volatile gsize desktop_file_info_type_id__volatile = 0;
+	if (g_once_init_enter (&desktop_file_info_type_id__volatile)) {
+		GType desktop_file_info_type_id;
+		desktop_file_info_type_id = g_boxed_type_register_static ("DesktopFileInfo", (GBoxedCopyFunc) desktop_file_info_dup, (GBoxedFreeFunc) desktop_file_info_free);
+		g_once_init_leave (&desktop_file_info_type_id__volatile, desktop_file_info_type_id);
+	}
+	return desktop_file_info_type_id__volatile;
+}
+
+
+static void _g_free0_ (gpointer var) {
+	var = (g_free (var), NULL);
+}
+
+
+static void _desktop_file_info_free0_ (gpointer var) {
+	(var == NULL) ? NULL : (var = (desktop_file_info_free (var), NULL));
+}
+
+
+static void _related_applet_window_opened_wnck_screen_window_opened (WnckScreen* _sender, WnckWindow* window, gpointer self) {
+	related_applet_window_opened (self, window);
+}
+
+
+static void _related_applet_window_changed_wnck_screen_active_window_changed (WnckScreen* _sender, WnckWindow* previous_window, gpointer self) {
+	related_applet_window_changed (self, previous_window);
+}
+
+
+static void _related_applet_on_clicked_awn_applet_simple_clicked (AwnAppletSimple* _sender, gpointer self) {
+	related_applet_on_clicked (self);
+}
+
+
+RelatedApplet* related_applet_construct (GType object_type, const gchar* canonical_name, const gchar* uid, gint panel_id) {
+	RelatedApplet * self = NULL;
+	GHashTable* _tmp0_ = NULL;
+	WnckScreen* _tmp1_ = NULL;
+	AwnDialog* _tmp2_ = NULL;
+	g_return_val_if_fail (canonical_name != NULL, NULL);
+	g_return_val_if_fail (uid != NULL, NULL);
+	self = (RelatedApplet*) g_object_new (object_type, "canonical-name", canonical_name, "uid", uid, "panel-id", panel_id, NULL);
+	_tmp0_ = g_hash_table_new_full (g_str_hash, g_str_equal, _g_free0_, _desktop_file_info_free0_);
+	_g_hash_table_unref0 (self->priv->desktop_file_info);
+	self->priv->desktop_file_info = _tmp0_;
+	_tmp1_ = wnck_screen_get_default ();
+	self->priv->wnck_screen = _tmp1_;
+	wnck_set_client_type (WNCK_CLIENT_TYPE_PAGER);
+	g_signal_connect_object (self->priv->wnck_screen, "window-opened", (GCallback) _related_applet_window_opened_wnck_screen_window_opened, self, 0);
+	g_signal_connect_object (self->priv->wnck_screen, "active-window-changed", (GCallback) _related_applet_window_changed_wnck_screen_active_window_changed, self, 0);
+	awn_overlayable_add_overlay ((AwnOverlayable*) self, self->priv->throbber);
+	awn_overlayable_add_overlay ((AwnOverlayable*) self, self->priv->star_overlay);
+	awn_applet_simple_set_icon_name ((AwnAppletSimple*) self, "zeitgeist-logo");
+	g_signal_connect_object ((AwnAppletSimple*) self, "clicked", (GCallback) _related_applet_on_clicked_awn_applet_simple_clicked, self, 0);
+	_tmp2_ = (AwnDialog*) awn_dialog_new_for_widget ((GtkWidget*) self);
+	_g_object_unref0 (self->priv->dialog);
+	self->priv->dialog = g_object_ref_sink (_tmp2_);
+	return self;
+}
+
+
+RelatedApplet* related_applet_new (const gchar* canonical_name, const gchar* uid, gint panel_id) {
+	return related_applet_construct (TYPE_RELATED_APPLET, canonical_name, uid, panel_id);
+}
+
+
+static gpointer _desktop_file_info_dup0 (gpointer self) {
+	return self ? desktop_file_info_dup (self) : NULL;
+}
+
+
+static void related_applet_window_opened (RelatedApplet* self, WnckWindow* window) {
+	const gchar* _tmp0_ = NULL;
+	gchar* _tmp1_;
+	gchar* desktop_file;
+	gchar* _tmp20_;
+	GError * _inner_error_ = NULL;
+	g_return_if_fail (self != NULL);
+	g_return_if_fail (window != NULL);
+	_tmp0_ = awn_desktop_lookup_search_by_wnck_window (self->priv->lookup, window);
+	_tmp1_ = g_strdup (_tmp0_);
+	desktop_file = _tmp1_;
+	if (desktop_file == NULL) {
+		DBusGConnection* _tmp2_ = NULL;
+		DBusGConnection* con;
+		WnckSyncMatcher* matcher;
+		gulong _tmp3_;
+		gchar* _tmp4_ = NULL;
+		gchar* df;
+		gboolean _tmp5_ = FALSE;
+		_tmp2_ = dbus_g_bus_get (DBUS_BUS_SESSION, &_inner_error_);
+		con = _tmp2_;
+		if (_inner_error_ != NULL) {
+			goto __catch0_g_error;
+		}
+		matcher = wnck_sync_matcher_dbus_proxy_new (con, "org.wncksync.Matcher", "/org/wncksync/Matcher");
+		_tmp3_ = wnck_window_get_xid (window);
+		_tmp4_ = wnck_sync_matcher_desktop_file_for_xid (matcher, (guint32) _tmp3_, &_inner_error_);
+		df = _tmp4_;
+		if (_inner_error_ != NULL) {
+			_g_object_unref0 (matcher);
+			_dbus_g_connection_unref0 (con);
+			goto __catch0_g_error;
+		}
+		if (df != NULL) {
+			_tmp5_ = g_strcmp0 (df, "") != 0;
+		} else {
+			_tmp5_ = FALSE;
+		}
+		if (_tmp5_) {
+			gchar* _tmp6_;
+			g_debug ("related-applet.vala:107: wncksync found match: %s", df);
+			_tmp6_ = g_strdup (df);
+			_g_free0 (desktop_file);
+			desktop_file = _tmp6_;
+		}
+		_g_free0 (df);
+		_g_object_unref0 (matcher);
+		_dbus_g_connection_unref0 (con);
+		goto __finally0;
+		__catch0_g_error:
+		{
+			GError * err;
+			err = _inner_error_;
+			_inner_error_ = NULL;
+			_g_error_free0 (err);
+		}
+		__finally0:
+		if (_inner_error_ != NULL) {
+			_g_free0 (desktop_file);
+			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+			g_clear_error (&_inner_error_);
+			return;
+		}
+	}
+	if (desktop_file != NULL) {
+		DesktopFileInfo* df_data = NULL;
+		gconstpointer _tmp7_ = NULL;
+		_tmp7_ = g_hash_table_lookup (self->priv->desktop_file_info, desktop_file);
+		df_data = (DesktopFileInfo*) _tmp7_;
+		if (df_data == NULL) {
+			GKeyFile* _tmp8_ = NULL;
+			GKeyFile* keyfile;
+			gchar** _tmp9_ = NULL;
+			gchar** mimetypes;
+			gint mimetypes_length1;
+			gint _mimetypes_size_;
+			gchar* _tmp10_;
+			gchar* app_name;
+			gchar* _tmp11_ = NULL;
+			gchar* _tmp12_;
+			gsize _tmp13_;
+			gchar** _tmp14_ = NULL;
+			gchar** _tmp15_;
+			gint _tmp15__length1;
+			gint __tmp15__size_;
+			DesktopFileInfo w = {0};
+			gchar* _tmp16_;
+			gchar** _tmp17_;
+			gchar* _tmp18_;
+			DesktopFileInfo* _tmp19_;
+			_tmp8_ = g_key_file_new ();
+			keyfile = _tmp8_;
+			_tmp9_ = g_new0 (gchar*, 0 + 1);
+			mimetypes = _tmp9_;
+			mimetypes_length1 = 0;
+			_mimetypes_size_ = 0;
+			_tmp10_ = g_strdup ("");
+			app_name = _tmp10_;
+			g_key_file_load_from_file (keyfile, desktop_file, G_KEY_FILE_NONE, &_inner_error_);
+			if (_inner_error_ != NULL) {
+				goto __catch1_g_error;
+			}
+			_tmp11_ = g_key_file_get_locale_string (keyfile, "Desktop Entry", "Name", NULL, &_inner_error_);
+			_tmp12_ = _tmp11_;
+			if (_inner_error_ != NULL) {
+				goto __catch1_g_error;
+			}
+			_g_free0 (app_name);
+			app_name = _tmp12_;
+			_tmp14_ = g_key_file_get_string_list (keyfile, "Desktop Entry", "MimeType", &_tmp13_, &_inner_error_);
+			_tmp15_ = _tmp14_;
+			_tmp15__length1 = _tmp13_;
+			__tmp15__size_ = _tmp13_;
+			if (_inner_error_ != NULL) {
+				goto __catch1_g_error;
+			}
+			mimetypes = (_vala_array_free (mimetypes, mimetypes_length1, (GDestroyNotify) g_free), NULL);
+			mimetypes = _tmp15_;
+			mimetypes_length1 = _tmp15__length1;
+			_mimetypes_size_ = _tmp15__length1;
+			goto __finally1;
+			__catch1_g_error:
+			{
+				GError * err;
+				err = _inner_error_;
+				_inner_error_ = NULL;
+				_g_error_free0 (err);
+			}
+			__finally1:
+			if (_inner_error_ != NULL) {
+				_g_free0 (app_name);
+				mimetypes = (_vala_array_free (mimetypes, mimetypes_length1, (GDestroyNotify) g_free), NULL);
+				_g_key_file_free0 (keyfile);
+				_g_free0 (desktop_file);
+				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+				g_clear_error (&_inner_error_);
+				return;
+			}
+			memset (&w, 0, sizeof (DesktopFileInfo));
+			_tmp16_ = app_name;
+			app_name = NULL;
+			_g_free0 (w.name);
+			w.name = _tmp16_;
+			_tmp17_ = mimetypes;
+			mimetypes = NULL;
+			w.mimetypes = (_vala_array_free (w.mimetypes, w.mimetypes_length1, (GDestroyNotify) g_free), NULL);
+			w.mimetypes = _tmp17_;
+			w.mimetypes_length1 = mimetypes_length1;
+			w._mimetypes_size_ = mimetypes_length1;
+			_tmp18_ = g_strdup (desktop_file);
+			_tmp19_ = _desktop_file_info_dup0 (&w);
+			g_hash_table_insert (self->priv->desktop_file_info, _tmp18_, _tmp19_);
+			desktop_file_info_destroy (&w);
+			_g_free0 (app_name);
+			mimetypes = (_vala_array_free (mimetypes, mimetypes_length1, (GDestroyNotify) g_free), NULL);
+			_g_key_file_free0 (keyfile);
+		}
+	}
+	_tmp20_ = g_strdup (desktop_file);
+	g_object_set_data_full ((GObject*) window, "desktop-file-path", _tmp20_, g_free);
+	_g_free0 (desktop_file);
+}
+
+
+static gpointer _g_object_ref0 (gpointer self) {
+	return self ? g_object_ref (self) : NULL;
+}
+
+
+static void related_applet_window_changed (RelatedApplet* self, WnckWindow* old_window) {
+	WnckWindow* _tmp0_ = NULL;
+	WnckWindow* _tmp1_;
+	WnckWindow* active;
+	g_return_if_fail (self != NULL);
+	_tmp0_ = wnck_screen_get_active_window (self->priv->wnck_screen);
+	_tmp1_ = _g_object_ref0 (_tmp0_);
+	active = _tmp1_;
+	if (active != NULL) {
+		gconstpointer _tmp2_ = NULL;
+		gchar* _tmp3_;
+		gchar* desktop_file;
+		_tmp2_ = g_object_get_data ((GObject*) active, "desktop-file-path");
+		_tmp3_ = g_strdup ((const gchar*) _tmp2_);
+		desktop_file = _tmp3_;
+		if (desktop_file != NULL) {
+			related_applet_update_star (self, desktop_file, NULL, NULL);
+		} else {
+			g_object_set (self->priv->star_overlay, "active", FALSE, NULL);
+		}
+		_g_free0 (desktop_file);
+	}
+	_g_object_unref0 (active);
+}
+
+
+static void related_applet_update_star_data_free (gpointer _data) {
+	RelatedAppletUpdateStarData* data;
+	data = _data;
+	_g_free0 (data->desktop_file);
+	_g_object_unref0 (data->self);
+	g_slice_free (RelatedAppletUpdateStarData, data);
+}
+
+
+static void related_applet_update_star (RelatedApplet* self, const gchar* desktop_file, GAsyncReadyCallback _callback_, gpointer _user_data_) {
+	RelatedAppletUpdateStarData* _data_;
+	_data_ = g_slice_new0 (RelatedAppletUpdateStarData);
+	_data_->_async_result = g_simple_async_result_new (G_OBJECT (self), _callback_, _user_data_, related_applet_update_star);
+	g_simple_async_result_set_op_res_gpointer (_data_->_async_result, _data_, related_applet_update_star_data_free);
+	_data_->self = _g_object_ref0 (self);
+	_data_->desktop_file = g_strdup (desktop_file);
+	related_applet_update_star_co (_data_);
+}
+
+
+static void related_applet_update_star_finish (RelatedApplet* self, GAsyncResult* _res_) {
+	RelatedAppletUpdateStarData* _data_;
+	_data_ = g_simple_async_result_get_op_res_gpointer (G_SIMPLE_ASYNC_RESULT (_res_));
+}
+
+
+static void related_applet_update_star_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_) {
+	RelatedAppletUpdateStarData* data;
+	data = _user_data_;
+	data->_source_object_ = source_object;
+	data->_res_ = _res_;
+	related_applet_update_star_co (data);
+}
+
+
+static void _g_object_unref0_ (gpointer var) {
+	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
+}
+
+
+static void _g_list_free__g_object_unref0_ (GList* self) {
+	g_list_foreach (self, (GFunc) _g_object_unref0_, NULL);
+	g_list_free (self);
+}
+
+
+static gboolean related_applet_update_star_co (RelatedAppletUpdateStarData* data) {
+	switch (data->_state_) {
+		case 0:
+		goto _state_0;
+		case 1:
+		goto _state_1;
+		default:
+		g_assert_not_reached ();
+	}
+	_state_0:
+	data->_tmp0_ = NULL;
+	data->_tmp0_ = g_ptr_array_new ();
+	data->ptr_array = data->_tmp0_;
+	data->_tmp1_ = NULL;
+	data->_tmp1_ = g_path_get_basename (data->desktop_file);
+	data->actor = data->_tmp1_;
+	data->_tmp2_ = NULL;
+	data->_tmp2_ = zeitgeist_event_new ();
+	data->event = g_object_ref_sink (data->_tmp2_);
+	data->helper_event_list = NULL;
+	data->_tmp3_ = g_strconcat ("application://", data->actor, NULL);
+	data->_tmp4_ = data->_tmp3_;
+	zeitgeist_event_set_actor (data->event, data->_tmp4_);
+	_g_free0 (data->_tmp4_);
+	g_ptr_array_add (data->ptr_array, data->event);
+	data->_tmp5_ = NULL;
+	data->_tmp5_ = g_hash_table_lookup (data->self->priv->desktop_file_info, data->desktop_file);
+	data->df_data = (DesktopFileInfo*) data->_tmp5_;
+	if (data->df_data != NULL) {
+		data->_tmp6_ = (*data->df_data).mimetypes_length1 > 0;
+	} else {
+		data->_tmp6_ = FALSE;
+	}
+	if (data->_tmp6_) {
+		{
+			data->mimetype_collection = (*data->df_data).mimetypes;
+			data->mimetype_collection_length1 = (*data->df_data).mimetypes_length1;
+			for (data->mimetype_it = 0; data->mimetype_it < (*data->df_data).mimetypes_length1; data->mimetype_it = data->mimetype_it + 1) {
+				data->mimetype = data->mimetype_collection[data->mimetype_it];
+				{
+					data->_tmp7_ = NULL;
+					data->_tmp7_ = zeitgeist_event_new ();
+					data->mime_event = g_object_ref_sink (data->_tmp7_);
+					data->_tmp8_ = NULL;
+					data->_tmp8_ = zeitgeist_subject_new ();
+					data->subject = g_object_ref_sink (data->_tmp8_);
+					zeitgeist_subject_set_mimetype (data->subject, data->mimetype);
+					zeitgeist_event_add_subject (data->mime_event, data->subject);
+					data->_tmp9_ = _g_object_ref0 (data->mime_event);
+					data->helper_event_list = g_list_prepend (data->helper_event_list, data->_tmp9_);
+					g_ptr_array_add (data->ptr_array, data->mime_event);
+					_g_object_unref0 (data->subject);
+					_g_object_unref0 (data->mime_event);
+				}
+			}
+		}
+	}
+	data->_tmp10_ = NULL;
+	data->_tmp10_ = zeitgeist_time_range_new_to_now ();
+	data->_tmp11_ = g_object_ref_sink (data->_tmp10_);
+	data->_tmp12_ = data->ptr_array;
+	data->ptr_array = NULL;
+	data->_state_ = 1;
+	zeitgeist_log_find_event_ids (data->self->priv->zg_log, data->_tmp11_, data->_tmp12_, ZEITGEIST_STORAGE_STATE_ANY, (guint32) 1, ZEITGEIST_RESULT_TYPE_MOST_RECENT_EVENTS, NULL, related_applet_update_star_ready, data);
+	return FALSE;
+	_state_1:
+	data->_tmp13_ = NULL;
+	data->_tmp13_ = zeitgeist_log_find_event_ids_finish (data->self->priv->zg_log, data->_res_, &data->_inner_error_);
+	data->_tmp14_ = data->_tmp13_;
+	_g_object_unref0 (data->_tmp11_);
+	data->events = data->_tmp14_;
+	if (data->_inner_error_ != NULL) {
+		__g_list_free__g_object_unref0_0 (data->helper_event_list);
+		_g_object_unref0 (data->event);
+		_g_free0 (data->actor);
+		_g_ptr_array_free0 (data->ptr_array);
+		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, data->_inner_error_->message, g_quark_to_string (data->_inner_error_->domain), data->_inner_error_->code);
+		g_clear_error (&data->_inner_error_);
+		return FALSE;
+	}
+	g_object_set (data->self->priv->star_overlay, "active", data->events->len > 0, NULL);
+	if (data->events->len > 0) {
+		data->_tmp16_ = NULL;
+		data->_tmp16_ = g_strdup_printf ("Show items related to %s", (*data->df_data).name);
+		_g_free0 (data->_tmp15_);
+		data->_tmp15_ = data->_tmp16_;
+	} else {
+		_g_free0 (data->_tmp15_);
+		data->_tmp15_ = NULL;
+	}
+	awn_applet_simple_set_tooltip_text ((AwnAppletSimple*) data->self, data->_tmp15_);
+	_g_free0 (data->_tmp15_);
+	_g_array_free0 (data->events);
+	__g_list_free__g_object_unref0_0 (data->helper_event_list);
+	_g_object_unref0 (data->event);
+	_g_free0 (data->actor);
+	_g_ptr_array_free0 (data->ptr_array);
+	if (data->_state_ == 0) {
+		g_simple_async_result_complete_in_idle (data->_async_result);
+	} else {
+		g_simple_async_result_complete (data->_async_result);
+	}
+	g_object_unref (data->_async_result);
+	return FALSE;
+}
+
+
+static void related_applet_get_recent_by_mimetype_data_free (gpointer _data) {
+	RelatedAppletGetRecentByMimetypeData* data;
+	data = _data;
+	data->mimetypes = (_vala_array_free (data->mimetypes, data->mimetypes_length1, (GDestroyNotify) g_free), NULL);
+	_g_object_unref0 (data->self);
+	g_slice_free (RelatedAppletGetRecentByMimetypeData, data);
+}
+
+
+static gchar** _vala_array_dup2 (gchar** self, int length) {
+	gchar** result;
+	int i;
+	result = g_new0 (gchar*, length + 1);
+	for (i = 0; i < length; i++) {
+		result[i] = g_strdup (self[i]);
+	}
+	return result;
+}
+
+
+static void related_applet_get_recent_by_mimetype (RelatedApplet* self, gchar** mimetypes, int mimetypes_length1, GAsyncReadyCallback _callback_, gpointer _user_data_) {
+	RelatedAppletGetRecentByMimetypeData* _data_;
+	gchar** _tmp0_;
+	_data_ = g_slice_new0 (RelatedAppletGetRecentByMimetypeData);
+	_data_->_async_result = g_simple_async_result_new (G_OBJECT (self), _callback_, _user_data_, related_applet_get_recent_by_mimetype);
+	g_simple_async_result_set_op_res_gpointer (_data_->_async_result, _data_, related_applet_get_recent_by_mimetype_data_free);
+	_data_->self = _g_object_ref0 (self);
+	_data_->mimetypes = (_tmp0_ = mimetypes, (_tmp0_ == NULL) ? ((gpointer) _tmp0_) : _vala_array_dup2 (_tmp0_, mimetypes_length1));
+	_data_->mimetypes_length1 = mimetypes_length1;
+	related_applet_get_recent_by_mimetype_co (_data_);
+}
+
+
+static gboolean related_applet_get_recent_by_mimetype_finish (RelatedApplet* self, GAsyncResult* _res_) {
+	gboolean result;
+	RelatedAppletGetRecentByMimetypeData* _data_;
+	_data_ = g_simple_async_result_get_op_res_gpointer (G_SIMPLE_ASYNC_RESULT (_res_));
+	result = _data_->result;
+	return result;
+}
+
+
+static void related_applet_get_recent_by_mimetype_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_) {
+	RelatedAppletGetRecentByMimetypeData* data;
+	data = _user_data_;
+	data->_source_object_ = source_object;
+	data->_res_ = _res_;
+	related_applet_get_recent_by_mimetype_co (data);
+}
+
+
+static gboolean related_applet_get_recent_by_mimetype_co (RelatedAppletGetRecentByMimetypeData* data) {
+	switch (data->_state_) {
+		case 0:
+		goto _state_0;
+		case 1:
+		goto _state_1;
+		default:
+		g_assert_not_reached ();
+	}
+	_state_0:
+	data->helper_event_list = NULL;
+	data->_tmp0_ = NULL;
+	data->_tmp0_ = g_ptr_array_new ();
+	data->ptr_array = data->_tmp0_;
+	{
+		data->mimetype_collection = data->mimetypes;
+		data->mimetype_collection_length1 = data->mimetypes_length1;
+		for (data->mimetype_it = 0; data->mimetype_it < data->mimetypes_length1; data->mimetype_it = data->mimetype_it + 1) {
+			data->mimetype = data->mimetype_collection[data->mimetype_it];
+			{
+				data->_tmp1_ = NULL;
+				data->_tmp1_ = zeitgeist_event_new ();
+				data->event = g_object_ref_sink (data->_tmp1_);
+				data->_tmp2_ = NULL;
+				data->_tmp2_ = zeitgeist_subject_new ();
+				data->subject = g_object_ref_sink (data->_tmp2_);
+				zeitgeist_subject_set_mimetype (data->subject, data->mimetype);
+				zeitgeist_event_add_subject (data->event, data->subject);
+				data->_tmp3_ = _g_object_ref0 (data->event);
+				data->helper_event_list = g_list_prepend (data->helper_event_list, data->_tmp3_);
+				g_ptr_array_add (data->ptr_array, data->event);
+				_g_object_unref0 (data->subject);
+				_g_object_unref0 (data->event);
+			}
+		}
+	}
+	data->_tmp4_ = NULL;
+	data->_tmp4_ = zeitgeist_time_range_new_to_now ();
+	data->_tmp5_ = g_object_ref_sink (data->_tmp4_);
+	data->_tmp6_ = data->ptr_array;
+	data->ptr_array = NULL;
+	data->_state_ = 1;
+	zeitgeist_log_find_events (data->self->priv->zg_log, data->_tmp5_, data->_tmp6_, ZEITGEIST_STORAGE_STATE_ANY, (guint32) 16, ZEITGEIST_RESULT_TYPE_MOST_RECENT_SUBJECTS, NULL, related_applet_get_recent_by_mimetype_ready, data);
+	return FALSE;
+	_state_1:
+	data->_tmp7_ = NULL;
+	data->_tmp7_ = zeitgeist_log_find_events_finish (data->self->priv->zg_log, data->_res_, &data->_inner_error_);
+	data->_tmp8_ = data->_tmp7_;
+	_g_object_unref0 (data->_tmp5_);
+	data->_tmp9_ = data->_tmp8_;
+	if (data->_inner_error_ != NULL) {
+		goto __catch2_g_error;
+	}
+	_g_object_unref0 (data->events);
+	data->events = data->_tmp9_;
+	goto __finally2;
+	__catch2_g_error:
+	{
+		data->err = data->_inner_error_;
+		data->_inner_error_ = NULL;
+		data->result = FALSE;
+		_g_error_free0 (data->err);
+		_g_object_unref0 (data->events);
+		_g_ptr_array_free0 (data->ptr_array);
+		__g_list_free__g_object_unref0_0 (data->helper_event_list);
+		if (data->_state_ == 0) {
+			g_simple_async_result_complete_in_idle (data->_async_result);
+		} else {
+			g_simple_async_result_complete (data->_async_result);
+		}
+		g_object_unref (data->_async_result);
+		return FALSE;
+	}
+	__finally2:
+	if (data->_inner_error_ != NULL) {
+		_g_object_unref0 (data->events);
+		_g_ptr_array_free0 (data->ptr_array);
+		__g_list_free__g_object_unref0_0 (data->helper_event_list);
+		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, data->_inner_error_->message, g_quark_to_string (data->_inner_error_->domain), data->_inner_error_->code);
+		g_clear_error (&data->_inner_error_);
+		return FALSE;
+	}
+	data->results_pushed = 0;
+	{
+		data->_tmp10_ = NULL;
+		data->_tmp10_ = _vala_zeitgeist_result_set_iterator (data->events);
+		data->_e_it = data->_tmp10_;
+		while (TRUE) {
+			data->_tmp11_ = NULL;
+			data->_tmp11_ = _vala_zeitgeist_result_set_next_value (data->_e_it);
+			data->e = data->_tmp11_;
+			if (!(data->e != NULL)) {
+				break;
+			}
+			data->_tmp12_ = zeitgeist_event_num_subjects (data->e);
+			if (data->_tmp12_ > 0) {
+				data->_tmp13_ = NULL;
+				data->_tmp13_ = zeitgeist_event_get_subject (data->e, 0);
+				data->_tmp14_ = _g_object_ref0 (data->_tmp13_);
+				data->s = data->_tmp14_;
+				if (data->results_pushed < 3) {
+					data->_tmp16_ = related_applet_push_result (data->self, data->e, data->s);
+					data->_tmp15_ = data->_tmp16_;
+				} else {
+					data->_tmp15_ = FALSE;
+				}
+				if (data->_tmp15_) {
+					data->results_pushed++;
+				}
+				_g_object_unref0 (data->s);
+			}
+		}
+		_g_object_unref0 (data->_e_it);
+	}
+	data->_tmp17_ = zeitgeist_result_set_size (data->events);
+	data->result = data->_tmp17_ > 0;
+	_g_object_unref0 (data->events);
+	_g_ptr_array_free0 (data->ptr_array);
+	__g_list_free__g_object_unref0_0 (data->helper_event_list);
+	if (data->_state_ == 0) {
+		g_simple_async_result_complete_in_idle (data->_async_result);
+	} else {
+		g_simple_async_result_complete (data->_async_result);
+	}
+	g_object_unref (data->_async_result);
+	return FALSE;
+	_g_object_unref0 (data->events);
+	_g_ptr_array_free0 (data->ptr_array);
+	__g_list_free__g_object_unref0_0 (data->helper_event_list);
+	if (data->_state_ == 0) {
+		g_simple_async_result_complete_in_idle (data->_async_result);
+	} else {
+		g_simple_async_result_complete (data->_async_result);
+	}
+	g_object_unref (data->_async_result);
+	return FALSE;
+}
+
+
+static void related_applet_get_events_for_actor_data_free (gpointer _data) {
+	RelatedAppletGetEventsForActorData* data;
+	data = _data;
+	_g_free0 (data->actor);
+	_g_object_unref0 (data->self);
+	g_slice_free (RelatedAppletGetEventsForActorData, data);
+}
+
+
+static void related_applet_get_events_for_actor (RelatedApplet* self, const gchar* actor, GAsyncReadyCallback _callback_, gpointer _user_data_) {
+	RelatedAppletGetEventsForActorData* _data_;
+	_data_ = g_slice_new0 (RelatedAppletGetEventsForActorData);
+	_data_->_async_result = g_simple_async_result_new (G_OBJECT (self), _callback_, _user_data_, related_applet_get_events_for_actor);
+	g_simple_async_result_set_op_res_gpointer (_data_->_async_result, _data_, related_applet_get_events_for_actor_data_free);
+	_data_->self = _g_object_ref0 (self);
+	_data_->actor = g_strdup (actor);
+	related_applet_get_events_for_actor_co (_data_);
+}
+
+
+static gboolean related_applet_get_events_for_actor_finish (RelatedApplet* self, GAsyncResult* _res_) {
+	gboolean result;
+	RelatedAppletGetEventsForActorData* _data_;
+	_data_ = g_simple_async_result_get_op_res_gpointer (G_SIMPLE_ASYNC_RESULT (_res_));
+	result = _data_->result;
+	return result;
+}
+
+
+static void related_applet_get_events_for_actor_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_) {
+	RelatedAppletGetEventsForActorData* data;
+	data = _user_data_;
+	data->_source_object_ = source_object;
+	data->_res_ = _res_;
+	related_applet_get_events_for_actor_co (data);
+}
+
+
+static gboolean related_applet_get_events_for_actor_co (RelatedAppletGetEventsForActorData* data) {
+	switch (data->_state_) {
+		case 0:
+		goto _state_0;
+		case 1:
+		goto _state_1;
+		default:
+		g_assert_not_reached ();
+	}
+	_state_0:
+	data->_tmp0_ = NULL;
+	data->_tmp0_ = g_ptr_array_new ();
+	data->ptr_array = data->_tmp0_;
+	data->_tmp1_ = NULL;
+	data->_tmp1_ = zeitgeist_event_new ();
+	data->event = g_object_ref_sink (data->_tmp1_);
+	if (data->actor != NULL) {
+		data->_tmp2_ = g_strconcat ("application://", data->actor, NULL);
+		data->_tmp3_ = data->_tmp2_;
+		zeitgeist_event_set_actor (data->event, data->_tmp3_);
+		_g_free0 (data->_tmp3_);
+	}
+	g_ptr_array_add (data->ptr_array, data->event);
+	data->_tmp4_ = NULL;
+	data->_tmp4_ = zeitgeist_time_range_new_to_now ();
+	data->_tmp5_ = g_object_ref_sink (data->_tmp4_);
+	data->_tmp6_ = data->ptr_array;
+	data->ptr_array = NULL;
+	data->_state_ = 1;
+	zeitgeist_log_find_events (data->self->priv->zg_log, data->_tmp5_, data->_tmp6_, ZEITGEIST_STORAGE_STATE_ANY, (guint32) 16, ZEITGEIST_RESULT_TYPE_MOST_POPULAR_SUBJECTS, NULL, related_applet_get_events_for_actor_ready, data);
+	return FALSE;
+	_state_1:
+	data->_tmp7_ = NULL;
+	data->_tmp7_ = zeitgeist_log_find_events_finish (data->self->priv->zg_log, data->_res_, &data->_inner_error_);
+	data->_tmp8_ = data->_tmp7_;
+	_g_object_unref0 (data->_tmp5_);
+	data->_tmp9_ = data->_tmp8_;
+	if (data->_inner_error_ != NULL) {
+		goto __catch3_g_error;
+	}
+	_g_object_unref0 (data->events);
+	data->events = data->_tmp9_;
+	goto __finally3;
+	__catch3_g_error:
+	{
+		data->err = data->_inner_error_;
+		data->_inner_error_ = NULL;
+		data->result = FALSE;
+		_g_error_free0 (data->err);
+		_g_object_unref0 (data->events);
+		_g_object_unref0 (data->event);
+		_g_ptr_array_free0 (data->ptr_array);
+		if (data->_state_ == 0) {
+			g_simple_async_result_complete_in_idle (data->_async_result);
+		} else {
+			g_simple_async_result_complete (data->_async_result);
+		}
+		g_object_unref (data->_async_result);
+		return FALSE;
+	}
+	__finally3:
+	if (data->_inner_error_ != NULL) {
+		_g_object_unref0 (data->events);
+		_g_object_unref0 (data->event);
+		_g_ptr_array_free0 (data->ptr_array);
+		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, data->_inner_error_->message, g_quark_to_string (data->_inner_error_->domain), data->_inner_error_->code);
+		g_clear_error (&data->_inner_error_);
+		return FALSE;
+	}
+	data->results_pushed = 0;
+	{
+		data->_tmp10_ = NULL;
+		data->_tmp10_ = _vala_zeitgeist_result_set_iterator (data->events);
+		data->_e_it = data->_tmp10_;
+		while (TRUE) {
+			data->_tmp11_ = NULL;
+			data->_tmp11_ = _vala_zeitgeist_result_set_next_value (data->_e_it);
+			data->e = data->_tmp11_;
+			if (!(data->e != NULL)) {
+				break;
+			}
+			data->_tmp12_ = zeitgeist_event_num_subjects (data->e);
+			if (data->_tmp12_ > 0) {
+				data->_tmp13_ = NULL;
+				data->_tmp13_ = zeitgeist_event_get_subject (data->e, 0);
+				data->_tmp14_ = _g_object_ref0 (data->_tmp13_);
+				data->s = data->_tmp14_;
+				if (data->results_pushed < 4) {
+					data->_tmp16_ = related_applet_push_result (data->self, data->e, data->s);
+					data->_tmp15_ = data->_tmp16_;
+				} else {
+					data->_tmp15_ = FALSE;
+				}
+				if (data->_tmp15_) {
+					data->results_pushed++;
+				}
+				_g_object_unref0 (data->s);
+			}
+		}
+		_g_object_unref0 (data->_e_it);
+	}
+	data->_tmp17_ = zeitgeist_result_set_size (data->events);
+	data->result = data->_tmp17_ > 0;
+	_g_object_unref0 (data->events);
+	_g_object_unref0 (data->event);
+	_g_ptr_array_free0 (data->ptr_array);
+	if (data->_state_ == 0) {
+		g_simple_async_result_complete_in_idle (data->_async_result);
+	} else {
+		g_simple_async_result_complete (data->_async_result);
+	}
+	g_object_unref (data->_async_result);
+	return FALSE;
+	_g_object_unref0 (data->events);
+	_g_object_unref0 (data->event);
+	_g_ptr_array_free0 (data->ptr_array);
+	if (data->_state_ == 0) {
+		g_simple_async_result_complete_in_idle (data->_async_result);
+	} else {
+		g_simple_async_result_complete (data->_async_result);
+	}
+	g_object_unref (data->_async_result);
+	return FALSE;
+}
+
+
+static void related_applet_build_dialog_data_free (gpointer _data) {
+	RelatedAppletBuildDialogData* data;
+	data = _data;
+	_g_free0 (data->desktop_file);
+	_g_object_unref0 (data->self);
+	g_slice_free (RelatedAppletBuildDialogData, data);
+}
+
+
+static void related_applet_build_dialog (RelatedApplet* self, const gchar* desktop_file, GAsyncReadyCallback _callback_, gpointer _user_data_) {
+	RelatedAppletBuildDialogData* _data_;
+	_data_ = g_slice_new0 (RelatedAppletBuildDialogData);
+	_data_->_async_result = g_simple_async_result_new (G_OBJECT (self), _callback_, _user_data_, related_applet_build_dialog);
+	g_simple_async_result_set_op_res_gpointer (_data_->_async_result, _data_, related_applet_build_dialog_data_free);
+	_data_->self = _g_object_ref0 (self);
+	_data_->desktop_file = g_strdup (desktop_file);
+	related_applet_build_dialog_co (_data_);
+}
+
+
+static void related_applet_build_dialog_finish (RelatedApplet* self, GAsyncResult* _res_) {
+	RelatedAppletBuildDialogData* _data_;
+	_data_ = g_simple_async_result_get_op_res_gpointer (G_SIMPLE_ASYNC_RESULT (_res_));
+}
+
+
+static void related_applet_build_dialog_ready (GObject* source_object, GAsyncResult* _res_, gpointer _user_data_) {
+	RelatedAppletBuildDialogData* data;
+	data = _user_data_;
+	data->_source_object_ = source_object;
+	data->_res_ = _res_;
+	related_applet_build_dialog_co (data);
+}
+
+
+static gboolean related_applet_build_dialog_co (RelatedAppletBuildDialogData* data) {
+	switch (data->_state_) {
+		case 0:
+		goto _state_0;
+		case 1:
+		goto _state_1;
+		case 2:
+		goto _state_2;
+		case 3:
+		goto _state_3;
+		default:
+		g_assert_not_reached ();
+	}
+	_state_0:
+	if (data->self->priv->vbox != NULL) {
+		gtk_object_destroy ((GtkObject*) data->self->priv->vbox);
+	}
+	data->_tmp0_ = NULL;
+	data->_tmp0_ = (GtkVBox*) gtk_vbox_new (FALSE, 3);
+	_g_object_unref0 (data->self->priv->vbox);
+	data->self->priv->vbox = g_object_ref_sink (data->_tmp0_);
+	gtk_container_add ((GtkContainer*) data->self->priv->dialog, (GtkWidget*) data->self->priv->vbox);
+	data->found1 = FALSE;
+	data->found2 = FALSE;
+	data->_tmp1_ = g_strdup (data->desktop_file);
+	_g_free0 (data->self->priv->current_desktop_file_path);
+	data->self->priv->current_desktop_file_path = data->_tmp1_;
+	g_object_set (data->self->priv->throbber, "active", TRUE, NULL);
+	if (data->desktop_file != NULL) {
+		data->_tmp2_ = NULL;
+		data->_tmp2_ = g_hash_table_lookup (data->self->priv->desktop_file_info, data->desktop_file);
+		data->df_data = (DesktopFileInfo*) data->_tmp2_;
+		if (data->df_data != NULL) {
+			data->_tmp3_ = (*data->df_data).mimetypes_length1 > 0;
+		} else {
+			data->_tmp3_ = FALSE;
+		}
+		if (data->_tmp3_) {
+			data->_state_ = 1;
+			related_applet_get_recent_by_mimetype (data->self, (*data->df_data).mimetypes, (*data->df_data).mimetypes_length1, related_applet_build_dialog_ready, data);
+			return FALSE;
+			_state_1:
+			data->_tmp4_ = related_applet_get_recent_by_mimetype_finish (data->self, data->_res_);
+			data->found1 = data->_tmp4_;
+		}
+	} else {
+		data->_tmp5_ = NULL;
+		data->_tmp5_ = g_new0 (gchar*, 0 + 1);
+		data->_tmp6_ = data->_tmp5_;
+		data->_tmp6__length1 = 0;
+		data->_state_ = 2;
+		related_applet_get_recent_by_mimetype (data->self, data->_tmp6_, 0, related_applet_build_dialog_ready, data);
+		return FALSE;
+		_state_2:
+		data->_tmp7_ = related_applet_get_recent_by_mimetype_finish (data->self, data->_res_);
+		data->found1 = data->_tmp7_;
+		data->_tmp6_ = (_vala_array_free (data->_tmp6_, data->_tmp6__length1, (GDestroyNotify) g_free), NULL);
+	}
+	if (data->found1) {
+		data->_tmp8_ = NULL;
+		data->_tmp8_ = (GtkHSeparator*) gtk_hseparator_new ();
+		data->_tmp9_ = g_object_ref_sink (data->_tmp8_);
+		gtk_container_add ((GtkContainer*) data->self->priv->vbox, (GtkWidget*) data->_tmp9_);
+		_g_object_unref0 (data->_tmp9_);
+	}
+	data->actor = NULL;
+	if (data->desktop_file != NULL) {
+		data->_tmp10_ = NULL;
+		data->_tmp10_ = g_path_get_basename (data->desktop_file);
+		_g_free0 (data->actor);
+		data->actor = data->_tmp10_;
+	}
+	data->_state_ = 3;
+	related_applet_get_events_for_actor (data->self, data->actor, related_applet_build_dialog_ready, data);
+	return FALSE;
+	_state_3:
+	data->_tmp11_ = related_applet_get_events_for_actor_finish (data->self, data->_res_);
+	data->found2 = data->_tmp11_;
+	if (data->desktop_file != NULL) {
+		data->_tmp13_ = !data->found1;
+	} else {
+		data->_tmp13_ = FALSE;
+	}
+	if (data->_tmp13_) {
+		data->_tmp12_ = !data->found2;
+	} else {
+		data->_tmp12_ = FALSE;
+	}
+	if (data->_tmp12_) {
+		related_applet_build_dialog (data->self, NULL, NULL, NULL);
+		_g_free0 (data->actor);
+		if (data->_state_ == 0) {
+			g_simple_async_result_complete_in_idle (data->_async_result);
+		} else {
+			g_simple_async_result_complete (data->_async_result);
+		}
+		g_object_unref (data->_async_result);
+		return FALSE;
+	}
+	g_object_set (data->self->priv->throbber, "active", FALSE, NULL);
+	if (!data->found1) {
+		data->_tmp14_ = !data->found2;
+	} else {
+		data->_tmp14_ = FALSE;
+	}
+	if (data->_tmp14_) {
+		data->_tmp15_ = NULL;
+		data->_tmp15_ = (GtkLabel*) gtk_label_new ("There are no items to display...");
+		data->l = g_object_ref_sink (data->_tmp15_);
+		gtk_container_add ((GtkContainer*) data->self->priv->vbox, (GtkWidget*) data->l);
+		_g_object_unref0 (data->l);
+	}
+	gtk_widget_show_all ((GtkWidget*) data->self->priv->dialog);
+	_g_free0 (data->actor);
+	if (data->_state_ == 0) {
+		g_simple_async_result_complete_in_idle (data->_async_result);
+	} else {
+		g_simple_async_result_complete (data->_async_result);
+	}
+	g_object_unref (data->_async_result);
+	return FALSE;
+}
+
+
+static void related_applet_on_clicked (RelatedApplet* self) {
+	GtkWidgetFlags _tmp0_;
+	GtkWidgetFlags dialog_flags;
+	WnckWindow* _tmp1_ = NULL;
+	WnckWindow* _tmp2_;
+	WnckWindow* active;
+	gconstpointer _tmp3_ = NULL;
+	gchar* _tmp4_;
+	gchar* desktop_file;
+	g_return_if_fail (self != NULL);
+	_tmp0_ = GTK_WIDGET_FLAGS ((GtkWidget*) self->priv->dialog);
+	dialog_flags = _tmp0_ & GTK_VISIBLE;
+	if (dialog_flags != 0) {
+		gtk_widget_hide ((GtkWidget*) self->priv->dialog);
+		return;
+	}
+	g_object_set (self->priv->dialog, "hide-on-unfocus", TRUE, NULL);
+	_tmp1_ = wnck_screen_get_active_window (self->priv->wnck_screen);
+	_tmp2_ = _g_object_ref0 (_tmp1_);
+	active = _tmp2_;
+	_tmp3_ = g_object_get_data ((GObject*) active, "desktop-file-path");
+	_tmp4_ = g_strdup ((const gchar*) _tmp3_);
+	desktop_file = _tmp4_;
+	related_applet_build_dialog (self, desktop_file, NULL, NULL);
+	_g_free0 (desktop_file);
+	_g_object_unref0 (active);
+}
+
+
+static Block1Data* block1_data_ref (Block1Data* _data1_) {
+	g_atomic_int_inc (&_data1_->_ref_count_);
+	return _data1_;
+}
+
+
+static void block1_data_unref (Block1Data* _data1_) {
+	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
+		_g_object_unref0 (_data1_->self);
+		_g_free0 (_data1_->desktop_file);
+		_g_object_unref0 (_data1_->f);
+		g_slice_free (Block1Data, _data1_);
+	}
+}
+
+
+static void _g_list_free__g_free0_ (GList* self) {
+	g_list_foreach (self, (GFunc) _g_free0_, NULL);
+	g_list_free (self);
+}
+
+
+static void _lambda0_ (Block1Data* _data1_) {
+	RelatedApplet * self;
+	GdkAppLaunchContext* _tmp0_ = NULL;
+	GdkAppLaunchContext* context;
+	GError * _inner_error_ = NULL;
+	self = _data1_->self;
+	_tmp0_ = gdk_app_launch_context_new ();
+	context = _tmp0_;
+	if (_data1_->desktop_file == NULL) {
+		gchar* _tmp1_ = NULL;
+		gchar* _tmp2_;
+		_tmp1_ = g_file_get_uri (_data1_->f);
+		_tmp2_ = _tmp1_;
+		g_app_info_launch_default_for_uri (_tmp2_, (GAppLaunchContext*) context, &_inner_error_);
+		_g_free0 (_tmp2_);
+		if (_inner_error_ != NULL) {
+			_g_object_unref0 (context);
+			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+			g_clear_error (&_inner_error_);
+			return;
+		}
+	} else {
+		GDesktopAppInfo* _tmp3_ = NULL;
+		GDesktopAppInfo* app_info;
+		gboolean _tmp4_;
+		_tmp3_ = g_desktop_app_info_new_from_filename (_data1_->desktop_file);
+		app_info = _tmp3_;
+		_tmp4_ = g_app_info_supports_uris ((GAppInfo*) app_info);
+		if (_tmp4_) {
+			GList* l;
+			gchar* _tmp5_ = NULL;
+			l = NULL;
+			_tmp5_ = g_file_get_uri (_data1_->f);
+			l = g_list_append (l, _tmp5_);
+			g_app_info_launch_uris ((GAppInfo*) app_info, l, (GAppLaunchContext*) context, &_inner_error_);
+			if (_inner_error_ != NULL) {
+				__g_list_free__g_free0_0 (l);
+				_g_object_unref0 (app_info);
+				_g_object_unref0 (context);
+				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+				g_clear_error (&_inner_error_);
+				return;
+			}
+			__g_list_free__g_free0_0 (l);
+		} else {
+			GList* l;
+			GFile* _tmp6_;
+			l = NULL;
+			_tmp6_ = _g_object_ref0 (_data1_->f);
+			l = g_list_append (l, _tmp6_);
+			g_app_info_launch ((GAppInfo*) app_info, l, (GAppLaunchContext*) context, &_inner_error_);
+			if (_inner_error_ != NULL) {
+				__g_list_free__g_object_unref0_0 (l);
+				_g_object_unref0 (app_info);
+				_g_object_unref0 (context);
+				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+				g_clear_error (&_inner_error_);
+				return;
+			}
+			__g_list_free__g_object_unref0_0 (l);
+		}
+		_g_object_unref0 (app_info);
+	}
+	gtk_widget_hide ((GtkWidget*) self->priv->dialog);
+	_g_object_unref0 (context);
+}
+
+
+static void __lambda0__gtk_button_clicked (GtkButton* _sender, gpointer self) {
+	_lambda0_ (self);
+}
+
+
+static gboolean related_applet_push_result (RelatedApplet* self, ZeitgeistEvent* event, ZeitgeistSubject* subject) {
+	gboolean result = FALSE;
+	Block1Data* _data1_;
+	const gchar* _tmp0_ = NULL;
+	GFile* _tmp1_ = NULL;
+	gboolean _tmp2_ = FALSE;
+	gboolean _tmp3_;
+	const gchar* _tmp5_ = NULL;
+	gchar* _tmp6_;
+	gchar* text;
+	GIcon* icon = NULL;
+	gboolean _tmp8_;
+	GtkButton* _tmp14_ = NULL;
+	GtkButton* button;
+	GtkHBox* _tmp15_ = NULL;
+	GtkHBox* hbox;
+	GtkImage* _tmp16_ = NULL;
+	GtkImage* image;
+	GtkLabel* _tmp17_ = NULL;
+	GtkLabel* label;
+	gchar* _tmp18_ = NULL;
+	gboolean _tmp19_;
+	gchar* _tmp22_;
+	GError * _inner_error_ = NULL;
+	g_return_val_if_fail (self != NULL, FALSE);
+	g_return_val_if_fail (event != NULL, FALSE);
+	g_return_val_if_fail (subject != NULL, FALSE);
+	_data1_ = g_slice_new0 (Block1Data);
+	_data1_->_ref_count_ = 1;
+	_data1_->self = g_object_ref (self);
+	_tmp0_ = zeitgeist_subject_get_uri (subject);
+	_tmp1_ = g_file_new_for_uri (_tmp0_);
+	_data1_->f = _tmp1_;
+	_tmp3_ = g_file_is_native (_data1_->f);
+	if (_tmp3_) {
+		gboolean _tmp4_;
+		_tmp4_ = g_file_query_exists (_data1_->f, NULL);
+		_tmp2_ = !_tmp4_;
+	} else {
+		_tmp2_ = FALSE;
+	}
+	if (_tmp2_) {
+		result = FALSE;
+		block1_data_unref (_data1_);
+		_data1_ = NULL;
+		return result;
+	}
+	_tmp5_ = zeitgeist_subject_get_text (subject);
+	_tmp6_ = g_strdup (_tmp5_);
+	text = _tmp6_;
+	if (text == NULL) {
+		gchar* _tmp7_ = NULL;
+		_tmp7_ = g_file_get_basename (_data1_->f);
+		_g_free0 (text);
+		text = _tmp7_;
+	}
+	_tmp8_ = g_file_is_native (_data1_->f);
+	if (_tmp8_) {
+		GFileInfo* _tmp9_ = NULL;
+		GFileInfo* fi;
+		GIcon* _tmp10_ = NULL;
+		GIcon* _tmp11_;
+		_tmp9_ = g_file_query_info (_data1_->f, G_FILE_ATTRIBUTE_STANDARD_ICON, 0, NULL, &_inner_error_);
+		fi = _tmp9_;
+		if (_inner_error_ != NULL) {
+			_g_object_unref0 (icon);
+			_g_free0 (text);
+			block1_data_unref (_data1_);
+			_data1_ = NULL;
+			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
+			g_clear_error (&_inner_error_);
+			return FALSE;
+		}
+		_tmp10_ = g_file_info_get_icon (fi);
+		_tmp11_ = _g_object_ref0 (_tmp10_);
+		_g_object_unref0 (icon);
+		icon = _tmp11_;
+		_g_object_unref0 (fi);
+	} else {
+		const gchar* _tmp12_ = NULL;
+		GIcon* _tmp13_ = NULL;
+		_tmp12_ = zeitgeist_subject_get_mimetype (subject);
+		_tmp13_ = g_content_type_get_icon (_tmp12_);
+		_g_object_unref0 (icon);
+		icon = _tmp13_;
+	}
+	_tmp14_ = (GtkButton*) gtk_button_new ();
+	button = g_object_ref_sink (_tmp14_);
+	_tmp15_ = (GtkHBox*) gtk_hbox_new (FALSE, 6);
+	hbox = g_object_ref_sink (_tmp15_);
+	_tmp16_ = (GtkImage*) gtk_image_new_from_gicon (icon, GTK_ICON_SIZE_BUTTON);
+	image = g_object_ref_sink (_tmp16_);
+	_tmp17_ = (GtkLabel*) gtk_label_new (text);
+	label = g_object_ref_sink (_tmp17_);
+	gtk_label_set_ellipsize (label, PANGO_ELLIPSIZE_MIDDLE);
+	gtk_label_set_max_width_chars (label, 35);
+	g_object_set ((GtkMisc*) label, "xalign", 0.0f, NULL);
+	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) image, FALSE, TRUE, (guint) 0);
+	gtk_box_pack_start ((GtkBox*) hbox, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
+	gtk_button_set_relief (button, GTK_RELIEF_NONE);
+	gtk_button_set_focus_on_click (button, FALSE);
+	gtk_container_add ((GtkContainer*) button, (GtkWidget*) hbox);
+	_tmp19_ = g_file_is_native (_data1_->f);
+	if (_tmp19_) {
+		gchar* _tmp20_ = NULL;
+		_tmp20_ = g_file_get_path (_data1_->f);
+		_g_free0 (_tmp18_);
+		_tmp18_ = _tmp20_;
+	} else {
+		gchar* _tmp21_ = NULL;
+		_tmp21_ = g_file_get_uri (_data1_->f);
+		_g_free0 (_tmp18_);
+		_tmp18_ = _tmp21_;
+	}
+	gtk_widget_set_tooltip_text ((GtkWidget*) button, _tmp18_);
+	_tmp22_ = g_strdup (self->priv->current_desktop_file_path);
+	_data1_->desktop_file = _tmp22_;
+	g_signal_connect_data (button, "clicked", (GCallback) __lambda0__gtk_button_clicked, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
+	gtk_container_add ((GtkContainer*) self->priv->vbox, (GtkWidget*) button);
+	result = TRUE;
+	_g_free0 (_tmp18_);
+	_g_object_unref0 (label);
+	_g_object_unref0 (image);
+	_g_object_unref0 (hbox);
+	_g_object_unref0 (button);
+	_g_object_unref0 (icon);
+	_g_free0 (text);
+	block1_data_unref (_data1_);
+	_data1_ = NULL;
+	return result;
+}
+
+
+static GObject * related_applet_constructor (GType type, guint n_construct_properties, GObjectConstructParam * construct_properties) {
+	GObject * obj;
+	GObjectClass * parent_class;
+	RelatedApplet * self;
+	AwnOverlay* _tmp0_;
+	AwnOverlay* _tmp1_;
+	parent_class = G_OBJECT_CLASS (related_applet_parent_class);
+	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
+	self = RELATED_APPLET (obj);
+	g_object_set (self->priv->star_overlay, "active", FALSE, NULL);
+	g_object_set (self->priv->star_overlay, "gravity", GDK_GRAVITY_SOUTH_EAST, NULL);
+	_tmp0_ = self->priv->star_overlay;
+	g_object_set (AWN_IS_OVERLAY_THEMED_ICON (_tmp0_) ? ((AwnOverlayThemedIcon*) _tmp0_) : NULL, "scale", 0.3, NULL);
+	g_object_set (self->priv->throbber, "gravity", GDK_GRAVITY_SOUTH_WEST, NULL);
+	_tmp1_ = self->priv->throbber;
+	g_object_set (AWN_IS_OVERLAY_THROBBER (_tmp1_) ? ((AwnOverlayThrobber*) _tmp1_) : NULL, "scale", 0.3, NULL);
+	return obj;
+}
+
+
+static void related_applet_class_init (RelatedAppletClass * klass) {
+	related_applet_parent_class = g_type_class_peek_parent (klass);
+	g_type_class_add_private (klass, sizeof (RelatedAppletPrivate));
+	G_OBJECT_CLASS (klass)->constructor = related_applet_constructor;
+	G_OBJECT_CLASS (klass)->finalize = related_applet_finalize;
+}
+
+
+static void related_applet_instance_init (RelatedApplet * self) {
+	AwnDesktopLookupCached* _tmp0_ = NULL;
+	ZeitgeistLog* _tmp1_ = NULL;
+	AwnOverlayThrobber* _tmp2_ = NULL;
+	AwnOverlayThemedIcon* _tmp3_ = NULL;
+	self->priv = RELATED_APPLET_GET_PRIVATE (self);
+	_tmp0_ = awn_desktop_lookup_cached_new ();
+	self->priv->lookup = _tmp0_;
+	_tmp1_ = zeitgeist_log_new ();
+	self->priv->zg_log = _tmp1_;
+	_tmp2_ = (AwnOverlayThrobber*) awn_overlay_throbber_new ();
+	self->priv->throbber = (AwnOverlay*) g_object_ref_sink (_tmp2_);
+	_tmp3_ = awn_overlay_themed_icon_new (GTK_STOCK_ABOUT);
+	self->priv->star_overlay = (AwnOverlay*) g_object_ref_sink (_tmp3_);
+}
+
+
+static void related_applet_finalize (GObject* obj) {
+	RelatedApplet * self;
+	self = RELATED_APPLET (obj);
+	_g_object_unref0 (self->priv->lookup);
+	_g_object_unref0 (self->priv->zg_log);
+	_g_object_unref0 (self->priv->throbber);
+	_g_object_unref0 (self->priv->star_overlay);
+	_g_hash_table_unref0 (self->priv->desktop_file_info);
+	_g_object_unref0 (self->priv->dialog);
+	_g_object_unref0 (self->priv->vbox);
+	_g_free0 (self->priv->current_desktop_file_path);
+	G_OBJECT_CLASS (related_applet_parent_class)->finalize (obj);
+}
+
+
+GType related_applet_get_type (void) {
+	static volatile gsize related_applet_type_id__volatile = 0;
+	if (g_once_init_enter (&related_applet_type_id__volatile)) {
+		static const GTypeInfo g_define_type_info = { sizeof (RelatedAppletClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) related_applet_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (RelatedApplet), 0, (GInstanceInitFunc) related_applet_instance_init, NULL };
+		GType related_applet_type_id;
+		related_applet_type_id = g_type_register_static (AWN_TYPE_APPLET_SIMPLE, "RelatedApplet", &g_define_type_info, 0);
+		g_once_init_leave (&related_applet_type_id__volatile, related_applet_type_id);
+	}
+	return related_applet_type_id__volatile;
+}
+
+
+AwnApplet* awn_applet_factory_initp (const gchar* canonical_name, const gchar* uid, gint panel_id) {
+	AwnApplet* result = NULL;
+	RelatedApplet* _tmp0_ = NULL;
+	g_return_val_if_fail (canonical_name != NULL, NULL);
+	g_return_val_if_fail (uid != NULL, NULL);
+	_tmp0_ = related_applet_new (canonical_name, uid, panel_id);
+	result = (AwnApplet*) g_object_ref_sink (_tmp0_);
+	return result;
+}
+
+
+static void _vala_array_destroy (gpointer array, gint array_length, GDestroyNotify destroy_func) {
+	if ((array != NULL) && (destroy_func != NULL)) {
+		int i;
+		for (i = 0; i < array_length; i = i + 1) {
+			if (((gpointer*) array)[i] != NULL) {
+				destroy_func (((gpointer*) array)[i]);
+			}
+		}
+	}
+}
+
+
+static void _vala_array_free (gpointer array, gint array_length, GDestroyNotify destroy_func) {
+	_vala_array_destroy (array, array_length, destroy_func);
+	g_free (array);
+}
+
+
+
